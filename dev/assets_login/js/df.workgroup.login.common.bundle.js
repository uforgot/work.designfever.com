!function(e){var n={};function t(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)t.d(o,r,function(n){return e[n]}.bind(null,r));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=0)}({"../common/df.workgroup.GlobalVars.js":
/*!********************************************!*\
  !*** ../common/df.workgroup.GlobalVars.js ***!
  \********************************************/
/*! no static exports found */function(e,n){window.df=window.df||{},window.df.workgroup=window.df.workgroup||{},window.df.workgroup.GlobalVars={isLoaded:!1,infoData:null,time_now:0,params:df.lab.Util.getParams()}},"../common/df.workgroup.Preset.js":
/*!****************************************!*\
  !*** ../common/df.workgroup.Preset.js ***!
  \****************************************/
/*! no static exports found */function(e,n){window.df=window.df||{},window.df.workgroup=window.df.workgroup||{},window.df.workgroup.Preset={json_url:{default:"/json/df_info_data.json.php",default_local:"assets_login/temp/df_info_data.json",login:"assets_login/temp/df_info_data_01_login.json",checkin:"assets_login/temp/df_info_data_02_checkin.json",checkout:"assets_login/temp/df_info_data_03_checkout.json",logout:"assets_login/temp/df_info_data_04_logout.json"},document_url:{approval:"approval/approval_to_list.php",approval_my:"approval/approval_my_list.php",approval_cc:"approval/approval_cc_list.php"},main_url:"main.php",eventType:{ON_LOAD_JSON:"onLoadJson",ON_LOGIN:"onLogin",ON_CHECKIN:"onCheckin",ON_CHECKOUT:"onCheckout",ON_LOGOUT:"onLogout",ON_CHANGE_STAGE_INFO:"onChangeStageInfo",ON_ERROR:"onError",ON_WARNING:"onWarning",ON_CLOSE_MODAL:"onCloseModal"},class_name:{showIn:"show-in",hideOut:"hide-out"},related_site:[{title:"designfever.com",url:"http://designfever.com/",thumb:"thumb_mail.jpg_200x200"},{title:"Facebook",url:"https://www.facebook.com/feverbook",thumb:"thumb_mail.jpg_200x200"},{title:"Twitter",url:"https://twitter.com/designfever_kr",thumb:"thumb_mail.jpg_200x200"},{title:"Blog",url:"https://blog.naver.com/design_fever",thumb:"thumb_mail.jpg_200x200"},{title:"DF Mail",url:"http://mail.designfever.com/",thumb:"thumb_mail.jpg_200x200"},{title:"DF Lab",url:"http://dev.designfever.com/lab/",thumb:"thumb_mail.jpg_200x200"},{title:"Youtube",url:"https://www.youtube.com/user/designfeverda",thumb:"thumb_mail.jpg_200x200"}],isBgTest:!1}},"../common/df.workgroup.Util.js":
/*!**************************************!*\
  !*** ../common/df.workgroup.Util.js ***!
  \**************************************/
/*! no static exports found */function(e,n,t){var o=t(/*! ../bundler/node_modules/date-fns/format */"./node_modules/date-fns/format/index.js"),r=t(/*! ../bundler/node_modules/date-fns/is_date */"./node_modules/date-fns/is_date/index.js"),a=t(/*! ../bundler/node_modules/date-fns/locale/en */"./node_modules/date-fns/locale/en/index.js");window.df=window.df||{},window.df.workgroup=window.df.workgroup||{},window.df.workgroup.Util=function(){var e;function n(e){return r(e)}return{load_json:function(n,t,o,r){e=new Date,console.log("\n----- << START LOAD >> xhr.url : ",n,"\n");var a=r?JSON.stringify(r):null,s={method:t,action:n},u=new XMLHttpRequest;u.open(s.method,s.action,!0),u.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),u.onreadystatechange=function(){},u.onloadend=function(n){0===n.target.status?console.log("xhr.onloadend (Failed) : ",u):400===n.target.status?console.log("xhr.onloadend (Bad Request) : ",u):404===n.target.status?console.log("xhr.onloadend (404 Not Found) : ",u):200===n.target.status&&(console.log("\n----- << COMP LOAD >> ----- xhr.onloadend (Success) duration : ",((new Date).getTime()-e.getTime())/1e3+"sec\n\n"),console.log("xhr.onloadend (Success) response : \n",n),console.log("xhr.onloadend (Success) responseText(JSON) : \n",JSON.parse(n.target.responseText)),console.log("\n----- << COMP LOAD >> -----\n\n"),setTimeout(function(){o(n)},10))},u.send(a)},addZeroNumber:function(e){return e<10?"0"+e:""+e},addParamUniq:function(e){return e=-1==e.indexOf("?")?e+"?uniq="+(new Date).getTime():e+"&uniq="+(new Date).getTime()},getDate_format:function(e,t){return n(e)?o(e,t,{locale:a}):"XXXXXXXXXXX"},getIsDate:n}}()},"../common/df.workgroup.login.LoadInfoData.js":
/*!****************************************************!*\
  !*** ../common/df.workgroup.login.LoadInfoData.js ***!
  \****************************************************/
/*! no static exports found */function(e,n){!function(){if("function"==typeof window.CustomEvent)return!1;function e(e,n){n=n||{bubbles:!1,cancelable:!1,detail:void 0};var t=document.createEvent("CustomEvent");return t.initCustomEvent(e,n.bubbles,n.cancelable,n.detail),t}e.prototype=window.Event.prototype,window.CustomEvent=e}(),window.df=window.df||{},window.df.workgroup=window.df.workgroup||{},window.df.workgroup.login=window.df.workgroup.login||{},window.df.workgroup.login.LoadInfoData=function(){var e="[ LoadInfoData ]",n="";function t(e){var n=JSON.parse(e.target.responseText);window.df.workgroup.GlobalVars.isLoaded=!0,window.df.workgroup.GlobalVars.infoData=n;var t=!1,o=window.df.workgroup.GlobalVars.infoData;void 0!=o.user&&void 0!=o.user.isLoggedIn&&(o.user.isLoggedIn||"true"==o.user.isLoggedIn)&&(t=!0);var r=document.querySelector("html"),a=window.df.lab.Util.hasClass(r,"desktop");t&&(a&&"desktop"==Detectizr.device.type||o.user.isAdminAccount),function(){var e=new CustomEvent(window.df.workgroup.Preset.eventType.ON_LOAD_JSON);document.dispatchEvent(e)}()}function o(){document.removeEventListener(window.df.workgroup.Preset.eventType.ON_LOAD_JSON,o)}return{init:function(){n="localhost"===window.location.hostname||"127.0.0.1"===window.location.hostname?window.df.workgroup.Preset.json_url.default_local:window.df.workgroup.Preset.json_url.default,console.log(e," load default json data"),document.addEventListener(window.df.workgroup.Preset.eventType.ON_LOAD_JSON,o),function(e,n){var t={method:"GET",action:df.workgroup.Util.addParamUniq(e)};df.workgroup.Util.load_json(t.action,t.method,n,null)}(n,t)}}}(),window.df.workgroup.login.LoadInfoData.init()},"./node_modules/date-fns/difference_in_calendar_days/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/date-fns/difference_in_calendar_days/index.js ***!
  \********************************************************************/
/*! no static exports found */function(e,n,t){var o=t(/*! ../start_of_day/index.js */"./node_modules/date-fns/start_of_day/index.js"),r=6e4,a=864e5;e.exports=function(e,n){var t=o(e),s=o(n),u=t.getTime()-t.getTimezoneOffset()*r,d=s.getTime()-s.getTimezoneOffset()*r;return Math.round((u-d)/a)}},"./node_modules/date-fns/format/index.js":
/*!***********************************************!*\
  !*** ./node_modules/date-fns/format/index.js ***!
  \***********************************************/
/*! no static exports found */function(e,n,t){var o=t(/*! ../get_day_of_year/index.js */"./node_modules/date-fns/get_day_of_year/index.js"),r=t(/*! ../get_iso_week/index.js */"./node_modules/date-fns/get_iso_week/index.js"),a=t(/*! ../get_iso_year/index.js */"./node_modules/date-fns/get_iso_year/index.js"),s=t(/*! ../parse/index.js */"./node_modules/date-fns/parse/index.js"),u=t(/*! ../is_valid/index.js */"./node_modules/date-fns/is_valid/index.js"),d=t(/*! ../locale/en/index.js */"./node_modules/date-fns/locale/en/index.js");var i={M:function(e){return e.getMonth()+1},MM:function(e){return c(e.getMonth()+1,2)},Q:function(e){return Math.ceil((e.getMonth()+1)/3)},D:function(e){return e.getDate()},DD:function(e){return c(e.getDate(),2)},DDD:function(e){return o(e)},DDDD:function(e){return c(o(e),3)},d:function(e){return e.getDay()},E:function(e){return e.getDay()||7},W:function(e){return r(e)},WW:function(e){return c(r(e),2)},YY:function(e){return c(e.getFullYear(),4).substr(2)},YYYY:function(e){return c(e.getFullYear(),4)},GG:function(e){return String(a(e)).substr(2)},GGGG:function(e){return a(e)},H:function(e){return e.getHours()},HH:function(e){return c(e.getHours(),2)},h:function(e){var n=e.getHours();return 0===n?12:n>12?n%12:n},hh:function(e){return c(i.h(e),2)},m:function(e){return e.getMinutes()},mm:function(e){return c(e.getMinutes(),2)},s:function(e){return e.getSeconds()},ss:function(e){return c(e.getSeconds(),2)},S:function(e){return Math.floor(e.getMilliseconds()/100)},SS:function(e){return c(Math.floor(e.getMilliseconds()/10),2)},SSS:function(e){return c(e.getMilliseconds(),3)},Z:function(e){return l(e.getTimezoneOffset(),":")},ZZ:function(e){return l(e.getTimezoneOffset())},X:function(e){return Math.floor(e.getTime()/1e3)},x:function(e){return e.getTime()}};function f(e){return e.match(/\[[\s\S]/)?e.replace(/^\[|]$/g,""):e.replace(/\\/g,"")}function l(e,n){n=n||"";var t=e>0?"-":"+",o=Math.abs(e),r=o%60;return t+c(Math.floor(o/60),2)+n+c(r,2)}function c(e,n){for(var t=Math.abs(e).toString();t.length<n;)t="0"+t;return t}e.exports=function(e,n,t){var o=n?String(n):"YYYY-MM-DDTHH:mm:ss.SSSZ",r=(t||{}).locale,a=d.format.formatters,l=d.format.formattingTokensRegExp;r&&r.format&&r.format.formatters&&(a=r.format.formatters,r.format.formattingTokensRegExp&&(l=r.format.formattingTokensRegExp));var c=s(e);return u(c)?function(e,n,t){var o,r,a=e.match(t),s=a.length;for(o=0;o<s;o++)r=n[a[o]]||i[a[o]],a[o]=r||f(a[o]);return function(e){for(var n="",t=0;t<s;t++)a[t]instanceof Function?n+=a[t](e,i):n+=a[t];return n}}(o,a,l)(c):"Invalid Date"}},"./node_modules/date-fns/get_day_of_year/index.js":
/*!********************************************************!*\
  !*** ./node_modules/date-fns/get_day_of_year/index.js ***!
  \********************************************************/
/*! no static exports found */function(e,n,t){var o=t(/*! ../parse/index.js */"./node_modules/date-fns/parse/index.js"),r=t(/*! ../start_of_year/index.js */"./node_modules/date-fns/start_of_year/index.js"),a=t(/*! ../difference_in_calendar_days/index.js */"./node_modules/date-fns/difference_in_calendar_days/index.js");e.exports=function(e){var n=o(e);return a(n,r(n))+1}},"./node_modules/date-fns/get_iso_week/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/date-fns/get_iso_week/index.js ***!
  \*****************************************************/
/*! no static exports found */function(e,n,t){var o=t(/*! ../parse/index.js */"./node_modules/date-fns/parse/index.js"),r=t(/*! ../start_of_iso_week/index.js */"./node_modules/date-fns/start_of_iso_week/index.js"),a=t(/*! ../start_of_iso_year/index.js */"./node_modules/date-fns/start_of_iso_year/index.js"),s=6048e5;e.exports=function(e){var n=o(e),t=r(n).getTime()-a(n).getTime();return Math.round(t/s)+1}},"./node_modules/date-fns/get_iso_year/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/date-fns/get_iso_year/index.js ***!
  \*****************************************************/
/*! no static exports found */function(e,n,t){var o=t(/*! ../parse/index.js */"./node_modules/date-fns/parse/index.js"),r=t(/*! ../start_of_iso_week/index.js */"./node_modules/date-fns/start_of_iso_week/index.js");e.exports=function(e){var n=o(e),t=n.getFullYear(),a=new Date(0);a.setFullYear(t+1,0,4),a.setHours(0,0,0,0);var s=r(a),u=new Date(0);u.setFullYear(t,0,4),u.setHours(0,0,0,0);var d=r(u);return n.getTime()>=s.getTime()?t+1:n.getTime()>=d.getTime()?t:t-1}},"./node_modules/date-fns/is_date/index.js":
/*!************************************************!*\
  !*** ./node_modules/date-fns/is_date/index.js ***!
  \************************************************/
/*! no static exports found */function(e,n){e.exports=function(e){return e instanceof Date}},"./node_modules/date-fns/is_valid/index.js":
/*!*************************************************!*\
  !*** ./node_modules/date-fns/is_valid/index.js ***!
  \*************************************************/
/*! no static exports found */function(e,n,t){var o=t(/*! ../is_date/index.js */"./node_modules/date-fns/is_date/index.js");e.exports=function(e){if(o(e))return!isNaN(e);throw new TypeError(toString.call(e)+" is not an instance of Date")}},"./node_modules/date-fns/locale/_lib/build_formatting_tokens_reg_exp/index.js":
/*!************************************************************************************!*\
  !*** ./node_modules/date-fns/locale/_lib/build_formatting_tokens_reg_exp/index.js ***!
  \************************************************************************************/
/*! no static exports found */function(e,n){var t=["M","MM","Q","D","DD","DDD","DDDD","d","E","W","WW","YY","YYYY","GG","GGGG","H","HH","h","hh","m","mm","s","ss","S","SS","SSS","Z","ZZ","X","x"];e.exports=function(e){var n=[];for(var o in e)e.hasOwnProperty(o)&&n.push(o);var r=t.concat(n).sort().reverse();return new RegExp("(\\[[^\\[]*\\])|(\\\\)?("+r.join("|")+"|.)","g")}},"./node_modules/date-fns/locale/en/build_distance_in_words_locale/index.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/date-fns/locale/en/build_distance_in_words_locale/index.js ***!
  \*********************************************************************************/
/*! no static exports found */function(e,n){e.exports=function(){var e={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};return{localize:function(n,t,o){var r;return o=o||{},r="string"==typeof e[n]?e[n]:1===t?e[n].one:e[n].other.replace("{{count}}",t),o.addSuffix?o.comparison>0?"in "+r:r+" ago":r}}}},"./node_modules/date-fns/locale/en/build_format_locale/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/date-fns/locale/en/build_format_locale/index.js ***!
  \**********************************************************************/
/*! no static exports found */function(e,n,t){var o=t(/*! ../../_lib/build_formatting_tokens_reg_exp/index.js */"./node_modules/date-fns/locale/_lib/build_formatting_tokens_reg_exp/index.js");e.exports=function(){var e=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],n=["January","February","March","April","May","June","July","August","September","October","November","December"],t=["Su","Mo","Tu","We","Th","Fr","Sa"],r=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],a=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],s=["AM","PM"],u=["am","pm"],d=["a.m.","p.m."],i={MMM:function(n){return e[n.getMonth()]},MMMM:function(e){return n[e.getMonth()]},dd:function(e){return t[e.getDay()]},ddd:function(e){return r[e.getDay()]},dddd:function(e){return a[e.getDay()]},A:function(e){return e.getHours()/12>=1?s[1]:s[0]},a:function(e){return e.getHours()/12>=1?u[1]:u[0]},aa:function(e){return e.getHours()/12>=1?d[1]:d[0]}};return["M","D","DDD","d","Q","W"].forEach(function(e){i[e+"o"]=function(n,t){return function(e){var n=e%100;if(n>20||n<10)switch(n%10){case 1:return e+"st";case 2:return e+"nd";case 3:return e+"rd"}return e+"th"}(t[e](n))}}),{formatters:i,formattingTokensRegExp:o(i)}}},"./node_modules/date-fns/locale/en/index.js":
/*!**************************************************!*\
  !*** ./node_modules/date-fns/locale/en/index.js ***!
  \**************************************************/
/*! no static exports found */function(e,n,t){var o=t(/*! ./build_distance_in_words_locale/index.js */"./node_modules/date-fns/locale/en/build_distance_in_words_locale/index.js"),r=t(/*! ./build_format_locale/index.js */"./node_modules/date-fns/locale/en/build_format_locale/index.js");e.exports={distanceInWords:o(),format:r()}},"./node_modules/date-fns/parse/index.js":
/*!**********************************************!*\
  !*** ./node_modules/date-fns/parse/index.js ***!
  \**********************************************/
/*! no static exports found */function(e,n,t){var o=t(/*! ../is_date/index.js */"./node_modules/date-fns/is_date/index.js"),r=36e5,a=6e4,s=2,u=/[T ]/,d=/:/,i=/^(\d{2})$/,f=[/^([+-]\d{2})$/,/^([+-]\d{3})$/,/^([+-]\d{4})$/],l=/^(\d{4})/,c=[/^([+-]\d{4})/,/^([+-]\d{5})/,/^([+-]\d{6})/],m=/^-(\d{2})$/,_=/^-?(\d{3})$/,g=/^-?(\d{2})-?(\d{2})$/,p=/^-?W(\d{2})$/,w=/^-?W(\d{2})-?(\d{1})$/,h=/^(\d{2}([.,]\d*)?)$/,v=/^(\d{2}):?(\d{2}([.,]\d*)?)$/,x=/^(\d{2}):?(\d{2}):?(\d{2}([.,]\d*)?)$/,D=/([Z+-].*)$/,j=/^(Z)$/,b=/^([+-])(\d{2})$/,y=/^([+-])(\d{2}):?(\d{2})$/;function T(e,n,t){n=n||0,t=t||0;var o=new Date(0);o.setUTCFullYear(e,0,4);var r=7*n+t+1-(o.getUTCDay()||7);return o.setUTCDate(o.getUTCDate()+r),o}e.exports=function(e,n){if(o(e))return new Date(e.getTime());if("string"!=typeof e)return new Date(e);var t=(n||{}).additionalDigits;t=null==t?s:Number(t);var k=function(e){var n,t={},o=e.split(u);if(d.test(o[0])?(t.date=null,n=o[0]):(t.date=o[0],n=o[1]),n){var r=D.exec(n);r?(t.time=n.replace(r[1],""),t.timezone=r[1]):t.time=n}return t}(e),M=function(e,n){var t,o=f[n],r=c[n];if(t=l.exec(e)||r.exec(e)){var a=t[1];return{year:parseInt(a,10),restDateString:e.slice(a.length)}}if(t=i.exec(e)||o.exec(e)){var s=t[1];return{year:100*parseInt(s,10),restDateString:e.slice(s.length)}}return{year:null}}(k.date,t),S=M.year,O=function(e,n){if(null===n)return null;var t,o,r,a;if(0===e.length)return(o=new Date(0)).setUTCFullYear(n),o;if(t=m.exec(e))return o=new Date(0),r=parseInt(t[1],10)-1,o.setUTCFullYear(n,r),o;if(t=_.exec(e)){o=new Date(0);var s=parseInt(t[1],10);return o.setUTCFullYear(n,0,s),o}if(t=g.exec(e)){o=new Date(0),r=parseInt(t[1],10)-1;var u=parseInt(t[2],10);return o.setUTCFullYear(n,r,u),o}if(t=p.exec(e))return a=parseInt(t[1],10)-1,T(n,a);if(t=w.exec(e)){a=parseInt(t[1],10)-1;var d=parseInt(t[2],10)-1;return T(n,a,d)}return null}(M.restDateString,S);if(O){var N,Y=O.getTime(),I=0;return k.time&&(I=function(e){var n,t,o;if(n=h.exec(e))return(t=parseFloat(n[1].replace(",",".")))%24*r;if(n=v.exec(e))return t=parseInt(n[1],10),o=parseFloat(n[2].replace(",",".")),t%24*r+o*a;if(n=x.exec(e)){t=parseInt(n[1],10),o=parseInt(n[2],10);var s=parseFloat(n[3].replace(",","."));return t%24*r+o*a+1e3*s}return null}(k.time)),k.timezone?N=function(e){var n,t;return(n=j.exec(e))?0:(n=b.exec(e))?(t=60*parseInt(n[2],10),"+"===n[1]?-t:t):(n=y.exec(e))?(t=60*parseInt(n[2],10)+parseInt(n[3],10),"+"===n[1]?-t:t):0}(k.timezone):(N=new Date(Y+I).getTimezoneOffset(),N=new Date(Y+I+N*a).getTimezoneOffset()),new Date(Y+I+N*a)}return new Date(e)}},"./node_modules/date-fns/start_of_day/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/date-fns/start_of_day/index.js ***!
  \*****************************************************/
/*! no static exports found */function(e,n,t){var o=t(/*! ../parse/index.js */"./node_modules/date-fns/parse/index.js");e.exports=function(e){var n=o(e);return n.setHours(0,0,0,0),n}},"./node_modules/date-fns/start_of_iso_week/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/date-fns/start_of_iso_week/index.js ***!
  \**********************************************************/
/*! no static exports found */function(e,n,t){var o=t(/*! ../start_of_week/index.js */"./node_modules/date-fns/start_of_week/index.js");e.exports=function(e){return o(e,{weekStartsOn:1})}},"./node_modules/date-fns/start_of_iso_year/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/date-fns/start_of_iso_year/index.js ***!
  \**********************************************************/
/*! no static exports found */function(e,n,t){var o=t(/*! ../get_iso_year/index.js */"./node_modules/date-fns/get_iso_year/index.js"),r=t(/*! ../start_of_iso_week/index.js */"./node_modules/date-fns/start_of_iso_week/index.js");e.exports=function(e){var n=o(e),t=new Date(0);return t.setFullYear(n,0,4),t.setHours(0,0,0,0),r(t)}},"./node_modules/date-fns/start_of_week/index.js":
/*!******************************************************!*\
  !*** ./node_modules/date-fns/start_of_week/index.js ***!
  \******************************************************/
/*! no static exports found */function(e,n,t){var o=t(/*! ../parse/index.js */"./node_modules/date-fns/parse/index.js");e.exports=function(e,n){var t=n&&Number(n.weekStartsOn)||0,r=o(e),a=r.getDay(),s=(a<t?7:0)+a-t;return r.setDate(r.getDate()-s),r.setHours(0,0,0,0),r}},"./node_modules/date-fns/start_of_year/index.js":
/*!******************************************************!*\
  !*** ./node_modules/date-fns/start_of_year/index.js ***!
  \******************************************************/
/*! no static exports found */function(e,n,t){var o=t(/*! ../parse/index.js */"./node_modules/date-fns/parse/index.js");e.exports=function(e){var n=o(e),t=new Date(0);return t.setFullYear(n.getFullYear(),0,1),t.setHours(0,0,0,0),t}},0:
/*!***************************************************************************************************************************************************************!*\
  !*** multi ../common/df.workgroup.Preset.js ../common/df.workgroup.GlobalVars.js ../common/df.workgroup.Util.js ../common/df.workgroup.login.LoadInfoData.js ***!
  \***************************************************************************************************************************************************************/
/*! no static exports found */function(e,n,t){t(/*! ../common/df.workgroup.Preset.js */"../common/df.workgroup.Preset.js"),t(/*! ../common/df.workgroup.GlobalVars.js */"../common/df.workgroup.GlobalVars.js"),t(/*! ../common/df.workgroup.Util.js */"../common/df.workgroup.Util.js"),e.exports=t(/*! ../common/df.workgroup.login.LoadInfoData.js */"../common/df.workgroup.login.LoadInfoData.js")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbi9kZi53b3JrZ3JvdXAuR2xvYmFsVmFycy5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9uL2RmLndvcmtncm91cC5QcmVzZXQuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbi9kZi53b3JrZ3JvdXAuVXRpbC5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9uL2RmLndvcmtncm91cC5sb2dpbi5Mb2FkSW5mb0RhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2RpZmZlcmVuY2VfaW5fY2FsZW5kYXJfZGF5cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZm9ybWF0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9nZXRfZGF5X29mX3llYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2dldF9pc29fd2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZ2V0X2lzb195ZWFyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9pc19kYXRlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9pc192YWxpZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL19saWIvYnVpbGRfZm9ybWF0dGluZ190b2tlbnNfcmVnX2V4cC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL2VuL2J1aWxkX2Rpc3RhbmNlX2luX3dvcmRzX2xvY2FsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL2VuL2J1aWxkX2Zvcm1hdF9sb2NhbGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9lbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvcGFyc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL3N0YXJ0X29mX2RheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvc3RhcnRfb2ZfaXNvX3dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL3N0YXJ0X29mX2lzb195ZWFyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdGFydF9vZl93ZWVrL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdGFydF9vZl95ZWFyL2luZGV4LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwid2luZG93IiwiZGYiLCJ3b3JrZ3JvdXAiLCJHbG9iYWxWYXJzIiwiaXNMb2FkZWQiLCJpbmZvRGF0YSIsInRpbWVfbm93IiwicGFyYW1zIiwibGFiIiwiVXRpbCIsImdldFBhcmFtcyIsIlByZXNldCIsImpzb25fdXJsIiwiZGVmYXVsdCIsImRlZmF1bHRfbG9jYWwiLCJsb2dpbiIsImNoZWNraW4iLCJjaGVja291dCIsImxvZ291dCIsImRvY3VtZW50X3VybCIsImFwcHJvdmFsIiwiYXBwcm92YWxfbXkiLCJhcHByb3ZhbF9jYyIsIm1haW5fdXJsIiwiZXZlbnRUeXBlIiwiT05fTE9BRF9KU09OIiwiT05fTE9HSU4iLCJPTl9DSEVDS0lOIiwiT05fQ0hFQ0tPVVQiLCJPTl9MT0dPVVQiLCJPTl9DSEFOR0VfU1RBR0VfSU5GTyIsIk9OX0VSUk9SIiwiT05fV0FSTklORyIsIk9OX0NMT1NFX01PREFMIiwiY2xhc3NfbmFtZSIsInNob3dJbiIsImhpZGVPdXQiLCJyZWxhdGVkX3NpdGUiLCJ0aXRsZSIsInVybCIsInRodW1iIiwiaXNCZ1Rlc3QiLCJkYXRlX2Zvcm1hdCIsImlzRGF0ZSIsImtvTG9jYWxlIiwibm93X2RhdGUiLCJfZ2V0SXNEYXRlIiwiZGF0ZSIsImxvYWRfanNvbiIsIm1ldGhvZCIsImNhbGxiYWNrIiwiJGRhdGEiLCJEYXRlIiwiY29uc29sZSIsImxvZyIsImRhdGEiLCJKU09OIiwic3RyaW5naWZ5IiwiYWN0aW9uIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwic2V0UmVxdWVzdEhlYWRlciIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsIm9ubG9hZGVuZCIsInJlc3BvbnNlIiwidGFyZ2V0Iiwic3RhdHVzIiwiZ2V0VGltZSIsInBhcnNlIiwicmVzcG9uc2VUZXh0Iiwic2V0VGltZW91dCIsInNlbmQiLCJhZGRaZXJvTnVtYmVyIiwibnVtIiwiYWRkUGFyYW1VbmlxIiwiaW5kZXhPZiIsImdldERhdGVfZm9ybWF0IiwiZm9ybWF0IiwibG9jYWxlIiwiZ2V0SXNEYXRlIiwiQ3VzdG9tRXZlbnQiLCJldmVudCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiZGV0YWlsIiwidW5kZWZpbmVkIiwiZXZ0IiwiZG9jdW1lbnQiLCJjcmVhdGVFdmVudCIsImluaXRDdXN0b21FdmVudCIsIkV2ZW50IiwiTG9hZEluZm9EYXRhIiwiQ0xBU1NfTkFNRSIsInVybF9qc29uIiwib25Mb2FkIiwiYWN0dWFsX0pTT04iLCJpc0xvZ2dlZEluIiwianNvbl9kYXRhIiwidXNlciIsImVsX2h0bWwiLCJxdWVyeVNlbGVjdG9yIiwiaXNEZXNrdG9wIiwiaGFzQ2xhc3MiLCJEZXRlY3RpenIiLCJkZXZpY2UiLCJ0eXBlIiwiaXNBZG1pbkFjY291bnQiLCJkaXNwYXRjaEV2ZW50IiwiX2Rpc3BhdGNoT25Mb2FkIiwib25Mb2FkSnNvbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpbml0IiwibG9jYXRpb24iLCJob3N0bmFtZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJsb2FkSlNPTiIsInN0YXJ0T2ZEYXkiLCJNSUxMSVNFQ09ORFNfSU5fTUlOVVRFIiwiTUlMTElTRUNPTkRTX0lOX0RBWSIsImRpcnR5RGF0ZUxlZnQiLCJkaXJ0eURhdGVSaWdodCIsInN0YXJ0T2ZEYXlMZWZ0Iiwic3RhcnRPZkRheVJpZ2h0IiwidGltZXN0YW1wTGVmdCIsImdldFRpbWV6b25lT2Zmc2V0IiwidGltZXN0YW1wUmlnaHQiLCJNYXRoIiwicm91bmQiLCJnZXREYXlPZlllYXIiLCJnZXRJU09XZWVrIiwiZ2V0SVNPWWVhciIsImlzVmFsaWQiLCJlbkxvY2FsZSIsImZvcm1hdHRlcnMiLCJNIiwiZ2V0TW9udGgiLCJNTSIsImFkZExlYWRpbmdaZXJvcyIsIlEiLCJjZWlsIiwiRCIsImdldERhdGUiLCJERCIsIkRERCIsIkREREQiLCJnZXREYXkiLCJFIiwiVyIsIldXIiwiWVkiLCJnZXRGdWxsWWVhciIsInN1YnN0ciIsIllZWVkiLCJHRyIsIlN0cmluZyIsIkdHR0ciLCJIIiwiZ2V0SG91cnMiLCJISCIsImgiLCJob3VycyIsImhoIiwiZ2V0TWludXRlcyIsIm1tIiwiZ2V0U2Vjb25kcyIsInNzIiwiUyIsImZsb29yIiwiZ2V0TWlsbGlzZWNvbmRzIiwiU1MiLCJTU1MiLCJaIiwiZm9ybWF0VGltZXpvbmUiLCJaWiIsIlgiLCJ4IiwicmVtb3ZlRm9ybWF0dGluZ1Rva2VucyIsImlucHV0IiwibWF0Y2giLCJyZXBsYWNlIiwib2Zmc2V0IiwiZGVsaW1ldGVyIiwic2lnbiIsImFic09mZnNldCIsImFicyIsIm1pbnV0ZXMiLCJudW1iZXIiLCJ0YXJnZXRMZW5ndGgiLCJvdXRwdXQiLCJ0b1N0cmluZyIsImxlbmd0aCIsImRpcnR5RGF0ZSIsImRpcnR5Rm9ybWF0U3RyIiwiZGlydHlPcHRpb25zIiwiZm9ybWF0U3RyIiwibG9jYWxlRm9ybWF0dGVycyIsImZvcm1hdHRpbmdUb2tlbnNSZWdFeHAiLCJmb3JtYXR0ZXIiLCJhcnJheSIsIkZ1bmN0aW9uIiwiYnVpbGRGb3JtYXRGbiIsImZvcm1hdEZuIiwic3RhcnRPZlllYXIiLCJkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMiLCJzdGFydE9mSVNPV2VlayIsInN0YXJ0T2ZJU09ZZWFyIiwiTUlMTElTRUNPTkRTX0lOX1dFRUsiLCJkaWZmIiwieWVhciIsImZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIiLCJzZXRGdWxsWWVhciIsInNldEhvdXJzIiwic3RhcnRPZk5leHRZZWFyIiwiZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhciIsInN0YXJ0T2ZUaGlzWWVhciIsImFyZ3VtZW50IiwiaXNOYU4iLCJUeXBlRXJyb3IiLCJjb21tb25Gb3JtYXR0ZXJLZXlzIiwiZm9ybWF0dGVyS2V5cyIsInB1c2giLCJmb3JtYXR0aW5nVG9rZW5zIiwiY29uY2F0Iiwic29ydCIsInJldmVyc2UiLCJSZWdFeHAiLCJqb2luIiwiZGlzdGFuY2VJbldvcmRzTG9jYWxlIiwibGVzc1RoYW5YU2Vjb25kcyIsIm9uZSIsIm90aGVyIiwieFNlY29uZHMiLCJoYWxmQU1pbnV0ZSIsImxlc3NUaGFuWE1pbnV0ZXMiLCJ4TWludXRlcyIsImFib3V0WEhvdXJzIiwieEhvdXJzIiwieERheXMiLCJhYm91dFhNb250aHMiLCJ4TW9udGhzIiwiYWJvdXRYWWVhcnMiLCJ4WWVhcnMiLCJvdmVyWFllYXJzIiwiYWxtb3N0WFllYXJzIiwibG9jYWxpemUiLCJ0b2tlbiIsImNvdW50Iiwib3B0aW9ucyIsInJlc3VsdCIsImFkZFN1ZmZpeCIsImNvbXBhcmlzb24iLCJidWlsZEZvcm1hdHRpbmdUb2tlbnNSZWdFeHAiLCJtb250aHMzY2hhciIsIm1vbnRoc0Z1bGwiLCJ3ZWVrZGF5czJjaGFyIiwid2Vla2RheXMzY2hhciIsIndlZWtkYXlzRnVsbCIsIm1lcmlkaWVtVXBwZXJjYXNlIiwibWVyaWRpZW1Mb3dlcmNhc2UiLCJtZXJpZGllbUZ1bGwiLCJNTU0iLCJNTU1NIiwiZGQiLCJkZGQiLCJkZGRkIiwiQSIsImEiLCJhYSIsImZvckVhY2giLCJmb3JtYXR0ZXJUb2tlbiIsInJlbTEwMCIsIm9yZGluYWwiLCJidWlsZERpc3RhbmNlSW5Xb3Jkc0xvY2FsZSIsImJ1aWxkRm9ybWF0TG9jYWxlIiwiZGlzdGFuY2VJbldvcmRzIiwiTUlMTElTRUNPTkRTX0lOX0hPVVIiLCJERUZBVUxUX0FERElUSU9OQUxfRElHSVRTIiwicGFyc2VUb2tlbkRhdGVUaW1lRGVsaW1ldGVyIiwicGFyc2VUb2tlblBsYWluVGltZSIsInBhcnNlVG9rZW5ZWSIsInBhcnNlVG9rZW5zWVlZIiwicGFyc2VUb2tlbllZWVkiLCJwYXJzZVRva2Vuc1lZWVlZIiwicGFyc2VUb2tlbk1NIiwicGFyc2VUb2tlbkRERCIsInBhcnNlVG9rZW5NTUREIiwicGFyc2VUb2tlbld3dyIsInBhcnNlVG9rZW5Xd3dEIiwicGFyc2VUb2tlbkhIIiwicGFyc2VUb2tlbkhITU0iLCJwYXJzZVRva2VuSEhNTVNTIiwicGFyc2VUb2tlblRpbWV6b25lIiwicGFyc2VUb2tlblRpbWV6b25lWiIsInBhcnNlVG9rZW5UaW1lem9uZUhIIiwicGFyc2VUb2tlblRpbWV6b25lSEhNTSIsImRheU9mSVNPWWVhciIsImlzb1llYXIiLCJ3ZWVrIiwiZGF5Iiwic2V0VVRDRnVsbFllYXIiLCJnZXRVVENEYXkiLCJzZXRVVENEYXRlIiwiZ2V0VVRDRGF0ZSIsImFkZGl0aW9uYWxEaWdpdHMiLCJOdW1iZXIiLCJkYXRlU3RyaW5ncyIsImRhdGVTdHJpbmciLCJ0aW1lU3RyaW5nIiwic3BsaXQiLCJ0ZXN0IiwiZXhlYyIsInRpbWUiLCJ0aW1lem9uZSIsInNwbGl0RGF0ZVN0cmluZyIsInBhcnNlWWVhclJlc3VsdCIsInBhcnNlVG9rZW5ZWVkiLCJwYXJzZVRva2VuWVlZWVkiLCJ5ZWFyU3RyaW5nIiwicGFyc2VJbnQiLCJyZXN0RGF0ZVN0cmluZyIsInNsaWNlIiwiY2VudHVyeVN0cmluZyIsInBhcnNlWWVhciIsIm1vbnRoIiwiZGF5T2ZZZWFyIiwiZGF5T2ZXZWVrIiwicGFyc2VEYXRlIiwidGltZXN0YW1wIiwicGFyc2VGbG9hdCIsInNlY29uZHMiLCJwYXJzZVRpbWUiLCJ0aW1lem9uZVN0cmluZyIsImFic29sdXRlT2Zmc2V0IiwicGFyc2VUaW1lem9uZSIsInN0YXJ0T2ZXZWVrIiwid2Vla1N0YXJ0c09uIiwiZm91cnRoT2ZKYW51YXJ5Iiwic2V0RGF0ZSIsImNsZWFuRGF0ZSJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEdBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDWixFQUFBa0IsRUFBQSxTQUFBaEIsR0FDQSxvQkFBQWlCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUFiLEVBQUFpQixPQUFBQyxhQUF3REMsTUFBQSxXQUV4RFAsT0FBQUMsZUFBQWIsRUFBQSxjQUFpRG1C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Q0NsQ0EsSUFBQXNCLEVBQUF6RywwQkFBQSwwQ0EwQkFHLEVBQUFELFFBUkEsU0FBQWtPLEdBQ0EsSUFBQW1KLEVBQUE5USxFQUFBMkgsR0FDQWpKLEVBQUEsSUFBQUssS0FBQSxHQUdBLE9BRkFMLEVBQUFvSyxZQUFBZ0ksRUFBQTVMLGNBQUEsS0FDQXhHLEVBQUFxSyxTQUFBLFNBQ0FySyIsImZpbGUiOiJkZi53b3JrZ3JvdXAubG9naW4uY29tbW9uLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsIndpbmRvdy5kZiA9IHdpbmRvdy5kZiB8fCB7fTtcclxud2luZG93LmRmLndvcmtncm91cCA9IHdpbmRvdy5kZi53b3JrZ3JvdXAgfHwge307XHJcblxyXG53aW5kb3cuZGYud29ya2dyb3VwLkdsb2JhbFZhcnMgPSB7XHJcbiAgICBcImlzTG9hZGVkXCI6IGZhbHNlLFxyXG4gICAgXCJpbmZvRGF0YVwiOiBudWxsLFxyXG4gICAgXCJ0aW1lX25vd1wiOiAwLFxyXG4gICAgXCJwYXJhbXNcIjogZGYubGFiLlV0aWwuZ2V0UGFyYW1zKClcclxufTsiLCJ3aW5kb3cuZGYgPSB3aW5kb3cuZGYgfHwge307XHJcbndpbmRvdy5kZi53b3JrZ3JvdXAgPSB3aW5kb3cuZGYud29ya2dyb3VwIHx8IHt9O1xyXG5cclxud2luZG93LmRmLndvcmtncm91cC5QcmVzZXQgPSB7XHJcblxyXG4gICAgXCJqc29uX3VybFwiOiB7XHJcblxyXG4gICAgICAgIFwiZGVmYXVsdFwiOiBcIi9qc29uL2RmX2luZm9fZGF0YS5qc29uLnBocFwiLFxyXG4gICAgICAgIFwiZGVmYXVsdF9sb2NhbFwiOiBcImFzc2V0c19sb2dpbi90ZW1wL2RmX2luZm9fZGF0YS5qc29uXCIsXHJcblxyXG4gICAgICAgIFwibG9naW5cIjogXCJhc3NldHNfbG9naW4vdGVtcC9kZl9pbmZvX2RhdGFfMDFfbG9naW4uanNvblwiLFxyXG4gICAgICAgIFwiY2hlY2tpblwiOiBcImFzc2V0c19sb2dpbi90ZW1wL2RmX2luZm9fZGF0YV8wMl9jaGVja2luLmpzb25cIixcclxuICAgICAgICBcImNoZWNrb3V0XCI6IFwiYXNzZXRzX2xvZ2luL3RlbXAvZGZfaW5mb19kYXRhXzAzX2NoZWNrb3V0Lmpzb25cIixcclxuICAgICAgICBcImxvZ291dFwiOiBcImFzc2V0c19sb2dpbi90ZW1wL2RmX2luZm9fZGF0YV8wNF9sb2dvdXQuanNvblwiXHJcbiAgICB9LFxyXG5cclxuICAgIFwiZG9jdW1lbnRfdXJsXCI6IHtcclxuICAgICAgICBcImFwcHJvdmFsXCI6IFwiYXBwcm92YWwvYXBwcm92YWxfdG9fbGlzdC5waHBcIixcclxuICAgICAgICBcImFwcHJvdmFsX215XCI6IFwiYXBwcm92YWwvYXBwcm92YWxfbXlfbGlzdC5waHBcIixcclxuICAgICAgICBcImFwcHJvdmFsX2NjXCI6IFwiYXBwcm92YWwvYXBwcm92YWxfY2NfbGlzdC5waHBcIlxyXG4gICAgfSxcclxuXHJcbiAgICBcIm1haW5fdXJsXCI6IFwibWFpbi5waHBcIixcclxuXHJcbiAgICBcImV2ZW50VHlwZVwiOiB7XHJcbiAgICAgICAgXCJPTl9MT0FEX0pTT05cIjogXCJvbkxvYWRKc29uXCIsXHJcbiAgICAgICAgXCJPTl9MT0dJTlwiOiBcIm9uTG9naW5cIixcclxuICAgICAgICBcIk9OX0NIRUNLSU5cIjogXCJvbkNoZWNraW5cIixcclxuICAgICAgICBcIk9OX0NIRUNLT1VUXCI6IFwib25DaGVja291dFwiLFxyXG4gICAgICAgIFwiT05fTE9HT1VUXCI6IFwib25Mb2dvdXRcIixcclxuICAgICAgICBcIk9OX0NIQU5HRV9TVEFHRV9JTkZPXCI6IFwib25DaGFuZ2VTdGFnZUluZm9cIixcclxuICAgICAgICBcIk9OX0VSUk9SXCI6IFwib25FcnJvclwiLFxyXG4gICAgICAgIFwiT05fV0FSTklOR1wiOiBcIm9uV2FybmluZ1wiLFxyXG4gICAgICAgIFwiT05fQ0xPU0VfTU9EQUxcIjogXCJvbkNsb3NlTW9kYWxcIlxyXG4gICAgfSxcclxuXHJcbiAgICBcImNsYXNzX25hbWVcIjoge1xyXG4gICAgICAgIFwic2hvd0luXCI6IFwic2hvdy1pblwiLFxyXG4gICAgICAgIFwiaGlkZU91dFwiOiBcImhpZGUtb3V0XCJcclxuICAgIH0sXHJcblxyXG4gICAgXCJyZWxhdGVkX3NpdGVcIjogW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJ0aXRsZVwiOiBcImRlc2lnbmZldmVyLmNvbVwiLFxyXG4gICAgICAgICAgICBcInVybFwiOiBcImh0dHA6Ly9kZXNpZ25mZXZlci5jb20vXCIsXHJcbiAgICAgICAgICAgIFwidGh1bWJcIjogXCJ0aHVtYl9tYWlsLmpwZ18yMDB4MjAwXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkZhY2Vib29rXCIsXHJcbiAgICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL2ZldmVyYm9va1wiLFxyXG4gICAgICAgICAgICBcInRodW1iXCI6IFwidGh1bWJfbWFpbC5qcGdfMjAweDIwMFwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwidGl0bGVcIjogXCJUd2l0dGVyXCIsXHJcbiAgICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly90d2l0dGVyLmNvbS9kZXNpZ25mZXZlcl9rclwiLFxyXG4gICAgICAgICAgICBcInRodW1iXCI6IFwidGh1bWJfbWFpbC5qcGdfMjAweDIwMFwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwidGl0bGVcIjogXCJCbG9nXCIsXHJcbiAgICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9ibG9nLm5hdmVyLmNvbS9kZXNpZ25fZmV2ZXJcIixcclxuICAgICAgICAgICAgXCJ0aHVtYlwiOiBcInRodW1iX21haWwuanBnXzIwMHgyMDBcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcInRpdGxlXCI6IFwiREYgTWFpbFwiLFxyXG4gICAgICAgICAgICBcInVybFwiOiBcImh0dHA6Ly9tYWlsLmRlc2lnbmZldmVyLmNvbS9cIixcclxuICAgICAgICAgICAgXCJ0aHVtYlwiOiBcInRodW1iX21haWwuanBnXzIwMHgyMDBcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcInRpdGxlXCI6IFwiREYgTGFiXCIsXHJcbiAgICAgICAgICAgIFwidXJsXCI6IFwiaHR0cDovL2Rldi5kZXNpZ25mZXZlci5jb20vbGFiL1wiLFxyXG4gICAgICAgICAgICBcInRodW1iXCI6IFwidGh1bWJfbWFpbC5qcGdfMjAweDIwMFwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwidGl0bGVcIjogXCJZb3V0dWJlXCIsXHJcbiAgICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vdXNlci9kZXNpZ25mZXZlcmRhXCIsXHJcbiAgICAgICAgICAgIFwidGh1bWJcIjogXCJ0aHVtYl9tYWlsLmpwZ18yMDB4MjAwXCJcclxuICAgICAgICB9XHJcbiAgICBdLFxyXG4gICAgXCJpc0JnVGVzdFwiOiBmYWxzZVxyXG59OyIsInZhciBkYXRlX2Zvcm1hdCA9IHJlcXVpcmUoICcuLi9idW5kbGVyL25vZGVfbW9kdWxlcy9kYXRlLWZucy9mb3JtYXQnKTtcclxudmFyIGlzRGF0ZSA9IHJlcXVpcmUoJy4uL2J1bmRsZXIvbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2lzX2RhdGUnKTtcclxudmFyIGtvTG9jYWxlID0gcmVxdWlyZSgnLi4vYnVuZGxlci9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL2VuJyk7XHJcblxyXG53aW5kb3cuZGYgPSB3aW5kb3cuZGYgfHwge307XHJcbndpbmRvdy5kZi53b3JrZ3JvdXAgPSB3aW5kb3cuZGYud29ya2dyb3VwIHx8IHt9O1xyXG5cclxud2luZG93LmRmLndvcmtncm91cC5VdGlsID0gKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICB2YXIgbm93X2RhdGU7XHJcblxyXG4gICAgZnVuY3Rpb24gbG9hZF9qc29uKHVybCwgbWV0aG9kLCBjYWxsYmFjaywgJGRhdGEpIHtcclxuXHJcbiAgICAgICAgbm93X2RhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiXFxuLS0tLS0gPDwgU1RBUlQgTE9BRCA+PiB4aHIudXJsIDogXCIsIHVybCwgXCJcXG5cIik7XHJcblxyXG4gICAgICAgIHZhciBkYXRhID0gJGRhdGEgPyBKU09OLnN0cmluZ2lmeSgkZGF0YSkgOiBudWxsO1xyXG5cclxuICAgICAgICB2YXIgcGFyYW1zID0ge1xyXG4gICAgICAgICAgICBtZXRob2Q6IG1ldGhvZCxcclxuICAgICAgICAgICAgYWN0aW9uOiB1cmxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBDb25zdHJ1Y3QgYW4gSFRUUCByZXF1ZXN0XHJcbiAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4gICAgICAgIHhoci5vcGVuKHBhcmFtcy5tZXRob2QsIHBhcmFtcy5hY3Rpb24sIHRydWUpO1xyXG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyk7XHJcbiAgICAgICAgLy94aHIuc2V0UmVxdWVzdEhlYWRlcignQWNjZXB0JywgJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9VVRGLTgnKTtcclxuICAgICAgICAvL3hoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD1VVEYtOCcpO1xyXG5cclxuICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwieGhyLnJlYWR5U3RhdGUgOiBcIiwgeGhyLnJlYWR5U3RhdGUpO1xyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwieGhyLnN0YXR1cyA6IFwiLCB4aHIuc3RhdHVzKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBDYWxsYmFjayBmdW5jdGlvblxyXG4gICAgICAgIHhoci5vbmxvYWRlbmQgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuXHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJ4aHIub25sb2FkZW5kIDogXCIgLCByZXNwb25zZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAocmVzcG9uc2UudGFyZ2V0LnN0YXR1cyA9PT0gMCkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEZhaWxlZCBYbWxIdHRwUmVxdWVzdCBzaG91bGQgYmUgY29uc2lkZXJlZCBhbiB1bmRlZmluZWQgZXJyb3IuXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInhoci5vbmxvYWRlbmQgKEZhaWxlZCkgOiBcIiwgeGhyKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UudGFyZ2V0LnN0YXR1cyA9PT0gNDAwKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQmFkIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwieGhyLm9ubG9hZGVuZCAoQmFkIFJlcXVlc3QpIDogXCIsIHhocik7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UudGFyZ2V0LnN0YXR1cyA9PT0gNDA0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQmFkIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwieGhyLm9ubG9hZGVuZCAoNDA0IE5vdCBGb3VuZCkgOiBcIiwgeGhyKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UudGFyZ2V0LnN0YXR1cyA9PT0gMjAwKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gU3VjY2Vzc1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJcXG4tLS0tLSA8PCBDT01QIExPQUQgPj4gLS0tLS0geGhyLm9ubG9hZGVuZCAoU3VjY2VzcykgZHVyYXRpb24gOiBcIiwgKCgobmV3IERhdGUoKSkuZ2V0VGltZSgpIC0gbm93X2RhdGUuZ2V0VGltZSgpKSAvIDEwMDApICsgXCJzZWNcXG5cXG5cIik7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInhoci5vbmxvYWRlbmQgKFN1Y2Nlc3MpIHJlc3BvbnNlIDogXFxuXCIsIHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwieGhyLm9ubG9hZGVuZCAoU3VjY2VzcykgcmVzcG9uc2VUZXh0KEpTT04pIDogXFxuXCIsIEpTT04ucGFyc2UocmVzcG9uc2UudGFyZ2V0LnJlc3BvbnNlVGV4dCkpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJcXG4tLS0tLSA8PCBDT01QIExPQUQgPj4gLS0tLS1cXG5cXG5cIik7XHJcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwieGhyLm9ubG9hZGVuZCAoU3VjY2VzcykgeGhyIDogXCIgLCB4aHIpO1xyXG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcInhoci5vbmxvYWRlbmQgKFN1Y2Nlc3MpIHJlc3BvbnNlLnRhcmdldC5yZXNwb25zZVRleHQgOiBcIiAsIEpTT04ucGFyc2UocmVzcG9uc2UudGFyZ2V0LnJlc3BvbnNlVGV4dCkpO1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2socmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgfSwgMTApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyBTZW5kIHRoZSBjb2xsZWN0ZWQgZGF0YSBhcyBKU09OXHJcbiAgICAgICAgeGhyLnNlbmQoZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYWRkWmVyb051bWJlcihudW0pIHtcclxuXHJcbiAgICAgICAgdmFyIHN0cl9udW0gPSBcIlwiO1xyXG4gICAgICAgIGlmIChudW0gPCAxMCkgc3RyX251bSA9IFwiMFwiICsgbnVtO1xyXG4gICAgICAgIGVsc2Ugc3RyX251bSA9IFwiXCIgKyBudW07XHJcbiAgICAgICAgcmV0dXJuIHN0cl9udW07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYWRkUGFyYW1VbmlxKHVybCkge1xyXG5cclxuICAgICAgICBpZiAodXJsLmluZGV4T2YoJz8nKSA9PSAtMSkge1xyXG4gICAgICAgICAgICB1cmwgPSB1cmwgKyBcIj91bmlxPVwiICsgbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdXJsID0gdXJsICsgXCImdW5pcT1cIiArIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdXJsO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9nZXREYXRlX2Zvcm1hdChkYXRlLCBmb3JtYXQpe1xyXG5cclxuICAgICAgICAvLyB2YXIgTU1fUyA9IFsnSkFOJywgJ0ZFQicsICdNQVInLCAnQVBSJywgJ01BWScsICdKVU4nLCAnSlVMJywgJ0FVRycsICdTRVAnLCAnT0NUJywgJ05PVicsICdERUMnXTtcclxuICAgICAgICAvLyB2YXIgTU0gPSBbJ0phbnVhcnknLCAnRmVicnVhcnkgJywgJ01hcmNoICcsICdBcHJpbCcsICdNYXknLCAnSnVuZScsICdKdWx5JywgJ0F1Z3VzdCcsICdTZXB0ZW1iZXInLCAnT2N0b2JlcicsICdOb3ZlbWJlcicsICdEZWNlbWJlciddO1xyXG4gICAgICAgIC8vIHZhciBEVyA9IFsnU3VuZGF5JywgJ01vbmRheScsICdUdWVzZGF5JywgJ1dlZG5lc2RheScsICdUaHVyc2RheScsICdGcmlkYXknLCAnU2F0dXJkYXknXTtcclxuXHJcbiAgICAgICAgLy8gaHR0cHM6Ly9kYXRlLWZucy5vcmcvdjEuMjkuMC9kb2NzL2Zvcm1hdFxyXG4gICAgICAgIGlmKF9nZXRJc0RhdGUoZGF0ZSkpIHJldHVybiBkYXRlX2Zvcm1hdChkYXRlLCBmb3JtYXQsXHJcbiAgICAgICAgICAgIHtsb2NhbGU6IGtvTG9jYWxlfSk7XHJcbiAgICAgICAgZWxzZSByZXR1cm4gXCJYWFhYWFhYWFhYWFwiO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9nZXRJc0RhdGUoZGF0ZSl7XHJcbiAgICAgICAgcmV0dXJuIGlzRGF0ZShkYXRlKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGxvYWRfanNvbjogbG9hZF9qc29uLFxyXG4gICAgICAgIGFkZFplcm9OdW1iZXI6IGFkZFplcm9OdW1iZXIsXHJcbiAgICAgICAgYWRkUGFyYW1VbmlxOiBhZGRQYXJhbVVuaXEsXHJcbiAgICAgICAgZ2V0RGF0ZV9mb3JtYXQ6IF9nZXREYXRlX2Zvcm1hdCxcclxuICAgICAgICBnZXRJc0RhdGU6IF9nZXRJc0RhdGVcclxuICAgIH1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICh0eXBlb2Ygd2luZG93LkN1c3RvbUV2ZW50ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBmYWxzZTsgLy9JZiBub3QgSUVcclxuXHJcbiAgICBmdW5jdGlvbiBDdXN0b21FdmVudChldmVudCwgcGFyYW1zKSB7XHJcbiAgICAgICAgcGFyYW1zID0gcGFyYW1zIHx8IHtidWJibGVzOiBmYWxzZSwgY2FuY2VsYWJsZTogZmFsc2UsIGRldGFpbDogdW5kZWZpbmVkfTtcclxuICAgICAgICB2YXIgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7XHJcbiAgICAgICAgZXZ0LmluaXRDdXN0b21FdmVudChldmVudCwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlLCBwYXJhbXMuZGV0YWlsKTtcclxuICAgICAgICByZXR1cm4gZXZ0O1xyXG4gICAgfVxyXG5cclxuICAgIEN1c3RvbUV2ZW50LnByb3RvdHlwZSA9IHdpbmRvdy5FdmVudC5wcm90b3R5cGU7XHJcblxyXG4gICAgd2luZG93LkN1c3RvbUV2ZW50ID0gQ3VzdG9tRXZlbnQ7XHJcbn0pKCk7XHJcblxyXG53aW5kb3cuZGYgPSB3aW5kb3cuZGYgfHwge307XHJcbndpbmRvdy5kZi53b3JrZ3JvdXAgPSB3aW5kb3cuZGYud29ya2dyb3VwIHx8IHt9O1xyXG53aW5kb3cuZGYud29ya2dyb3VwLmxvZ2luID0gd2luZG93LmRmLndvcmtncm91cC5sb2dpbiB8fCB7fTtcclxuXHJcbndpbmRvdy5kZi53b3JrZ3JvdXAubG9naW4uTG9hZEluZm9EYXRhID0gKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICB2YXIgQ0xBU1NfTkFNRSA9IFwiWyBMb2FkSW5mb0RhdGEgXVwiO1xyXG4gICAgdmFyIHVybF9qc29uID0gXCJcIjtcclxuXHJcbiAgICBmdW5jdGlvbiBpbml0KCkge1xyXG5cclxuICAgICAgICB2YXIgX2lzTG9jYWxob3N0ID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSA9PT0gXCJsb2NhbGhvc3RcIiB8fCB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgPT09IFwiMTI3LjAuMC4xXCIpIHtcclxuICAgICAgICAgICAgX2lzTG9jYWxob3N0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdXJsX2pzb24gPSB3aW5kb3cuZGYud29ya2dyb3VwLlByZXNldC5qc29uX3VybC5kZWZhdWx0X2xvY2FsO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIF9pc0xvY2FsaG9zdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB1cmxfanNvbiA9IHdpbmRvdy5kZi53b3JrZ3JvdXAuUHJlc2V0Lmpzb25fdXJsLmRlZmF1bHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL2NvbnNvbGUubG9nKENMQVNTX05BTUUgKyBcIiBfaXNMb2NhbGhvc3QgOiBcIiwgX2lzTG9jYWxob3N0ICsgXCIgLyBqc29uX3VybCA6IFwiLCB1cmxfanNvbik7XHJcbiAgICAgICAgY29uc29sZS5sb2coQ0xBU1NfTkFNRSwgXCIgbG9hZCBkZWZhdWx0IGpzb24gZGF0YVwiKTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHdpbmRvdy5kZi53b3JrZ3JvdXAuUHJlc2V0LmV2ZW50VHlwZS5PTl9MT0FEX0pTT04sIG9uTG9hZEpzb24pO1xyXG4gICAgICAgIGxvYWRKU09OKHVybF9qc29uLCBvbkxvYWQpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGxvYWRKU09OKHVybCwgY2FsbGJhY2spIHtcclxuXHJcbiAgICAgICAgdmFyIHBhcmFtcyA9IHtcclxuICAgICAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxyXG4gICAgICAgICAgICBhY3Rpb246IGRmLndvcmtncm91cC5VdGlsLmFkZFBhcmFtVW5pcSh1cmwpXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZGYud29ya2dyb3VwLlV0aWwubG9hZF9qc29uKHBhcmFtcy5hY3Rpb24sIHBhcmFtcy5tZXRob2QsIGNhbGxiYWNrLCBudWxsKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBvbkxvYWQocmVzcG9uc2UpIHtcclxuICAgICAgICB2YXIgYWN0dWFsX0pTT04gPSBKU09OLnBhcnNlKHJlc3BvbnNlLnRhcmdldC5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgIHdpbmRvdy5kZi53b3JrZ3JvdXAuR2xvYmFsVmFycy5pc0xvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgd2luZG93LmRmLndvcmtncm91cC5HbG9iYWxWYXJzLmluZm9EYXRhID0gYWN0dWFsX0pTT047XHJcblxyXG5cclxuICAgICAgICB2YXIgaXNMb2dnZWRJbiA9IGZhbHNlO1xyXG4gICAgICAgIHZhciBqc29uX2RhdGEgPSB3aW5kb3cuZGYud29ya2dyb3VwLkdsb2JhbFZhcnMuaW5mb0RhdGE7XHJcbiAgICAgICAgaWYgKGpzb25fZGF0YS51c2VyICE9IHVuZGVmaW5lZCAmJlxyXG4gICAgICAgICAgICBqc29uX2RhdGEudXNlci5pc0xvZ2dlZEluICE9IHVuZGVmaW5lZCkge1xyXG5cclxuICAgICAgICAgICAgaWYgKGpzb25fZGF0YS51c2VyLmlzTG9nZ2VkSW4gfHwganNvbl9kYXRhLnVzZXIuaXNMb2dnZWRJbiA9PSBcInRydWVcIikge1xyXG4gICAgICAgICAgICAgICAgaXNMb2dnZWRJbiA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGlmIGlzIGRlc2t0b3BcclxuXHJcbiAgICAgICAgdmFyIGVsX2h0bWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdodG1sJyk7XHJcbiAgICAgICAgdmFyIGlzRGVza3RvcCA9IHdpbmRvdy5kZi5sYWIuVXRpbC5oYXNDbGFzcyhlbF9odG1sLCAnZGVza3RvcCcpO1xyXG5cclxuICAgICAgICBpZiAoaXNMb2dnZWRJbikge1xyXG5cclxuICAgICAgICAgICAgaWYgKGlzRGVza3RvcCAmJiBEZXRlY3RpenIuZGV2aWNlLnR5cGUgPT0gXCJkZXNrdG9wXCIpIHtcclxuICAgICAgICAgICAgICAgIC8vcmVkaXJlY3RUb01haW4oKTtcclxuICAgICAgICAgICAgICAgIC8vcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChqc29uX2RhdGEudXNlci5pc0FkbWluQWNjb3VudCkge1xyXG4gICAgICAgICAgICAgICAgLy9yZWRpcmVjdFRvTWFpbigpO1xyXG4gICAgICAgICAgICAgICAgLy9yZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGVsc2UgLVxyXG5cclxuICAgICAgICBfZGlzcGF0Y2hPbkxvYWQoKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByZWRpcmVjdFRvTWFpbigpIHtcclxuXHJcbiAgICAgICAgdmFyIHVybCA9IFwiXCI7XHJcbiAgICAgICAgdmFyIGpzb25fZGF0YSA9IHdpbmRvdy5kZi53b3JrZ3JvdXAuR2xvYmFsVmFycy5pbmZvRGF0YTtcclxuICAgICAgICBpZiAoanNvbl9kYXRhLnByZXNldCAhPSB1bmRlZmluZWQgJiZcclxuICAgICAgICAgICAganNvbl9kYXRhLnByZXNldC5tYWluX3VybCAhPSB1bmRlZmluZWQpIHtcclxuXHJcbiAgICAgICAgICAgIHVybCA9IGpzb25fZGF0YS5wcmVzZXQubWFpbl91cmw7XHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coQ0xBU1NfTkFNRSArIFwiIGdvIHRvIG1haW4gdXJsIChnZXQgc2VydmVyKSA6IFwiLCB1cmwpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHVybCA9IHdpbmRvdy5kZi53b3JrZ3JvdXAuUHJlc2V0Lm1haW5fdXJsO1xyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKENMQVNTX05BTUUgKyBcIiBnbyB0byBtYWluIHVybCAoZ2V0IGxvY2FsKSA6IFwiLCB1cmwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLmxvZyhDTEFTU19OQU1FICsgXCIgZ28gdG8gbWFpbiB1cmwgOiBcIiwgdXJsKTtcclxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHVybDtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX2Rpc3BhdGNoT25Mb2FkKCkge1xyXG4gICAgICAgIHZhciBldmVudCA9IG5ldyBDdXN0b21FdmVudCh3aW5kb3cuZGYud29ya2dyb3VwLlByZXNldC5ldmVudFR5cGUuT05fTE9BRF9KU09OKTtcclxuICAgICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBvbkxvYWRKc29uKCkge1xyXG4gICAgICAgIC8vY29uc29sZS5sb2coQ0xBU1NfTkFNRSArIFwiIG9uTG9hZEpzb24gLSBcIiAsIHdpbmRvdy5kZi53b3JrZ3JvdXAuR2xvYmFsVmFycy5pbmZvRGF0YSk7XHJcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih3aW5kb3cuZGYud29ya2dyb3VwLlByZXNldC5ldmVudFR5cGUuT05fTE9BRF9KU09OLCBvbkxvYWRKc29uKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGluaXQ6IGluaXRcclxuICAgIH1cclxufSkoKTtcclxuXHJcblxyXG53aW5kb3cuZGYud29ya2dyb3VwLmxvZ2luLkxvYWRJbmZvRGF0YS5pbml0KCk7XHJcbiIsInZhciBzdGFydE9mRGF5ID0gcmVxdWlyZSgnLi4vc3RhcnRfb2ZfZGF5L2luZGV4LmpzJylcblxudmFyIE1JTExJU0VDT05EU19JTl9NSU5VVEUgPSA2MDAwMFxudmFyIE1JTExJU0VDT05EU19JTl9EQVkgPSA4NjQwMDAwMFxuXG4vKipcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSBudW1iZXIgb2YgY2FsZW5kYXIgZGF5cyBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlcy5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgbnVtYmVyIG9mIGNhbGVuZGFyIGRheXMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogQHBhcmFtIHtEYXRlfFN0cmluZ3xOdW1iZXJ9IGRhdGVMZWZ0IC0gdGhlIGxhdGVyIGRhdGVcbiAqIEBwYXJhbSB7RGF0ZXxTdHJpbmd8TnVtYmVyfSBkYXRlUmlnaHQgLSB0aGUgZWFybGllciBkYXRlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgbnVtYmVyIG9mIGNhbGVuZGFyIGRheXNcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSG93IG1hbnkgY2FsZW5kYXIgZGF5cyBhcmUgYmV0d2VlblxuICogLy8gMiBKdWx5IDIwMTEgMjM6MDA6MDAgYW5kIDIgSnVseSAyMDEyIDAwOjAwOjAwP1xuICogdmFyIHJlc3VsdCA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhcbiAqICAgbmV3IERhdGUoMjAxMiwgNiwgMiwgMCwgMCksXG4gKiAgIG5ldyBEYXRlKDIwMTEsIDYsIDIsIDIzLCAwKVxuICogKVxuICogLy89PiAzNjZcbiAqL1xuZnVuY3Rpb24gZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzIChkaXJ0eURhdGVMZWZ0LCBkaXJ0eURhdGVSaWdodCkge1xuICB2YXIgc3RhcnRPZkRheUxlZnQgPSBzdGFydE9mRGF5KGRpcnR5RGF0ZUxlZnQpXG4gIHZhciBzdGFydE9mRGF5UmlnaHQgPSBzdGFydE9mRGF5KGRpcnR5RGF0ZVJpZ2h0KVxuXG4gIHZhciB0aW1lc3RhbXBMZWZ0ID0gc3RhcnRPZkRheUxlZnQuZ2V0VGltZSgpIC1cbiAgICBzdGFydE9mRGF5TGVmdC5nZXRUaW1lem9uZU9mZnNldCgpICogTUlMTElTRUNPTkRTX0lOX01JTlVURVxuICB2YXIgdGltZXN0YW1wUmlnaHQgPSBzdGFydE9mRGF5UmlnaHQuZ2V0VGltZSgpIC1cbiAgICBzdGFydE9mRGF5UmlnaHQuZ2V0VGltZXpvbmVPZmZzZXQoKSAqIE1JTExJU0VDT05EU19JTl9NSU5VVEVcblxuICAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgZGF5IGlzIG5vdCBjb25zdGFudFxuICAvLyAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgZGF5IG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcbiAgcmV0dXJuIE1hdGgucm91bmQoKHRpbWVzdGFtcExlZnQgLSB0aW1lc3RhbXBSaWdodCkgLyBNSUxMSVNFQ09ORFNfSU5fREFZKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5c1xuIiwidmFyIGdldERheU9mWWVhciA9IHJlcXVpcmUoJy4uL2dldF9kYXlfb2ZfeWVhci9pbmRleC5qcycpXG52YXIgZ2V0SVNPV2VlayA9IHJlcXVpcmUoJy4uL2dldF9pc29fd2Vlay9pbmRleC5qcycpXG52YXIgZ2V0SVNPWWVhciA9IHJlcXVpcmUoJy4uL2dldF9pc29feWVhci9pbmRleC5qcycpXG52YXIgcGFyc2UgPSByZXF1aXJlKCcuLi9wYXJzZS9pbmRleC5qcycpXG52YXIgaXNWYWxpZCA9IHJlcXVpcmUoJy4uL2lzX3ZhbGlkL2luZGV4LmpzJylcbnZhciBlbkxvY2FsZSA9IHJlcXVpcmUoJy4uL2xvY2FsZS9lbi9pbmRleC5qcycpXG5cbi8qKlxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBGb3JtYXQgdGhlIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZyBpbiB0aGUgZ2l2ZW4gZm9ybWF0LlxuICpcbiAqIEFjY2VwdGVkIHRva2VuczpcbiAqIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgfCBUb2tlbiB8IFJlc3VsdCBleGFtcGxlcyAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgTW9udGggICAgICAgICAgICAgICAgICAgfCBNICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgfCBNbyAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTSAgICB8IDAxLCAwMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU0gICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU1NICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyIHxcbiAqIHwgUXVhcnRlciAgICAgICAgICAgICAgICAgfCBRICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgfCBRbyAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgIHxcbiAqIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgfCBEICAgICB8IDEsIDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgfCBEbyAgICB8IDFzdCwgMm5kLCAuLi4sIDMxc3QgICAgICAgICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgfCBERCAgICB8IDAxLCAwMiwgLi4uLCAzMSAgICAgICAgICAgICAgICAgIHxcbiAqIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgfCBEREQgICB8IDEsIDIsIC4uLiwgMzY2ICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgfCBERERvICB8IDFzdCwgMm5kLCAuLi4sIDM2NnRoICAgICAgICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgfCBEREREICB8IDAwMSwgMDAyLCAuLi4sIDM2NiAgICAgICAgICAgICAgIHxcbiAqIHwgRGF5IG9mIHdlZWsgICAgICAgICAgICAgfCBkICAgICB8IDAsIDEsIC4uLiwgNiAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgfCBkbyAgICB8IDB0aCwgMXN0LCAuLi4sIDZ0aCAgICAgICAgICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgfCBkZCAgICB8IFN1LCBNbywgLi4uLCBTYSAgICAgICAgICAgICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgfCBkZGQgICB8IFN1biwgTW9uLCAuLi4sIFNhdCAgICAgICAgICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgfCBkZGRkICB8IFN1bmRheSwgTW9uZGF5LCAuLi4sIFNhdHVyZGF5ICAgIHxcbiAqIHwgRGF5IG9mIElTTyB3ZWVrICAgICAgICAgfCBFICAgICB8IDEsIDIsIC4uLiwgNyAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgSVNPIHdlZWsgICAgICAgICAgICAgICAgfCBXICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgfCBXbyAgICB8IDFzdCwgMm5kLCAuLi4sIDUzcmQgICAgICAgICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgfCBXVyAgICB8IDAxLCAwMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgIHxcbiAqIHwgWWVhciAgICAgICAgICAgICAgICAgICAgfCBZWSAgICB8IDAwLCAwMSwgLi4uLCA5OSAgICAgICAgICAgICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVlZICB8IDE5MDAsIDE5MDEsIC4uLiwgMjA5OSAgICAgICAgICAgIHxcbiAqIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgfCBHRyAgICB8IDAwLCAwMSwgLi4uLCA5OSAgICAgICAgICAgICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgfCBHR0dHICB8IDE5MDAsIDE5MDEsIC4uLiwgMjA5OSAgICAgICAgICAgIHxcbiAqIHwgQU0vUE0gICAgICAgICAgICAgICAgICAgfCBBICAgICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgfCBhICAgICB8IGFtLCBwbSAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYSAgICB8IGEubS4sIHAubS4gICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgSG91ciAgICAgICAgICAgICAgICAgICAgfCBIICAgICB8IDAsIDEsIC4uLiAyMyAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgfCBISCAgICB8IDAwLCAwMSwgLi4uIDIzICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgfCBoICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgfCBoaCAgICB8IDAxLCAwMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgIHxcbiAqIHwgTWludXRlICAgICAgICAgICAgICAgICAgfCBtICAgICB8IDAsIDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgfCBtbSAgICB8IDAwLCAwMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgIHxcbiAqIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgfCBzICAgICB8IDAsIDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgfCBzcyAgICB8IDAwLCAwMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgIHxcbiAqIHwgMS8xMCBvZiBzZWNvbmQgICAgICAgICAgfCBTICAgICB8IDAsIDEsIC4uLiwgOSAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgMS8xMDAgb2Ygc2Vjb25kICAgICAgICAgfCBTUyAgICB8IDAwLCAwMSwgLi4uLCA5OSAgICAgICAgICAgICAgICAgIHxcbiAqIHwgTWlsbGlzZWNvbmQgICAgICAgICAgICAgfCBTU1MgICB8IDAwMCwgMDAxLCAuLi4sIDk5OSAgICAgICAgICAgICAgIHxcbiAqIHwgVGltZXpvbmUgICAgICAgICAgICAgICAgfCBaICAgICB8IC0wMTowMCwgKzAwOjAwLCAuLi4gKzEyOjAwICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgfCBaWiAgICB8IC0wMTAwLCArMDAwMCwgLi4uLCArMTIwMCAgICAgICAgIHxcbiAqIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgfCBYICAgICB8IDUxMjk2OTUyMCAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgfCB4ICAgICB8IDUxMjk2OTUyMDkwMCAgICAgICAgICAgICAgICAgICAgIHxcbiAqXG4gKiBUaGUgY2hhcmFjdGVycyB3cmFwcGVkIGluIHNxdWFyZSBicmFja2V0cyBhcmUgZXNjYXBlZC5cbiAqXG4gKiBUaGUgcmVzdWx0IG1heSB2YXJ5IGJ5IGxvY2FsZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8U3RyaW5nfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gW2Zvcm1hdD0nWVlZWS1NTS1ERFRISDptbTpzcy5TU1NaJ10gLSB0aGUgc3RyaW5nIG9mIHRva2Vuc1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIHRoZSBvYmplY3Qgd2l0aCBvcHRpb25zXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMubG9jYWxlPWVuTG9jYWxlXSAtIHRoZSBsb2NhbGUgb2JqZWN0XG4gKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCAxMSBGZWJydWFyeSAyMDE0IGluIG1pZGRsZS1lbmRpYW4gZm9ybWF0OlxuICogdmFyIHJlc3VsdCA9IGZvcm1hdChcbiAqICAgbmV3IERhdGUoMjAxNCwgMSwgMTEpLFxuICogICAnTU0vREQvWVlZWSdcbiAqIClcbiAqIC8vPT4gJzAyLzExLzIwMTQnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCAyIEp1bHkgMjAxNCBpbiBFc3BlcmFudG86XG4gKiB2YXIgZW9Mb2NhbGUgPSByZXF1aXJlKCdkYXRlLWZucy9sb2NhbGUvZW8nKVxuICogdmFyIHJlc3VsdCA9IGZvcm1hdChcbiAqICAgbmV3IERhdGUoMjAxNCwgNiwgMiksXG4gKiAgICdEbyBbZGVdIE1NTU0gWVlZWScsXG4gKiAgIHtsb2NhbGU6IGVvTG9jYWxlfVxuICogKVxuICogLy89PiAnMi1hIGRlIGp1bGlvIDIwMTQnXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdCAoZGlydHlEYXRlLCBkaXJ0eUZvcm1hdFN0ciwgZGlydHlPcHRpb25zKSB7XG4gIHZhciBmb3JtYXRTdHIgPSBkaXJ0eUZvcm1hdFN0ciA/IFN0cmluZyhkaXJ0eUZvcm1hdFN0cikgOiAnWVlZWS1NTS1ERFRISDptbTpzcy5TU1NaJ1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fVxuXG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZVxuICB2YXIgbG9jYWxlRm9ybWF0dGVycyA9IGVuTG9jYWxlLmZvcm1hdC5mb3JtYXR0ZXJzXG4gIHZhciBmb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gZW5Mb2NhbGUuZm9ybWF0LmZvcm1hdHRpbmdUb2tlbnNSZWdFeHBcbiAgaWYgKGxvY2FsZSAmJiBsb2NhbGUuZm9ybWF0ICYmIGxvY2FsZS5mb3JtYXQuZm9ybWF0dGVycykge1xuICAgIGxvY2FsZUZvcm1hdHRlcnMgPSBsb2NhbGUuZm9ybWF0LmZvcm1hdHRlcnNcblxuICAgIGlmIChsb2NhbGUuZm9ybWF0LmZvcm1hdHRpbmdUb2tlbnNSZWdFeHApIHtcbiAgICAgIGZvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPSBsb2NhbGUuZm9ybWF0LmZvcm1hdHRpbmdUb2tlbnNSZWdFeHBcbiAgICB9XG4gIH1cblxuICB2YXIgZGF0ZSA9IHBhcnNlKGRpcnR5RGF0ZSlcblxuICBpZiAoIWlzVmFsaWQoZGF0ZSkpIHtcbiAgICByZXR1cm4gJ0ludmFsaWQgRGF0ZSdcbiAgfVxuXG4gIHZhciBmb3JtYXRGbiA9IGJ1aWxkRm9ybWF0Rm4oZm9ybWF0U3RyLCBsb2NhbGVGb3JtYXR0ZXJzLCBmb3JtYXR0aW5nVG9rZW5zUmVnRXhwKVxuXG4gIHJldHVybiBmb3JtYXRGbihkYXRlKVxufVxuXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gTW9udGg6IDEsIDIsIC4uLiwgMTJcbiAgJ00nOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLmdldE1vbnRoKCkgKyAxXG4gIH0sXG5cbiAgLy8gTW9udGg6IDAxLCAwMiwgLi4uLCAxMlxuICAnTU0nOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRNb250aCgpICsgMSwgMilcbiAgfSxcblxuICAvLyBRdWFydGVyOiAxLCAyLCAzLCA0XG4gICdRJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gTWF0aC5jZWlsKChkYXRlLmdldE1vbnRoKCkgKyAxKSAvIDMpXG4gIH0sXG5cbiAgLy8gRGF5IG9mIG1vbnRoOiAxLCAyLCAuLi4sIDMxXG4gICdEJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXREYXRlKClcbiAgfSxcblxuICAvLyBEYXkgb2YgbW9udGg6IDAxLCAwMiwgLi4uLCAzMVxuICAnREQnOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXREYXRlKCksIDIpXG4gIH0sXG5cbiAgLy8gRGF5IG9mIHllYXI6IDEsIDIsIC4uLiwgMzY2XG4gICdEREQnOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHJldHVybiBnZXREYXlPZlllYXIoZGF0ZSlcbiAgfSxcblxuICAvLyBEYXkgb2YgeWVhcjogMDAxLCAwMDIsIC4uLiwgMzY2XG4gICdEREREJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGdldERheU9mWWVhcihkYXRlKSwgMylcbiAgfSxcblxuICAvLyBEYXkgb2Ygd2VlazogMCwgMSwgLi4uLCA2XG4gICdkJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXREYXkoKVxuICB9LFxuXG4gIC8vIERheSBvZiBJU08gd2VlazogMSwgMiwgLi4uLCA3XG4gICdFJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXREYXkoKSB8fCA3XG4gIH0sXG5cbiAgLy8gSVNPIHdlZWs6IDEsIDIsIC4uLiwgNTNcbiAgJ1cnOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHJldHVybiBnZXRJU09XZWVrKGRhdGUpXG4gIH0sXG5cbiAgLy8gSVNPIHdlZWs6IDAxLCAwMiwgLi4uLCA1M1xuICAnV1cnOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZ2V0SVNPV2VlayhkYXRlKSwgMilcbiAgfSxcblxuICAvLyBZZWFyOiAwMCwgMDEsIC4uLiwgOTlcbiAgJ1lZJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0RnVsbFllYXIoKSwgNCkuc3Vic3RyKDIpXG4gIH0sXG5cbiAgLy8gWWVhcjogMTkwMCwgMTkwMSwgLi4uLCAyMDk5XG4gICdZWVlZJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0RnVsbFllYXIoKSwgNClcbiAgfSxcblxuICAvLyBJU08gd2Vlay1udW1iZXJpbmcgeWVhcjogMDAsIDAxLCAuLi4sIDk5XG4gICdHRyc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIFN0cmluZyhnZXRJU09ZZWFyKGRhdGUpKS5zdWJzdHIoMilcbiAgfSxcblxuICAvLyBJU08gd2Vlay1udW1iZXJpbmcgeWVhcjogMTkwMCwgMTkwMSwgLi4uLCAyMDk5XG4gICdHR0dHJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gZ2V0SVNPWWVhcihkYXRlKVxuICB9LFxuXG4gIC8vIEhvdXI6IDAsIDEsIC4uLiAyM1xuICAnSCc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0SG91cnMoKVxuICB9LFxuXG4gIC8vIEhvdXI6IDAwLCAwMSwgLi4uLCAyM1xuICAnSEgnOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRIb3VycygpLCAyKVxuICB9LFxuXG4gIC8vIEhvdXI6IDEsIDIsIC4uLiwgMTJcbiAgJ2gnOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0SG91cnMoKVxuICAgIGlmIChob3VycyA9PT0gMCkge1xuICAgICAgcmV0dXJuIDEyXG4gICAgfSBlbHNlIGlmIChob3VycyA+IDEyKSB7XG4gICAgICByZXR1cm4gaG91cnMgJSAxMlxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaG91cnNcbiAgICB9XG4gIH0sXG5cbiAgLy8gSG91cjogMDEsIDAyLCAuLi4sIDEyXG4gICdoaCc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhmb3JtYXR0ZXJzWydoJ10oZGF0ZSksIDIpXG4gIH0sXG5cbiAgLy8gTWludXRlOiAwLCAxLCAuLi4sIDU5XG4gICdtJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRNaW51dGVzKClcbiAgfSxcblxuICAvLyBNaW51dGU6IDAwLCAwMSwgLi4uLCA1OVxuICAnbW0nOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRNaW51dGVzKCksIDIpXG4gIH0sXG5cbiAgLy8gU2Vjb25kOiAwLCAxLCAuLi4sIDU5XG4gICdzJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRTZWNvbmRzKClcbiAgfSxcblxuICAvLyBTZWNvbmQ6IDAwLCAwMSwgLi4uLCA1OVxuICAnc3MnOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRTZWNvbmRzKCksIDIpXG4gIH0sXG5cbiAgLy8gMS8xMCBvZiBzZWNvbmQ6IDAsIDEsIC4uLiwgOVxuICAnUyc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSAvIDEwMClcbiAgfSxcblxuICAvLyAxLzEwMCBvZiBzZWNvbmQ6IDAwLCAwMSwgLi4uLCA5OVxuICAnU1MnOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoTWF0aC5mbG9vcihkYXRlLmdldE1pbGxpc2Vjb25kcygpIC8gMTApLCAyKVxuICB9LFxuXG4gIC8vIE1pbGxpc2Vjb25kOiAwMDAsIDAwMSwgLi4uLCA5OTlcbiAgJ1NTUyc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldE1pbGxpc2Vjb25kcygpLCAzKVxuICB9LFxuXG4gIC8vIFRpbWV6b25lOiAtMDE6MDAsICswMDowMCwgLi4uICsxMjowMFxuICAnWic6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKSwgJzonKVxuICB9LFxuXG4gIC8vIFRpbWV6b25lOiAtMDEwMCwgKzAwMDAsIC4uLiArMTIwMFxuICAnWlonOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHJldHVybiBmb3JtYXRUaW1lem9uZShkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCkpXG4gIH0sXG5cbiAgLy8gU2Vjb25kcyB0aW1lc3RhbXA6IDUxMjk2OTUyMFxuICAnWCc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoZGF0ZS5nZXRUaW1lKCkgLyAxMDAwKVxuICB9LFxuXG4gIC8vIE1pbGxpc2Vjb25kcyB0aW1lc3RhbXA6IDUxMjk2OTUyMDkwMFxuICAneCc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0VGltZSgpXG4gIH1cbn1cblxuZnVuY3Rpb24gYnVpbGRGb3JtYXRGbiAoZm9ybWF0U3RyLCBsb2NhbGVGb3JtYXR0ZXJzLCBmb3JtYXR0aW5nVG9rZW5zUmVnRXhwKSB7XG4gIHZhciBhcnJheSA9IGZvcm1hdFN0ci5tYXRjaChmb3JtYXR0aW5nVG9rZW5zUmVnRXhwKVxuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoXG5cbiAgdmFyIGlcbiAgdmFyIGZvcm1hdHRlclxuICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBmb3JtYXR0ZXIgPSBsb2NhbGVGb3JtYXR0ZXJzW2FycmF5W2ldXSB8fCBmb3JtYXR0ZXJzW2FycmF5W2ldXVxuICAgIGlmIChmb3JtYXR0ZXIpIHtcbiAgICAgIGFycmF5W2ldID0gZm9ybWF0dGVyXG4gICAgfSBlbHNlIHtcbiAgICAgIGFycmF5W2ldID0gcmVtb3ZlRm9ybWF0dGluZ1Rva2VucyhhcnJheVtpXSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGRhdGUpIHtcbiAgICB2YXIgb3V0cHV0ID0gJydcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoYXJyYXlbaV0gaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuICAgICAgICBvdXRwdXQgKz0gYXJyYXlbaV0oZGF0ZSwgZm9ybWF0dGVycylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dHB1dCArPSBhcnJheVtpXVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlRm9ybWF0dGluZ1Rva2VucyAoaW5wdXQpIHtcbiAgaWYgKGlucHV0Lm1hdGNoKC9cXFtbXFxzXFxTXS8pKSB7XG4gICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL15cXFt8XSQvZywgJycpXG4gIH1cbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL1xcXFwvZywgJycpXG59XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lIChvZmZzZXQsIGRlbGltZXRlcikge1xuICBkZWxpbWV0ZXIgPSBkZWxpbWV0ZXIgfHwgJydcbiAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnXG4gIHZhciBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpXG4gIHZhciBob3VycyA9IE1hdGguZmxvb3IoYWJzT2Zmc2V0IC8gNjApXG4gIHZhciBtaW51dGVzID0gYWJzT2Zmc2V0ICUgNjBcbiAgcmV0dXJuIHNpZ24gKyBhZGRMZWFkaW5nWmVyb3MoaG91cnMsIDIpICsgZGVsaW1ldGVyICsgYWRkTGVhZGluZ1plcm9zKG1pbnV0ZXMsIDIpXG59XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdaZXJvcyAobnVtYmVyLCB0YXJnZXRMZW5ndGgpIHtcbiAgdmFyIG91dHB1dCA9IE1hdGguYWJzKG51bWJlcikudG9TdHJpbmcoKVxuICB3aGlsZSAob3V0cHV0Lmxlbmd0aCA8IHRhcmdldExlbmd0aCkge1xuICAgIG91dHB1dCA9ICcwJyArIG91dHB1dFxuICB9XG4gIHJldHVybiBvdXRwdXRcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmb3JtYXRcbiIsInZhciBwYXJzZSA9IHJlcXVpcmUoJy4uL3BhcnNlL2luZGV4LmpzJylcbnZhciBzdGFydE9mWWVhciA9IHJlcXVpcmUoJy4uL3N0YXJ0X29mX3llYXIvaW5kZXguanMnKVxudmFyIGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyA9IHJlcXVpcmUoJy4uL2RpZmZlcmVuY2VfaW5fY2FsZW5kYXJfZGF5cy9pbmRleC5qcycpXG5cbi8qKlxuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIGRheSBvZiB0aGUgeWVhciBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgZGF5IG9mIHRoZSB5ZWFyIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxTdHJpbmd8TnVtYmVyfSBkYXRlIC0gdGhlIGdpdmVuIGRhdGVcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHRoZSBkYXkgb2YgeWVhclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGljaCBkYXkgb2YgdGhlIHllYXIgaXMgMiBKdWx5IDIwMTQ/XG4gKiB2YXIgcmVzdWx0ID0gZ2V0RGF5T2ZZZWFyKG5ldyBEYXRlKDIwMTQsIDYsIDIpKVxuICogLy89PiAxODNcbiAqL1xuZnVuY3Rpb24gZ2V0RGF5T2ZZZWFyIChkaXJ0eURhdGUpIHtcbiAgdmFyIGRhdGUgPSBwYXJzZShkaXJ0eURhdGUpXG4gIHZhciBkaWZmID0gZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzKGRhdGUsIHN0YXJ0T2ZZZWFyKGRhdGUpKVxuICB2YXIgZGF5T2ZZZWFyID0gZGlmZiArIDFcbiAgcmV0dXJuIGRheU9mWWVhclxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldERheU9mWWVhclxuIiwidmFyIHBhcnNlID0gcmVxdWlyZSgnLi4vcGFyc2UvaW5kZXguanMnKVxudmFyIHN0YXJ0T2ZJU09XZWVrID0gcmVxdWlyZSgnLi4vc3RhcnRfb2ZfaXNvX3dlZWsvaW5kZXguanMnKVxudmFyIHN0YXJ0T2ZJU09ZZWFyID0gcmVxdWlyZSgnLi4vc3RhcnRfb2ZfaXNvX3llYXIvaW5kZXguanMnKVxuXG52YXIgTUlMTElTRUNPTkRTX0lOX1dFRUsgPSA2MDQ4MDAwMDBcblxuLyoqXG4gKiBAY2F0ZWdvcnkgSVNPIFdlZWsgSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSBJU08gd2VlayBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgSVNPIHdlZWsgb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogSVNPIHdlZWstbnVtYmVyaW5nIHllYXI6IGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZVxuICpcbiAqIEBwYXJhbSB7RGF0ZXxTdHJpbmd8TnVtYmVyfSBkYXRlIC0gdGhlIGdpdmVuIGRhdGVcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHRoZSBJU08gd2Vla1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGljaCB3ZWVrIG9mIHRoZSBJU08td2VlayBudW1iZXJpbmcgeWVhciBpcyAyIEphbnVhcnkgMjAwNT9cbiAqIHZhciByZXN1bHQgPSBnZXRJU09XZWVrKG5ldyBEYXRlKDIwMDUsIDAsIDIpKVxuICogLy89PiA1M1xuICovXG5mdW5jdGlvbiBnZXRJU09XZWVrIChkaXJ0eURhdGUpIHtcbiAgdmFyIGRhdGUgPSBwYXJzZShkaXJ0eURhdGUpXG4gIHZhciBkaWZmID0gc3RhcnRPZklTT1dlZWsoZGF0ZSkuZ2V0VGltZSgpIC0gc3RhcnRPZklTT1llYXIoZGF0ZSkuZ2V0VGltZSgpXG5cbiAgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvIE1JTExJU0VDT05EU19JTl9XRUVLKSArIDFcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRJU09XZWVrXG4iLCJ2YXIgcGFyc2UgPSByZXF1aXJlKCcuLi9wYXJzZS9pbmRleC5qcycpXG52YXIgc3RhcnRPZklTT1dlZWsgPSByZXF1aXJlKCcuLi9zdGFydF9vZl9pc29fd2Vlay9pbmRleC5qcycpXG5cbi8qKlxuICogQGNhdGVnb3J5IElTTyBXZWVrLU51bWJlcmluZyBZZWFyIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyIG9mIHRoZSBnaXZlbiBkYXRlLFxuICogd2hpY2ggYWx3YXlzIHN0YXJ0cyAzIGRheXMgYmVmb3JlIHRoZSB5ZWFyJ3MgZmlyc3QgVGh1cnNkYXkuXG4gKlxuICogSVNPIHdlZWstbnVtYmVyaW5nIHllYXI6IGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZVxuICpcbiAqIEBwYXJhbSB7RGF0ZXxTdHJpbmd8TnVtYmVyfSBkYXRlIC0gdGhlIGdpdmVuIGRhdGVcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHRoZSBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGljaCBJU08td2VlayBudW1iZXJpbmcgeWVhciBpcyAyIEphbnVhcnkgMjAwNT9cbiAqIHZhciByZXN1bHQgPSBnZXRJU09ZZWFyKG5ldyBEYXRlKDIwMDUsIDAsIDIpKVxuICogLy89PiAyMDA0XG4gKi9cbmZ1bmN0aW9uIGdldElTT1llYXIgKGRpcnR5RGF0ZSkge1xuICB2YXIgZGF0ZSA9IHBhcnNlKGRpcnR5RGF0ZSlcbiAgdmFyIHllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKClcblxuICB2YXIgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhciA9IG5ldyBEYXRlKDApXG4gIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIuc2V0RnVsbFllYXIoeWVhciArIDEsIDAsIDQpXG4gIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIuc2V0SG91cnMoMCwgMCwgMCwgMClcbiAgdmFyIHN0YXJ0T2ZOZXh0WWVhciA9IHN0YXJ0T2ZJU09XZWVrKGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIpXG5cbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIgPSBuZXcgRGF0ZSgwKVxuICBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyLnNldEZ1bGxZZWFyKHllYXIsIDAsIDQpXG4gIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIuc2V0SG91cnMoMCwgMCwgMCwgMClcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9IHN0YXJ0T2ZJU09XZWVrKGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIpXG5cbiAgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZOZXh0WWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhciArIDFcbiAgfSBlbHNlIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mVGhpc1llYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXJcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDFcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldElTT1llYXJcbiIsIi8qKlxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gYXJndW1lbnQgYW4gaW5zdGFuY2Ugb2YgRGF0ZT9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIElzIHRoZSBnaXZlbiBhcmd1bWVudCBhbiBpbnN0YW5jZSBvZiBEYXRlP1xuICpcbiAqIEBwYXJhbSB7Kn0gYXJndW1lbnQgLSB0aGUgYXJndW1lbnQgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZ2l2ZW4gYXJndW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJcyAnbWF5b25uYWlzZScgYSBEYXRlP1xuICogdmFyIHJlc3VsdCA9IGlzRGF0ZSgnbWF5b25uYWlzZScpXG4gKiAvLz0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGFyZ3VtZW50IGluc3RhbmNlb2YgRGF0ZVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRGF0ZVxuIiwidmFyIGlzRGF0ZSA9IHJlcXVpcmUoJy4uL2lzX2RhdGUvaW5kZXguanMnKVxuXG4vKipcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIGRhdGUgdmFsaWQ/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIGZhbHNlIGlmIGFyZ3VtZW50IGlzIEludmFsaWQgRGF0ZSBhbmQgdHJ1ZSBvdGhlcndpc2UuXG4gKiBJbnZhbGlkIERhdGUgaXMgYSBEYXRlLCB3aG9zZSB0aW1lIHZhbHVlIGlzIE5hTi5cbiAqXG4gKiBUaW1lIHZhbHVlIG9mIERhdGU6IGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuOS4xLjFcbiAqXG4gKiBAcGFyYW0ge0RhdGV9IGRhdGUgLSB0aGUgZGF0ZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBkYXRlIGlzIHZhbGlkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IGFyZ3VtZW50IG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgRGF0ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIHZhbGlkIGRhdGU6XG4gKiB2YXIgcmVzdWx0ID0gaXNWYWxpZChuZXcgRGF0ZSgyMDE0LCAxLCAzMSkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSBpbnZhbGlkIGRhdGU6XG4gKiB2YXIgcmVzdWx0ID0gaXNWYWxpZChuZXcgRGF0ZSgnJykpXG4gKiAvLz0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWQgKGRpcnR5RGF0ZSkge1xuICBpZiAoaXNEYXRlKGRpcnR5RGF0ZSkpIHtcbiAgICByZXR1cm4gIWlzTmFOKGRpcnR5RGF0ZSlcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHRvU3RyaW5nLmNhbGwoZGlydHlEYXRlKSArICcgaXMgbm90IGFuIGluc3RhbmNlIG9mIERhdGUnKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNWYWxpZFxuIiwidmFyIGNvbW1vbkZvcm1hdHRlcktleXMgPSBbXG4gICdNJywgJ01NJywgJ1EnLCAnRCcsICdERCcsICdEREQnLCAnRERERCcsICdkJyxcbiAgJ0UnLCAnVycsICdXVycsICdZWScsICdZWVlZJywgJ0dHJywgJ0dHR0cnLFxuICAnSCcsICdISCcsICdoJywgJ2hoJywgJ20nLCAnbW0nLFxuICAncycsICdzcycsICdTJywgJ1NTJywgJ1NTUycsXG4gICdaJywgJ1paJywgJ1gnLCAneCdcbl1cblxuZnVuY3Rpb24gYnVpbGRGb3JtYXR0aW5nVG9rZW5zUmVnRXhwIChmb3JtYXR0ZXJzKSB7XG4gIHZhciBmb3JtYXR0ZXJLZXlzID0gW11cbiAgZm9yICh2YXIga2V5IGluIGZvcm1hdHRlcnMpIHtcbiAgICBpZiAoZm9ybWF0dGVycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICBmb3JtYXR0ZXJLZXlzLnB1c2goa2V5KVxuICAgIH1cbiAgfVxuXG4gIHZhciBmb3JtYXR0aW5nVG9rZW5zID0gY29tbW9uRm9ybWF0dGVyS2V5c1xuICAgIC5jb25jYXQoZm9ybWF0dGVyS2V5cylcbiAgICAuc29ydCgpXG4gICAgLnJldmVyc2UoKVxuICB2YXIgZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCA9IG5ldyBSZWdFeHAoXG4gICAgJyhcXFxcW1teXFxcXFtdKlxcXFxdKXwoXFxcXFxcXFwpPycgKyAnKCcgKyBmb3JtYXR0aW5nVG9rZW5zLmpvaW4oJ3wnKSArICd8LiknLCAnZydcbiAgKVxuXG4gIHJldHVybiBmb3JtYXR0aW5nVG9rZW5zUmVnRXhwXG59XG5cbm1vZHVsZS5leHBvcnRzID0gYnVpbGRGb3JtYXR0aW5nVG9rZW5zUmVnRXhwXG4iLCJmdW5jdGlvbiBidWlsZERpc3RhbmNlSW5Xb3Jkc0xvY2FsZSAoKSB7XG4gIHZhciBkaXN0YW5jZUluV29yZHNMb2NhbGUgPSB7XG4gICAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgICAgb25lOiAnbGVzcyB0aGFuIGEgc2Vjb25kJyxcbiAgICAgIG90aGVyOiAnbGVzcyB0aGFuIHt7Y291bnR9fSBzZWNvbmRzJ1xuICAgIH0sXG5cbiAgICB4U2Vjb25kczoge1xuICAgICAgb25lOiAnMSBzZWNvbmQnLFxuICAgICAgb3RoZXI6ICd7e2NvdW50fX0gc2Vjb25kcydcbiAgICB9LFxuXG4gICAgaGFsZkFNaW51dGU6ICdoYWxmIGEgbWludXRlJyxcblxuICAgIGxlc3NUaGFuWE1pbnV0ZXM6IHtcbiAgICAgIG9uZTogJ2xlc3MgdGhhbiBhIG1pbnV0ZScsXG4gICAgICBvdGhlcjogJ2xlc3MgdGhhbiB7e2NvdW50fX0gbWludXRlcydcbiAgICB9LFxuXG4gICAgeE1pbnV0ZXM6IHtcbiAgICAgIG9uZTogJzEgbWludXRlJyxcbiAgICAgIG90aGVyOiAne3tjb3VudH19IG1pbnV0ZXMnXG4gICAgfSxcblxuICAgIGFib3V0WEhvdXJzOiB7XG4gICAgICBvbmU6ICdhYm91dCAxIGhvdXInLFxuICAgICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gaG91cnMnXG4gICAgfSxcblxuICAgIHhIb3Vyczoge1xuICAgICAgb25lOiAnMSBob3VyJyxcbiAgICAgIG90aGVyOiAne3tjb3VudH19IGhvdXJzJ1xuICAgIH0sXG5cbiAgICB4RGF5czoge1xuICAgICAgb25lOiAnMSBkYXknLFxuICAgICAgb3RoZXI6ICd7e2NvdW50fX0gZGF5cydcbiAgICB9LFxuXG4gICAgYWJvdXRYTW9udGhzOiB7XG4gICAgICBvbmU6ICdhYm91dCAxIG1vbnRoJyxcbiAgICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IG1vbnRocydcbiAgICB9LFxuXG4gICAgeE1vbnRoczoge1xuICAgICAgb25lOiAnMSBtb250aCcsXG4gICAgICBvdGhlcjogJ3t7Y291bnR9fSBtb250aHMnXG4gICAgfSxcblxuICAgIGFib3V0WFllYXJzOiB7XG4gICAgICBvbmU6ICdhYm91dCAxIHllYXInLFxuICAgICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0geWVhcnMnXG4gICAgfSxcblxuICAgIHhZZWFyczoge1xuICAgICAgb25lOiAnMSB5ZWFyJyxcbiAgICAgIG90aGVyOiAne3tjb3VudH19IHllYXJzJ1xuICAgIH0sXG5cbiAgICBvdmVyWFllYXJzOiB7XG4gICAgICBvbmU6ICdvdmVyIDEgeWVhcicsXG4gICAgICBvdGhlcjogJ292ZXIge3tjb3VudH19IHllYXJzJ1xuICAgIH0sXG5cbiAgICBhbG1vc3RYWWVhcnM6IHtcbiAgICAgIG9uZTogJ2FsbW9zdCAxIHllYXInLFxuICAgICAgb3RoZXI6ICdhbG1vc3Qge3tjb3VudH19IHllYXJzJ1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGxvY2FsaXplICh0b2tlbiwgY291bnQsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gICAgdmFyIHJlc3VsdFxuICAgIGlmICh0eXBlb2YgZGlzdGFuY2VJbldvcmRzTG9jYWxlW3Rva2VuXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJlc3VsdCA9IGRpc3RhbmNlSW5Xb3Jkc0xvY2FsZVt0b2tlbl1cbiAgICB9IGVsc2UgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgICByZXN1bHQgPSBkaXN0YW5jZUluV29yZHNMb2NhbGVbdG9rZW5dLm9uZVxuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBkaXN0YW5jZUluV29yZHNMb2NhbGVbdG9rZW5dLm90aGVyLnJlcGxhY2UoJ3t7Y291bnR9fScsIGNvdW50KVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmFkZFN1ZmZpeCkge1xuICAgICAgaWYgKG9wdGlvbnMuY29tcGFyaXNvbiA+IDApIHtcbiAgICAgICAgcmV0dXJuICdpbiAnICsgcmVzdWx0XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcmVzdWx0ICsgJyBhZ28nXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBsb2NhbGl6ZTogbG9jYWxpemVcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJ1aWxkRGlzdGFuY2VJbldvcmRzTG9jYWxlXG4iLCJ2YXIgYnVpbGRGb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gcmVxdWlyZSgnLi4vLi4vX2xpYi9idWlsZF9mb3JtYXR0aW5nX3Rva2Vuc19yZWdfZXhwL2luZGV4LmpzJylcblxuZnVuY3Rpb24gYnVpbGRGb3JtYXRMb2NhbGUgKCkge1xuICAvLyBOb3RlOiBpbiBFbmdsaXNoLCB0aGUgbmFtZXMgb2YgZGF5cyBvZiB0aGUgd2VlayBhbmQgbW9udGhzIGFyZSBjYXBpdGFsaXplZC5cbiAgLy8gSWYgeW91IGFyZSBtYWtpbmcgYSBuZXcgbG9jYWxlIGJhc2VkIG9uIHRoaXMgb25lLCBjaGVjayBpZiB0aGUgc2FtZSBpcyB0cnVlIGZvciB0aGUgbGFuZ3VhZ2UgeW91J3JlIHdvcmtpbmcgb24uXG4gIC8vIEdlbmVyYWxseSwgZm9ybWF0dGVkIGRhdGVzIHNob3VsZCBsb29rIGxpa2UgdGhleSBhcmUgaW4gdGhlIG1pZGRsZSBvZiBhIHNlbnRlbmNlLFxuICAvLyBlLmcuIGluIFNwYW5pc2ggbGFuZ3VhZ2UgdGhlIHdlZWtkYXlzIGFuZCBtb250aHMgc2hvdWxkIGJlIGluIHRoZSBsb3dlcmNhc2UuXG4gIHZhciBtb250aHMzY2hhciA9IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXVxuICB2YXIgbW9udGhzRnVsbCA9IFsnSmFudWFyeScsICdGZWJydWFyeScsICdNYXJjaCcsICdBcHJpbCcsICdNYXknLCAnSnVuZScsICdKdWx5JywgJ0F1Z3VzdCcsICdTZXB0ZW1iZXInLCAnT2N0b2JlcicsICdOb3ZlbWJlcicsICdEZWNlbWJlciddXG4gIHZhciB3ZWVrZGF5czJjaGFyID0gWydTdScsICdNbycsICdUdScsICdXZScsICdUaCcsICdGcicsICdTYSddXG4gIHZhciB3ZWVrZGF5czNjaGFyID0gWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXVxuICB2YXIgd2Vla2RheXNGdWxsID0gWydTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSddXG4gIHZhciBtZXJpZGllbVVwcGVyY2FzZSA9IFsnQU0nLCAnUE0nXVxuICB2YXIgbWVyaWRpZW1Mb3dlcmNhc2UgPSBbJ2FtJywgJ3BtJ11cbiAgdmFyIG1lcmlkaWVtRnVsbCA9IFsnYS5tLicsICdwLm0uJ11cblxuICB2YXIgZm9ybWF0dGVycyA9IHtcbiAgICAvLyBNb250aDogSmFuLCBGZWIsIC4uLiwgRGVjXG4gICAgJ01NTSc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICByZXR1cm4gbW9udGhzM2NoYXJbZGF0ZS5nZXRNb250aCgpXVxuICAgIH0sXG5cbiAgICAvLyBNb250aDogSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcbiAgICAnTU1NTSc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICByZXR1cm4gbW9udGhzRnVsbFtkYXRlLmdldE1vbnRoKCldXG4gICAgfSxcblxuICAgIC8vIERheSBvZiB3ZWVrOiBTdSwgTW8sIC4uLiwgU2FcbiAgICAnZGQnOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgcmV0dXJuIHdlZWtkYXlzMmNoYXJbZGF0ZS5nZXREYXkoKV1cbiAgICB9LFxuXG4gICAgLy8gRGF5IG9mIHdlZWs6IFN1biwgTW9uLCAuLi4sIFNhdFxuICAgICdkZGQnOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgcmV0dXJuIHdlZWtkYXlzM2NoYXJbZGF0ZS5nZXREYXkoKV1cbiAgICB9LFxuXG4gICAgLy8gRGF5IG9mIHdlZWs6IFN1bmRheSwgTW9uZGF5LCAuLi4sIFNhdHVyZGF5XG4gICAgJ2RkZGQnOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgcmV0dXJuIHdlZWtkYXlzRnVsbFtkYXRlLmdldERheSgpXVxuICAgIH0sXG5cbiAgICAvLyBBTSwgUE1cbiAgICAnQSc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICByZXR1cm4gKGRhdGUuZ2V0SG91cnMoKSAvIDEyKSA+PSAxID8gbWVyaWRpZW1VcHBlcmNhc2VbMV0gOiBtZXJpZGllbVVwcGVyY2FzZVswXVxuICAgIH0sXG5cbiAgICAvLyBhbSwgcG1cbiAgICAnYSc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICByZXR1cm4gKGRhdGUuZ2V0SG91cnMoKSAvIDEyKSA+PSAxID8gbWVyaWRpZW1Mb3dlcmNhc2VbMV0gOiBtZXJpZGllbUxvd2VyY2FzZVswXVxuICAgIH0sXG5cbiAgICAvLyBhLm0uLCBwLm0uXG4gICAgJ2FhJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgIHJldHVybiAoZGF0ZS5nZXRIb3VycygpIC8gMTIpID49IDEgPyBtZXJpZGllbUZ1bGxbMV0gOiBtZXJpZGllbUZ1bGxbMF1cbiAgICB9XG4gIH1cblxuICAvLyBHZW5lcmF0ZSBvcmRpbmFsIHZlcnNpb24gb2YgZm9ybWF0dGVyczogTSAtPiBNbywgRCAtPiBEbywgZXRjLlxuICB2YXIgb3JkaW5hbEZvcm1hdHRlcnMgPSBbJ00nLCAnRCcsICdEREQnLCAnZCcsICdRJywgJ1cnXVxuICBvcmRpbmFsRm9ybWF0dGVycy5mb3JFYWNoKGZ1bmN0aW9uIChmb3JtYXR0ZXJUb2tlbikge1xuICAgIGZvcm1hdHRlcnNbZm9ybWF0dGVyVG9rZW4gKyAnbyddID0gZnVuY3Rpb24gKGRhdGUsIGZvcm1hdHRlcnMpIHtcbiAgICAgIHJldHVybiBvcmRpbmFsKGZvcm1hdHRlcnNbZm9ybWF0dGVyVG9rZW5dKGRhdGUpKVxuICAgIH1cbiAgfSlcblxuICByZXR1cm4ge1xuICAgIGZvcm1hdHRlcnM6IGZvcm1hdHRlcnMsXG4gICAgZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cDogYnVpbGRGb3JtYXR0aW5nVG9rZW5zUmVnRXhwKGZvcm1hdHRlcnMpXG4gIH1cbn1cblxuZnVuY3Rpb24gb3JkaW5hbCAobnVtYmVyKSB7XG4gIHZhciByZW0xMDAgPSBudW1iZXIgJSAxMDBcbiAgaWYgKHJlbTEwMCA+IDIwIHx8IHJlbTEwMCA8IDEwKSB7XG4gICAgc3dpdGNoIChyZW0xMDAgJSAxMCkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3N0J1xuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ25kJ1xuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3JkJ1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVtYmVyICsgJ3RoJ1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJ1aWxkRm9ybWF0TG9jYWxlXG4iLCJ2YXIgYnVpbGREaXN0YW5jZUluV29yZHNMb2NhbGUgPSByZXF1aXJlKCcuL2J1aWxkX2Rpc3RhbmNlX2luX3dvcmRzX2xvY2FsZS9pbmRleC5qcycpXG52YXIgYnVpbGRGb3JtYXRMb2NhbGUgPSByZXF1aXJlKCcuL2J1aWxkX2Zvcm1hdF9sb2NhbGUvaW5kZXguanMnKVxuXG4vKipcbiAqIEBjYXRlZ29yeSBMb2NhbGVzXG4gKiBAc3VtbWFyeSBFbmdsaXNoIGxvY2FsZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRpc3RhbmNlSW5Xb3JkczogYnVpbGREaXN0YW5jZUluV29yZHNMb2NhbGUoKSxcbiAgZm9ybWF0OiBidWlsZEZvcm1hdExvY2FsZSgpXG59XG4iLCJ2YXIgaXNEYXRlID0gcmVxdWlyZSgnLi4vaXNfZGF0ZS9pbmRleC5qcycpXG5cbnZhciBNSUxMSVNFQ09ORFNfSU5fSE9VUiA9IDM2MDAwMDBcbnZhciBNSUxMSVNFQ09ORFNfSU5fTUlOVVRFID0gNjAwMDBcbnZhciBERUZBVUxUX0FERElUSU9OQUxfRElHSVRTID0gMlxuXG52YXIgcGFyc2VUb2tlbkRhdGVUaW1lRGVsaW1ldGVyID0gL1tUIF0vXG52YXIgcGFyc2VUb2tlblBsYWluVGltZSA9IC86L1xuXG4vLyB5ZWFyIHRva2Vuc1xudmFyIHBhcnNlVG9rZW5ZWSA9IC9eKFxcZHsyfSkkL1xudmFyIHBhcnNlVG9rZW5zWVlZID0gW1xuICAvXihbKy1dXFxkezJ9KSQvLCAvLyAwIGFkZGl0aW9uYWwgZGlnaXRzXG4gIC9eKFsrLV1cXGR7M30pJC8sIC8vIDEgYWRkaXRpb25hbCBkaWdpdFxuICAvXihbKy1dXFxkezR9KSQvIC8vIDIgYWRkaXRpb25hbCBkaWdpdHNcbl1cblxudmFyIHBhcnNlVG9rZW5ZWVlZID0gL14oXFxkezR9KS9cbnZhciBwYXJzZVRva2Vuc1lZWVlZID0gW1xuICAvXihbKy1dXFxkezR9KS8sIC8vIDAgYWRkaXRpb25hbCBkaWdpdHNcbiAgL14oWystXVxcZHs1fSkvLCAvLyAxIGFkZGl0aW9uYWwgZGlnaXRcbiAgL14oWystXVxcZHs2fSkvIC8vIDIgYWRkaXRpb25hbCBkaWdpdHNcbl1cblxuLy8gZGF0ZSB0b2tlbnNcbnZhciBwYXJzZVRva2VuTU0gPSAvXi0oXFxkezJ9KSQvXG52YXIgcGFyc2VUb2tlbkRERCA9IC9eLT8oXFxkezN9KSQvXG52YXIgcGFyc2VUb2tlbk1NREQgPSAvXi0/KFxcZHsyfSktPyhcXGR7Mn0pJC9cbnZhciBwYXJzZVRva2VuV3d3ID0gL14tP1coXFxkezJ9KSQvXG52YXIgcGFyc2VUb2tlbld3d0QgPSAvXi0/VyhcXGR7Mn0pLT8oXFxkezF9KSQvXG5cbi8vIHRpbWUgdG9rZW5zXG52YXIgcGFyc2VUb2tlbkhIID0gL14oXFxkezJ9KFsuLF1cXGQqKT8pJC9cbnZhciBwYXJzZVRva2VuSEhNTSA9IC9eKFxcZHsyfSk6PyhcXGR7Mn0oWy4sXVxcZCopPykkL1xudmFyIHBhcnNlVG9rZW5ISE1NU1MgPSAvXihcXGR7Mn0pOj8oXFxkezJ9KTo/KFxcZHsyfShbLixdXFxkKik/KSQvXG5cbi8vIHRpbWV6b25lIHRva2Vuc1xudmFyIHBhcnNlVG9rZW5UaW1lem9uZSA9IC8oW1orLV0uKikkL1xudmFyIHBhcnNlVG9rZW5UaW1lem9uZVogPSAvXihaKSQvXG52YXIgcGFyc2VUb2tlblRpbWV6b25lSEggPSAvXihbKy1dKShcXGR7Mn0pJC9cbnZhciBwYXJzZVRva2VuVGltZXpvbmVISE1NID0gL14oWystXSkoXFxkezJ9KTo/KFxcZHsyfSkkL1xuXG4vKipcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGFuIGluc3RhbmNlIG9mIERhdGUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIGl0cyBjbG9uZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYSBudW1iZXIsIGl0IGlzIHRyZWF0ZWQgYXMgYSB0aW1lc3RhbXAuXG4gKlxuICogSWYgYW4gYXJndW1lbnQgaXMgYSBzdHJpbmcsIHRoZSBmdW5jdGlvbiB0cmllcyB0byBwYXJzZSBpdC5cbiAqIEZ1bmN0aW9uIGFjY2VwdHMgY29tcGxldGUgSVNPIDg2MDEgZm9ybWF0cyBhcyB3ZWxsIGFzIHBhcnRpYWwgaW1wbGVtZW50YXRpb25zLlxuICogSVNPIDg2MDE6IGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDFcbiAqXG4gKiBJZiBhbGwgYWJvdmUgZmFpbHMsIHRoZSBmdW5jdGlvbiBwYXNzZXMgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIERhdGUgY29uc3RydWN0b3IuXG4gKlxuICogQHBhcmFtIHtEYXRlfFN0cmluZ3xOdW1iZXJ9IGFyZ3VtZW50IC0gdGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSB0aGUgb2JqZWN0IHdpdGggb3B0aW9uc1xuICogQHBhcmFtIHswIHwgMSB8IDJ9IFtvcHRpb25zLmFkZGl0aW9uYWxEaWdpdHM9Ml0gLSB0aGUgYWRkaXRpb25hbCBudW1iZXIgb2YgZGlnaXRzIGluIHRoZSBleHRlbmRlZCB5ZWFyIGZvcm1hdFxuICogQHJldHVybnMge0RhdGV9IHRoZSBwYXJzZWQgZGF0ZSBpbiB0aGUgbG9jYWwgdGltZSB6b25lXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbnZlcnQgc3RyaW5nICcyMDE0LTAyLTExVDExOjMwOjMwJyB0byBkYXRlOlxuICogdmFyIHJlc3VsdCA9IHBhcnNlKCcyMDE0LTAyLTExVDExOjMwOjMwJylcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFBhcnNlIHN0cmluZyAnKzAyMDE0MTAxJyxcbiAqIC8vIGlmIHRoZSBhZGRpdGlvbmFsIG51bWJlciBvZiBkaWdpdHMgaW4gdGhlIGV4dGVuZGVkIHllYXIgZm9ybWF0IGlzIDE6XG4gKiB2YXIgcmVzdWx0ID0gcGFyc2UoJyswMjAxNDEwMScsIHthZGRpdGlvbmFsRGlnaXRzOiAxfSlcbiAqIC8vPT4gRnJpIEFwciAxMSAyMDE0IDAwOjAwOjAwXG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChhcmd1bWVudCwgZGlydHlPcHRpb25zKSB7XG4gIGlmIChpc0RhdGUoYXJndW1lbnQpKSB7XG4gICAgLy8gUHJldmVudCB0aGUgZGF0ZSB0byBsb3NlIHRoZSBtaWxsaXNlY29uZHMgd2hlbiBwYXNzZWQgdG8gbmV3IERhdGUoKSBpbiBJRTEwXG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50LmdldFRpbWUoKSlcbiAgfSBlbHNlIGlmICh0eXBlb2YgYXJndW1lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50KVxuICB9XG5cbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge31cbiAgdmFyIGFkZGl0aW9uYWxEaWdpdHMgPSBvcHRpb25zLmFkZGl0aW9uYWxEaWdpdHNcbiAgaWYgKGFkZGl0aW9uYWxEaWdpdHMgPT0gbnVsbCkge1xuICAgIGFkZGl0aW9uYWxEaWdpdHMgPSBERUZBVUxUX0FERElUSU9OQUxfRElHSVRTXG4gIH0gZWxzZSB7XG4gICAgYWRkaXRpb25hbERpZ2l0cyA9IE51bWJlcihhZGRpdGlvbmFsRGlnaXRzKVxuICB9XG5cbiAgdmFyIGRhdGVTdHJpbmdzID0gc3BsaXREYXRlU3RyaW5nKGFyZ3VtZW50KVxuXG4gIHZhciBwYXJzZVllYXJSZXN1bHQgPSBwYXJzZVllYXIoZGF0ZVN0cmluZ3MuZGF0ZSwgYWRkaXRpb25hbERpZ2l0cylcbiAgdmFyIHllYXIgPSBwYXJzZVllYXJSZXN1bHQueWVhclxuICB2YXIgcmVzdERhdGVTdHJpbmcgPSBwYXJzZVllYXJSZXN1bHQucmVzdERhdGVTdHJpbmdcblxuICB2YXIgZGF0ZSA9IHBhcnNlRGF0ZShyZXN0RGF0ZVN0cmluZywgeWVhcilcblxuICBpZiAoZGF0ZSkge1xuICAgIHZhciB0aW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKVxuICAgIHZhciB0aW1lID0gMFxuICAgIHZhciBvZmZzZXRcblxuICAgIGlmIChkYXRlU3RyaW5ncy50aW1lKSB7XG4gICAgICB0aW1lID0gcGFyc2VUaW1lKGRhdGVTdHJpbmdzLnRpbWUpXG4gICAgfVxuXG4gICAgaWYgKGRhdGVTdHJpbmdzLnRpbWV6b25lKSB7XG4gICAgICBvZmZzZXQgPSBwYXJzZVRpbWV6b25lKGRhdGVTdHJpbmdzLnRpbWV6b25lKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBnZXQgb2Zmc2V0IGFjY3VyYXRlIHRvIGhvdXIgaW4gdGltZXpvbmVzIHRoYXQgY2hhbmdlIG9mZnNldFxuICAgICAgb2Zmc2V0ID0gbmV3IERhdGUodGltZXN0YW1wICsgdGltZSkuZ2V0VGltZXpvbmVPZmZzZXQoKVxuICAgICAgb2Zmc2V0ID0gbmV3IERhdGUodGltZXN0YW1wICsgdGltZSArIG9mZnNldCAqIE1JTExJU0VDT05EU19JTl9NSU5VVEUpLmdldFRpbWV6b25lT2Zmc2V0KClcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IERhdGUodGltZXN0YW1wICsgdGltZSArIG9mZnNldCAqIE1JTExJU0VDT05EU19JTl9NSU5VVEUpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50KVxuICB9XG59XG5cbmZ1bmN0aW9uIHNwbGl0RGF0ZVN0cmluZyAoZGF0ZVN0cmluZykge1xuICB2YXIgZGF0ZVN0cmluZ3MgPSB7fVxuICB2YXIgYXJyYXkgPSBkYXRlU3RyaW5nLnNwbGl0KHBhcnNlVG9rZW5EYXRlVGltZURlbGltZXRlcilcbiAgdmFyIHRpbWVTdHJpbmdcblxuICBpZiAocGFyc2VUb2tlblBsYWluVGltZS50ZXN0KGFycmF5WzBdKSkge1xuICAgIGRhdGVTdHJpbmdzLmRhdGUgPSBudWxsXG4gICAgdGltZVN0cmluZyA9IGFycmF5WzBdXG4gIH0gZWxzZSB7XG4gICAgZGF0ZVN0cmluZ3MuZGF0ZSA9IGFycmF5WzBdXG4gICAgdGltZVN0cmluZyA9IGFycmF5WzFdXG4gIH1cblxuICBpZiAodGltZVN0cmluZykge1xuICAgIHZhciB0b2tlbiA9IHBhcnNlVG9rZW5UaW1lem9uZS5leGVjKHRpbWVTdHJpbmcpXG4gICAgaWYgKHRva2VuKSB7XG4gICAgICBkYXRlU3RyaW5ncy50aW1lID0gdGltZVN0cmluZy5yZXBsYWNlKHRva2VuWzFdLCAnJylcbiAgICAgIGRhdGVTdHJpbmdzLnRpbWV6b25lID0gdG9rZW5bMV1cbiAgICB9IGVsc2Uge1xuICAgICAgZGF0ZVN0cmluZ3MudGltZSA9IHRpbWVTdHJpbmdcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGF0ZVN0cmluZ3Ncbn1cblxuZnVuY3Rpb24gcGFyc2VZZWFyIChkYXRlU3RyaW5nLCBhZGRpdGlvbmFsRGlnaXRzKSB7XG4gIHZhciBwYXJzZVRva2VuWVlZID0gcGFyc2VUb2tlbnNZWVlbYWRkaXRpb25hbERpZ2l0c11cbiAgdmFyIHBhcnNlVG9rZW5ZWVlZWSA9IHBhcnNlVG9rZW5zWVlZWVlbYWRkaXRpb25hbERpZ2l0c11cblxuICB2YXIgdG9rZW5cblxuICAvLyBZWVlZIG9yIMKxWVlZWVlcbiAgdG9rZW4gPSBwYXJzZVRva2VuWVlZWS5leGVjKGRhdGVTdHJpbmcpIHx8IHBhcnNlVG9rZW5ZWVlZWS5leGVjKGRhdGVTdHJpbmcpXG4gIGlmICh0b2tlbikge1xuICAgIHZhciB5ZWFyU3RyaW5nID0gdG9rZW5bMV1cbiAgICByZXR1cm4ge1xuICAgICAgeWVhcjogcGFyc2VJbnQoeWVhclN0cmluZywgMTApLFxuICAgICAgcmVzdERhdGVTdHJpbmc6IGRhdGVTdHJpbmcuc2xpY2UoeWVhclN0cmluZy5sZW5ndGgpXG4gICAgfVxuICB9XG5cbiAgLy8gWVkgb3IgwrFZWVlcbiAgdG9rZW4gPSBwYXJzZVRva2VuWVkuZXhlYyhkYXRlU3RyaW5nKSB8fCBwYXJzZVRva2VuWVlZLmV4ZWMoZGF0ZVN0cmluZylcbiAgaWYgKHRva2VuKSB7XG4gICAgdmFyIGNlbnR1cnlTdHJpbmcgPSB0b2tlblsxXVxuICAgIHJldHVybiB7XG4gICAgICB5ZWFyOiBwYXJzZUludChjZW50dXJ5U3RyaW5nLCAxMCkgKiAxMDAsXG4gICAgICByZXN0RGF0ZVN0cmluZzogZGF0ZVN0cmluZy5zbGljZShjZW50dXJ5U3RyaW5nLmxlbmd0aClcbiAgICB9XG4gIH1cblxuICAvLyBJbnZhbGlkIElTTy1mb3JtYXR0ZWQgeWVhclxuICByZXR1cm4ge1xuICAgIHllYXI6IG51bGxcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZURhdGUgKGRhdGVTdHJpbmcsIHllYXIpIHtcbiAgLy8gSW52YWxpZCBJU08tZm9ybWF0dGVkIHllYXJcbiAgaWYgKHllYXIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgdmFyIHRva2VuXG4gIHZhciBkYXRlXG4gIHZhciBtb250aFxuICB2YXIgd2Vla1xuXG4gIC8vIFlZWVlcbiAgaWYgKGRhdGVTdHJpbmcubGVuZ3RoID09PSAwKSB7XG4gICAgZGF0ZSA9IG5ldyBEYXRlKDApXG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5ZWFyKVxuICAgIHJldHVybiBkYXRlXG4gIH1cblxuICAvLyBZWVlZLU1NXG4gIHRva2VuID0gcGFyc2VUb2tlbk1NLmV4ZWMoZGF0ZVN0cmluZylcbiAgaWYgKHRva2VuKSB7XG4gICAgZGF0ZSA9IG5ldyBEYXRlKDApXG4gICAgbW9udGggPSBwYXJzZUludCh0b2tlblsxXSwgMTApIC0gMVxuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoeWVhciwgbW9udGgpXG4gICAgcmV0dXJuIGRhdGVcbiAgfVxuXG4gIC8vIFlZWVktREREIG9yIFlZWVlERERcbiAgdG9rZW4gPSBwYXJzZVRva2VuRERELmV4ZWMoZGF0ZVN0cmluZylcbiAgaWYgKHRva2VuKSB7XG4gICAgZGF0ZSA9IG5ldyBEYXRlKDApXG4gICAgdmFyIGRheU9mWWVhciA9IHBhcnNlSW50KHRva2VuWzFdLCAxMClcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIGRheU9mWWVhcilcbiAgICByZXR1cm4gZGF0ZVxuICB9XG5cbiAgLy8gWVlZWS1NTS1ERCBvciBZWVlZTU1ERFxuICB0b2tlbiA9IHBhcnNlVG9rZW5NTURELmV4ZWMoZGF0ZVN0cmluZylcbiAgaWYgKHRva2VuKSB7XG4gICAgZGF0ZSA9IG5ldyBEYXRlKDApXG4gICAgbW9udGggPSBwYXJzZUludCh0b2tlblsxXSwgMTApIC0gMVxuICAgIHZhciBkYXkgPSBwYXJzZUludCh0b2tlblsyXSwgMTApXG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5ZWFyLCBtb250aCwgZGF5KVxuICAgIHJldHVybiBkYXRlXG4gIH1cblxuICAvLyBZWVlZLVd3dyBvciBZWVlZV3d3XG4gIHRva2VuID0gcGFyc2VUb2tlbld3dy5leGVjKGRhdGVTdHJpbmcpXG4gIGlmICh0b2tlbikge1xuICAgIHdlZWsgPSBwYXJzZUludCh0b2tlblsxXSwgMTApIC0gMVxuICAgIHJldHVybiBkYXlPZklTT1llYXIoeWVhciwgd2VlaylcbiAgfVxuXG4gIC8vIFlZWVktV3d3LUQgb3IgWVlZWVd3d0RcbiAgdG9rZW4gPSBwYXJzZVRva2VuV3d3RC5leGVjKGRhdGVTdHJpbmcpXG4gIGlmICh0b2tlbikge1xuICAgIHdlZWsgPSBwYXJzZUludCh0b2tlblsxXSwgMTApIC0gMVxuICAgIHZhciBkYXlPZldlZWsgPSBwYXJzZUludCh0b2tlblsyXSwgMTApIC0gMVxuICAgIHJldHVybiBkYXlPZklTT1llYXIoeWVhciwgd2VlaywgZGF5T2ZXZWVrKVxuICB9XG5cbiAgLy8gSW52YWxpZCBJU08tZm9ybWF0dGVkIGRhdGVcbiAgcmV0dXJuIG51bGxcbn1cblxuZnVuY3Rpb24gcGFyc2VUaW1lICh0aW1lU3RyaW5nKSB7XG4gIHZhciB0b2tlblxuICB2YXIgaG91cnNcbiAgdmFyIG1pbnV0ZXNcblxuICAvLyBoaFxuICB0b2tlbiA9IHBhcnNlVG9rZW5ISC5leGVjKHRpbWVTdHJpbmcpXG4gIGlmICh0b2tlbikge1xuICAgIGhvdXJzID0gcGFyc2VGbG9hdCh0b2tlblsxXS5yZXBsYWNlKCcsJywgJy4nKSlcbiAgICByZXR1cm4gKGhvdXJzICUgMjQpICogTUlMTElTRUNPTkRTX0lOX0hPVVJcbiAgfVxuXG4gIC8vIGhoOm1tIG9yIGhobW1cbiAgdG9rZW4gPSBwYXJzZVRva2VuSEhNTS5leGVjKHRpbWVTdHJpbmcpXG4gIGlmICh0b2tlbikge1xuICAgIGhvdXJzID0gcGFyc2VJbnQodG9rZW5bMV0sIDEwKVxuICAgIG1pbnV0ZXMgPSBwYXJzZUZsb2F0KHRva2VuWzJdLnJlcGxhY2UoJywnLCAnLicpKVxuICAgIHJldHVybiAoaG91cnMgJSAyNCkgKiBNSUxMSVNFQ09ORFNfSU5fSE9VUiArXG4gICAgICBtaW51dGVzICogTUlMTElTRUNPTkRTX0lOX01JTlVURVxuICB9XG5cbiAgLy8gaGg6bW06c3Mgb3IgaGhtbXNzXG4gIHRva2VuID0gcGFyc2VUb2tlbkhITU1TUy5leGVjKHRpbWVTdHJpbmcpXG4gIGlmICh0b2tlbikge1xuICAgIGhvdXJzID0gcGFyc2VJbnQodG9rZW5bMV0sIDEwKVxuICAgIG1pbnV0ZXMgPSBwYXJzZUludCh0b2tlblsyXSwgMTApXG4gICAgdmFyIHNlY29uZHMgPSBwYXJzZUZsb2F0KHRva2VuWzNdLnJlcGxhY2UoJywnLCAnLicpKVxuICAgIHJldHVybiAoaG91cnMgJSAyNCkgKiBNSUxMSVNFQ09ORFNfSU5fSE9VUiArXG4gICAgICBtaW51dGVzICogTUlMTElTRUNPTkRTX0lOX01JTlVURSArXG4gICAgICBzZWNvbmRzICogMTAwMFxuICB9XG5cbiAgLy8gSW52YWxpZCBJU08tZm9ybWF0dGVkIHRpbWVcbiAgcmV0dXJuIG51bGxcbn1cblxuZnVuY3Rpb24gcGFyc2VUaW1lem9uZSAodGltZXpvbmVTdHJpbmcpIHtcbiAgdmFyIHRva2VuXG4gIHZhciBhYnNvbHV0ZU9mZnNldFxuXG4gIC8vIFpcbiAgdG9rZW4gPSBwYXJzZVRva2VuVGltZXpvbmVaLmV4ZWModGltZXpvbmVTdHJpbmcpXG4gIGlmICh0b2tlbikge1xuICAgIHJldHVybiAwXG4gIH1cblxuICAvLyDCsWhoXG4gIHRva2VuID0gcGFyc2VUb2tlblRpbWV6b25lSEguZXhlYyh0aW1lem9uZVN0cmluZylcbiAgaWYgKHRva2VuKSB7XG4gICAgYWJzb2x1dGVPZmZzZXQgPSBwYXJzZUludCh0b2tlblsyXSwgMTApICogNjBcbiAgICByZXR1cm4gKHRva2VuWzFdID09PSAnKycpID8gLWFic29sdXRlT2Zmc2V0IDogYWJzb2x1dGVPZmZzZXRcbiAgfVxuXG4gIC8vIMKxaGg6bW0gb3IgwrFoaG1tXG4gIHRva2VuID0gcGFyc2VUb2tlblRpbWV6b25lSEhNTS5leGVjKHRpbWV6b25lU3RyaW5nKVxuICBpZiAodG9rZW4pIHtcbiAgICBhYnNvbHV0ZU9mZnNldCA9IHBhcnNlSW50KHRva2VuWzJdLCAxMCkgKiA2MCArIHBhcnNlSW50KHRva2VuWzNdLCAxMClcbiAgICByZXR1cm4gKHRva2VuWzFdID09PSAnKycpID8gLWFic29sdXRlT2Zmc2V0IDogYWJzb2x1dGVPZmZzZXRcbiAgfVxuXG4gIHJldHVybiAwXG59XG5cbmZ1bmN0aW9uIGRheU9mSVNPWWVhciAoaXNvWWVhciwgd2VlaywgZGF5KSB7XG4gIHdlZWsgPSB3ZWVrIHx8IDBcbiAgZGF5ID0gZGF5IHx8IDBcbiAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgwKVxuICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGlzb1llYXIsIDAsIDQpXG4gIHZhciBmb3VydGhPZkphbnVhcnlEYXkgPSBkYXRlLmdldFVUQ0RheSgpIHx8IDdcbiAgdmFyIGRpZmYgPSB3ZWVrICogNyArIGRheSArIDEgLSBmb3VydGhPZkphbnVhcnlEYXlcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpICsgZGlmZilcbiAgcmV0dXJuIGRhdGVcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXJzZVxuIiwidmFyIHBhcnNlID0gcmVxdWlyZSgnLi4vcGFyc2UvaW5kZXguanMnKVxuXG4vKipcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBzdGFydCBvZiBhIGRheSBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgZGF5IGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqIFRoZSByZXN1bHQgd2lsbCBiZSBpbiB0aGUgbG9jYWwgdGltZXpvbmUuXG4gKlxuICogQHBhcmFtIHtEYXRlfFN0cmluZ3xOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHJldHVybnMge0RhdGV9IHRoZSBzdGFydCBvZiBhIGRheVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBUaGUgc3RhcnQgb2YgYSBkYXkgZm9yIDIgU2VwdGVtYmVyIDIwMTQgMTE6NTU6MDA6XG4gKiB2YXIgcmVzdWx0ID0gc3RhcnRPZkRheShuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApKVxuICogLy89PiBUdWUgU2VwIDAyIDIwMTQgMDA6MDA6MDBcbiAqL1xuZnVuY3Rpb24gc3RhcnRPZkRheSAoZGlydHlEYXRlKSB7XG4gIHZhciBkYXRlID0gcGFyc2UoZGlydHlEYXRlKVxuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApXG4gIHJldHVybiBkYXRlXG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhcnRPZkRheVxuIiwidmFyIHN0YXJ0T2ZXZWVrID0gcmVxdWlyZSgnLi4vc3RhcnRfb2Zfd2Vlay9pbmRleC5qcycpXG5cbi8qKlxuICogQGNhdGVnb3J5IElTTyBXZWVrIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYW4gSVNPIHdlZWsgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhbiBJU08gd2VlayBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyOiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGVcbiAqXG4gKiBAcGFyYW0ge0RhdGV8U3RyaW5nfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHN0YXJ0IG9mIGFuIElTTyB3ZWVrXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBzdGFydCBvZiBhbiBJU08gd2VlayBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIHZhciByZXN1bHQgPSBzdGFydE9mSVNPV2VlayhuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApKVxuICogLy89PiBNb24gU2VwIDAxIDIwMTQgMDA6MDA6MDBcbiAqL1xuZnVuY3Rpb24gc3RhcnRPZklTT1dlZWsgKGRpcnR5RGF0ZSkge1xuICByZXR1cm4gc3RhcnRPZldlZWsoZGlydHlEYXRlLCB7d2Vla1N0YXJ0c09uOiAxfSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFydE9mSVNPV2Vla1xuIiwidmFyIGdldElTT1llYXIgPSByZXF1aXJlKCcuLi9nZXRfaXNvX3llYXIvaW5kZXguanMnKVxudmFyIHN0YXJ0T2ZJU09XZWVrID0gcmVxdWlyZSgnLi4vc3RhcnRfb2ZfaXNvX3dlZWsvaW5kZXguanMnKVxuXG4vKipcbiAqIEBjYXRlZ29yeSBJU08gV2Vlay1OdW1iZXJpbmcgWWVhciBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIHN0YXJ0IG9mIGFuIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgc3RhcnQgb2YgYW4gSVNPIHdlZWstbnVtYmVyaW5nIHllYXIsXG4gKiB3aGljaCBhbHdheXMgc3RhcnRzIDMgZGF5cyBiZWZvcmUgdGhlIHllYXIncyBmaXJzdCBUaHVyc2RheS5cbiAqIFRoZSByZXN1bHQgd2lsbCBiZSBpbiB0aGUgbG9jYWwgdGltZXpvbmUuXG4gKlxuICogSVNPIHdlZWstbnVtYmVyaW5nIHllYXI6IGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZVxuICpcbiAqIEBwYXJhbSB7RGF0ZXxTdHJpbmd8TnVtYmVyfSBkYXRlIC0gdGhlIG9yaWdpbmFsIGRhdGVcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgc3RhcnQgb2YgYW4gSVNPIHllYXJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGFuIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyIGZvciAyIEp1bHkgMjAwNTpcbiAqIHZhciByZXN1bHQgPSBzdGFydE9mSVNPWWVhcihuZXcgRGF0ZSgyMDA1LCA2LCAyKSlcbiAqIC8vPT4gTW9uIEphbiAwMyAyMDA1IDAwOjAwOjAwXG4gKi9cbmZ1bmN0aW9uIHN0YXJ0T2ZJU09ZZWFyIChkaXJ0eURhdGUpIHtcbiAgdmFyIHllYXIgPSBnZXRJU09ZZWFyKGRpcnR5RGF0ZSlcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeSA9IG5ldyBEYXRlKDApXG4gIGZvdXJ0aE9mSmFudWFyeS5zZXRGdWxsWWVhcih5ZWFyLCAwLCA0KVxuICBmb3VydGhPZkphbnVhcnkuc2V0SG91cnMoMCwgMCwgMCwgMClcbiAgdmFyIGRhdGUgPSBzdGFydE9mSVNPV2Vlayhmb3VydGhPZkphbnVhcnkpXG4gIHJldHVybiBkYXRlXG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhcnRPZklTT1llYXJcbiIsInZhciBwYXJzZSA9IHJlcXVpcmUoJy4uL3BhcnNlL2luZGV4LmpzJylcblxuLyoqXG4gKiBAY2F0ZWdvcnkgV2VlayBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgd2VlayBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgd2VlayBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxTdHJpbmd8TnVtYmVyfSBkYXRlIC0gdGhlIG9yaWdpbmFsIGRhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSB0aGUgb2JqZWN0IHdpdGggb3B0aW9uc1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLndlZWtTdGFydHNPbj0wXSAtIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrICgwIC0gU3VuZGF5KVxuICogQHJldHVybnMge0RhdGV9IHRoZSBzdGFydCBvZiBhIHdlZWtcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGEgd2VlayBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIHZhciByZXN1bHQgPSBzdGFydE9mV2VlayhuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApKVxuICogLy89PiBTdW4gQXVnIDMxIDIwMTQgMDA6MDA6MDBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSWYgdGhlIHdlZWsgc3RhcnRzIG9uIE1vbmRheSwgdGhlIHN0YXJ0IG9mIHRoZSB3ZWVrIGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogdmFyIHJlc3VsdCA9IHN0YXJ0T2ZXZWVrKG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCksIHt3ZWVrU3RhcnRzT246IDF9KVxuICogLy89PiBNb24gU2VwIDAxIDIwMTQgMDA6MDA6MDBcbiAqL1xuZnVuY3Rpb24gc3RhcnRPZldlZWsgKGRpcnR5RGF0ZSwgZGlydHlPcHRpb25zKSB7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSBkaXJ0eU9wdGlvbnMgPyAoTnVtYmVyKGRpcnR5T3B0aW9ucy53ZWVrU3RhcnRzT24pIHx8IDApIDogMFxuXG4gIHZhciBkYXRlID0gcGFyc2UoZGlydHlEYXRlKVxuICB2YXIgZGF5ID0gZGF0ZS5nZXREYXkoKVxuICB2YXIgZGlmZiA9IChkYXkgPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSB3ZWVrU3RhcnRzT25cblxuICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgLSBkaWZmKVxuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApXG4gIHJldHVybiBkYXRlXG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhcnRPZldlZWtcbiIsInZhciBwYXJzZSA9IHJlcXVpcmUoJy4uL3BhcnNlL2luZGV4LmpzJylcblxuLyoqXG4gKiBAY2F0ZWdvcnkgWWVhciBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgeWVhciBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgeWVhciBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxTdHJpbmd8TnVtYmVyfSBkYXRlIC0gdGhlIG9yaWdpbmFsIGRhdGVcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgc3RhcnQgb2YgYSB5ZWFyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBzdGFydCBvZiBhIHllYXIgZm9yIDIgU2VwdGVtYmVyIDIwMTQgMTE6NTU6MDA6XG4gKiB2YXIgcmVzdWx0ID0gc3RhcnRPZlllYXIobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwMCkpXG4gKiAvLz0+IFdlZCBKYW4gMDEgMjAxNCAwMDowMDowMFxuICovXG5mdW5jdGlvbiBzdGFydE9mWWVhciAoZGlydHlEYXRlKSB7XG4gIHZhciBjbGVhbkRhdGUgPSBwYXJzZShkaXJ0eURhdGUpXG4gIHZhciBkYXRlID0gbmV3IERhdGUoMClcbiAgZGF0ZS5zZXRGdWxsWWVhcihjbGVhbkRhdGUuZ2V0RnVsbFllYXIoKSwgMCwgMSlcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKVxuICByZXR1cm4gZGF0ZVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YXJ0T2ZZZWFyXG4iXSwic291cmNlUm9vdCI6IiJ9
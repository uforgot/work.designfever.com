!function(e){var n={};function t(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)t.d(o,r,function(n){return e[n]}.bind(null,r));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=0)}({"../common/df.workgroup.GlobalVars.js":
/*!********************************************!*\
  !*** ../common/df.workgroup.GlobalVars.js ***!
  \********************************************/
/*! no static exports found */function(e,n){window.df=window.df||{},window.df.workgroup=window.df.workgroup||{},window.df.workgroup.GlobalVars={isLoaded:!1,infoData:null,time_now:0,params:df.lab.Util.getParams()}},"../common/df.workgroup.Preset.js":
/*!****************************************!*\
  !*** ../common/df.workgroup.Preset.js ***!
  \****************************************/
/*! no static exports found */function(e,n){window.df=window.df||{},window.df.workgroup=window.df.workgroup||{},window.df.workgroup.Preset={json_url:{default:"/json/df_info_data.json.php",default_local:"assets_login/temp/df_info_data.json",login:"assets_login/temp/df_info_data_01_login.json",checkin:"assets_login/temp/df_info_data_02_checkin.json",checkout:"assets_login/temp/df_info_data_03_checkout.json",logout:"assets_login/temp/df_info_data_04_logout.json",start:"assets_login/temp/df_info_data_05_start_work.json",stop:"assets_login/temp/df_info_data_06_stop_work.json"},document_url:{approval:"approval/approval_to_list.php",approval_my:"approval/approval_my_list.php",approval_cc:"approval/approval_cc_list.php"},main_url:"main.php",eventType:{ON_LOAD_JSON:"onLoadJson",ON_LOGIN:"onLogin",ON_CHECKIN:"onCheckin",ON_CHECKOUT:"onCheckout",ON_LOGOUT:"onLogout",ON_CHANGE_STAGE_INFO:"onChangeStageInfo",ON_ERROR:"onError",ON_WARNING:"onWarning",ON_CLOSE_MODAL:"onCloseModal",ON_START:"onStart",ON_STOP:"onStop"},class_name:{showIn:"show-in",hideOut:"hide-out"},related_site:[{title:"designfever.com",url:"http://designfever.com/",thumb:"thumb_mail.jpg_200x200"},{title:"Facebook",url:"https://www.facebook.com/feverbook",thumb:"thumb_mail.jpg_200x200"},{title:"Twitter",url:"https://twitter.com/designfever_kr",thumb:"thumb_mail.jpg_200x200"},{title:"Blog",url:"https://blog.naver.com/design_fever",thumb:"thumb_mail.jpg_200x200"},{title:"DF Mail",url:"http://mail.designfever.com/",thumb:"thumb_mail.jpg_200x200"},{title:"DF Lab",url:"http://dev.designfever.com/lab/",thumb:"thumb_mail.jpg_200x200"},{title:"Youtube",url:"https://www.youtube.com/user/designfeverda",thumb:"thumb_mail.jpg_200x200"}],isBgTest:!1}},"../common/df.workgroup.Util.js":
/*!**************************************!*\
  !*** ../common/df.workgroup.Util.js ***!
  \**************************************/
/*! no static exports found */function(e,n,t){var o=t(/*! ../bundler/node_modules/date-fns/format */"./node_modules/date-fns/format/index.js"),r=t(/*! ../bundler/node_modules/date-fns/is_date */"./node_modules/date-fns/is_date/index.js"),a=t(/*! ../bundler/node_modules/date-fns/locale/en */"./node_modules/date-fns/locale/en/index.js");window.df=window.df||{},window.df.workgroup=window.df.workgroup||{},window.df.workgroup.Util=function(){var e;function n(e){return r(e)}return{load_json:function(n,t,o,r){e=new Date,console.log("\n----- << START LOAD >> xhr.url : ",n,"\n");var a=r?JSON.stringify(r):null,s={method:t,action:n},u=new XMLHttpRequest;u.open(s.method,s.action,!0),u.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),u.onreadystatechange=function(){},u.onloadend=function(n){0===n.target.status?console.log("xhr.onloadend (Failed) : ",u):400===n.target.status?console.log("xhr.onloadend (Bad Request) : ",u):404===n.target.status?console.log("xhr.onloadend (404 Not Found) : ",u):200===n.target.status&&(console.log("\n----- << COMP LOAD >> ----- xhr.onloadend (Success) duration : ",((new Date).getTime()-e.getTime())/1e3+"sec\n\n"),console.log("xhr.onloadend (Success) response : \n",n),console.log("xhr.onloadend (Success) responseText(JSON) : \n",JSON.parse(n.target.responseText)),console.log("\n----- << COMP LOAD >> -----\n\n"),setTimeout(function(){o(n)},10))},u.send(a)},addZeroNumber:function(e){return e<10?"0"+e:""+e},addParamUniq:function(e){return e=-1==e.indexOf("?")?e+"?uniq="+(new Date).getTime():e+"&uniq="+(new Date).getTime()},getDate_format:function(e,t){return n(e)?o(e,t,{locale:a}):"XXXXXXXXXXX"},getIsDate:n}}()},"../common/df.workgroup.login.LoadInfoData.js":
/*!****************************************************!*\
  !*** ../common/df.workgroup.login.LoadInfoData.js ***!
  \****************************************************/
/*! no static exports found */function(e,n){!function(){if("function"==typeof window.CustomEvent)return!1;function e(e,n){n=n||{bubbles:!1,cancelable:!1,detail:void 0};var t=document.createEvent("CustomEvent");return t.initCustomEvent(e,n.bubbles,n.cancelable,n.detail),t}e.prototype=window.Event.prototype,window.CustomEvent=e}(),window.df=window.df||{},window.df.workgroup=window.df.workgroup||{},window.df.workgroup.login=window.df.workgroup.login||{},window.df.workgroup.login.LoadInfoData=function(){var e="[ LoadInfoData ]",n="";function t(e){var n=JSON.parse(e.target.responseText);window.df.workgroup.GlobalVars.isLoaded=!0,window.df.workgroup.GlobalVars.infoData=n;var t=!1,o=window.df.workgroup.GlobalVars.infoData;void 0!=o.user&&void 0!=o.user.isLoggedIn&&(o.user.isLoggedIn||"true"==o.user.isLoggedIn)&&(t=!0);var r=document.querySelector("html"),a=window.df.lab.Util.hasClass(r,"desktop");t&&(a&&"desktop"==Detectizr.device.type||o.user.isAdminAccount),function(){var e=new CustomEvent(window.df.workgroup.Preset.eventType.ON_LOAD_JSON);document.dispatchEvent(e)}()}function o(){document.removeEventListener(window.df.workgroup.Preset.eventType.ON_LOAD_JSON,o)}return{init:function(){n="localhost"===window.location.hostname||"127.0.0.1"===window.location.hostname?window.df.workgroup.Preset.json_url.default_local:window.df.workgroup.Preset.json_url.default,console.log(e," load default json data"),document.addEventListener(window.df.workgroup.Preset.eventType.ON_LOAD_JSON,o),function(e,n){var t={method:"GET",action:df.workgroup.Util.addParamUniq(e)};df.workgroup.Util.load_json(t.action,t.method,n,null)}(n,t)}}}(),window.df.workgroup.login.LoadInfoData.init()},"./node_modules/date-fns/difference_in_calendar_days/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/date-fns/difference_in_calendar_days/index.js ***!
  \********************************************************************/
/*! no static exports found */function(e,n,t){var o=t(/*! ../start_of_day/index.js */"./node_modules/date-fns/start_of_day/index.js"),r=6e4,a=864e5;e.exports=function(e,n){var t=o(e),s=o(n),u=t.getTime()-t.getTimezoneOffset()*r,d=s.getTime()-s.getTimezoneOffset()*r;return Math.round((u-d)/a)}},"./node_modules/date-fns/format/index.js":
/*!***********************************************!*\
  !*** ./node_modules/date-fns/format/index.js ***!
  \***********************************************/
/*! no static exports found */function(e,n,t){var o=t(/*! ../get_day_of_year/index.js */"./node_modules/date-fns/get_day_of_year/index.js"),r=t(/*! ../get_iso_week/index.js */"./node_modules/date-fns/get_iso_week/index.js"),a=t(/*! ../get_iso_year/index.js */"./node_modules/date-fns/get_iso_year/index.js"),s=t(/*! ../parse/index.js */"./node_modules/date-fns/parse/index.js"),u=t(/*! ../is_valid/index.js */"./node_modules/date-fns/is_valid/index.js"),d=t(/*! ../locale/en/index.js */"./node_modules/date-fns/locale/en/index.js");var i={M:function(e){return e.getMonth()+1},MM:function(e){return c(e.getMonth()+1,2)},Q:function(e){return Math.ceil((e.getMonth()+1)/3)},D:function(e){return e.getDate()},DD:function(e){return c(e.getDate(),2)},DDD:function(e){return o(e)},DDDD:function(e){return c(o(e),3)},d:function(e){return e.getDay()},E:function(e){return e.getDay()||7},W:function(e){return r(e)},WW:function(e){return c(r(e),2)},YY:function(e){return c(e.getFullYear(),4).substr(2)},YYYY:function(e){return c(e.getFullYear(),4)},GG:function(e){return String(a(e)).substr(2)},GGGG:function(e){return a(e)},H:function(e){return e.getHours()},HH:function(e){return c(e.getHours(),2)},h:function(e){var n=e.getHours();return 0===n?12:n>12?n%12:n},hh:function(e){return c(i.h(e),2)},m:function(e){return e.getMinutes()},mm:function(e){return c(e.getMinutes(),2)},s:function(e){return e.getSeconds()},ss:function(e){return c(e.getSeconds(),2)},S:function(e){return Math.floor(e.getMilliseconds()/100)},SS:function(e){return c(Math.floor(e.getMilliseconds()/10),2)},SSS:function(e){return c(e.getMilliseconds(),3)},Z:function(e){return l(e.getTimezoneOffset(),":")},ZZ:function(e){return l(e.getTimezoneOffset())},X:function(e){return Math.floor(e.getTime()/1e3)},x:function(e){return e.getTime()}};function f(e){return e.match(/\[[\s\S]/)?e.replace(/^\[|]$/g,""):e.replace(/\\/g,"")}function l(e,n){n=n||"";var t=e>0?"-":"+",o=Math.abs(e),r=o%60;return t+c(Math.floor(o/60),2)+n+c(r,2)}function c(e,n){for(var t=Math.abs(e).toString();t.length<n;)t="0"+t;return t}e.exports=function(e,n,t){var o=n?String(n):"YYYY-MM-DDTHH:mm:ss.SSSZ",r=(t||{}).locale,a=d.format.formatters,l=d.format.formattingTokensRegExp;r&&r.format&&r.format.formatters&&(a=r.format.formatters,r.format.formattingTokensRegExp&&(l=r.format.formattingTokensRegExp));var c=s(e);return u(c)?function(e,n,t){var o,r,a=e.match(t),s=a.length;for(o=0;o<s;o++)r=n[a[o]]||i[a[o]],a[o]=r||f(a[o]);return function(e){for(var n="",t=0;t<s;t++)a[t]instanceof Function?n+=a[t](e,i):n+=a[t];return n}}(o,a,l)(c):"Invalid Date"}},"./node_modules/date-fns/get_day_of_year/index.js":
/*!********************************************************!*\
  !*** ./node_modules/date-fns/get_day_of_year/index.js ***!
  \********************************************************/
/*! no static exports found */function(e,n,t){var o=t(/*! ../parse/index.js */"./node_modules/date-fns/parse/index.js"),r=t(/*! ../start_of_year/index.js */"./node_modules/date-fns/start_of_year/index.js"),a=t(/*! ../difference_in_calendar_days/index.js */"./node_modules/date-fns/difference_in_calendar_days/index.js");e.exports=function(e){var n=o(e);return a(n,r(n))+1}},"./node_modules/date-fns/get_iso_week/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/date-fns/get_iso_week/index.js ***!
  \*****************************************************/
/*! no static exports found */function(e,n,t){var o=t(/*! ../parse/index.js */"./node_modules/date-fns/parse/index.js"),r=t(/*! ../start_of_iso_week/index.js */"./node_modules/date-fns/start_of_iso_week/index.js"),a=t(/*! ../start_of_iso_year/index.js */"./node_modules/date-fns/start_of_iso_year/index.js"),s=6048e5;e.exports=function(e){var n=o(e),t=r(n).getTime()-a(n).getTime();return Math.round(t/s)+1}},"./node_modules/date-fns/get_iso_year/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/date-fns/get_iso_year/index.js ***!
  \*****************************************************/
/*! no static exports found */function(e,n,t){var o=t(/*! ../parse/index.js */"./node_modules/date-fns/parse/index.js"),r=t(/*! ../start_of_iso_week/index.js */"./node_modules/date-fns/start_of_iso_week/index.js");e.exports=function(e){var n=o(e),t=n.getFullYear(),a=new Date(0);a.setFullYear(t+1,0,4),a.setHours(0,0,0,0);var s=r(a),u=new Date(0);u.setFullYear(t,0,4),u.setHours(0,0,0,0);var d=r(u);return n.getTime()>=s.getTime()?t+1:n.getTime()>=d.getTime()?t:t-1}},"./node_modules/date-fns/is_date/index.js":
/*!************************************************!*\
  !*** ./node_modules/date-fns/is_date/index.js ***!
  \************************************************/
/*! no static exports found */function(e,n){e.exports=function(e){return e instanceof Date}},"./node_modules/date-fns/is_valid/index.js":
/*!*************************************************!*\
  !*** ./node_modules/date-fns/is_valid/index.js ***!
  \*************************************************/
/*! no static exports found */function(e,n,t){var o=t(/*! ../is_date/index.js */"./node_modules/date-fns/is_date/index.js");e.exports=function(e){if(o(e))return!isNaN(e);throw new TypeError(toString.call(e)+" is not an instance of Date")}},"./node_modules/date-fns/locale/_lib/build_formatting_tokens_reg_exp/index.js":
/*!************************************************************************************!*\
  !*** ./node_modules/date-fns/locale/_lib/build_formatting_tokens_reg_exp/index.js ***!
  \************************************************************************************/
/*! no static exports found */function(e,n){var t=["M","MM","Q","D","DD","DDD","DDDD","d","E","W","WW","YY","YYYY","GG","GGGG","H","HH","h","hh","m","mm","s","ss","S","SS","SSS","Z","ZZ","X","x"];e.exports=function(e){var n=[];for(var o in e)e.hasOwnProperty(o)&&n.push(o);var r=t.concat(n).sort().reverse();return new RegExp("(\\[[^\\[]*\\])|(\\\\)?("+r.join("|")+"|.)","g")}},"./node_modules/date-fns/locale/en/build_distance_in_words_locale/index.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/date-fns/locale/en/build_distance_in_words_locale/index.js ***!
  \*********************************************************************************/
/*! no static exports found */function(e,n){e.exports=function(){var e={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};return{localize:function(n,t,o){var r;return o=o||{},r="string"==typeof e[n]?e[n]:1===t?e[n].one:e[n].other.replace("{{count}}",t),o.addSuffix?o.comparison>0?"in "+r:r+" ago":r}}}},"./node_modules/date-fns/locale/en/build_format_locale/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/date-fns/locale/en/build_format_locale/index.js ***!
  \**********************************************************************/
/*! no static exports found */function(e,n,t){var o=t(/*! ../../_lib/build_formatting_tokens_reg_exp/index.js */"./node_modules/date-fns/locale/_lib/build_formatting_tokens_reg_exp/index.js");e.exports=function(){var e=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],n=["January","February","March","April","May","June","July","August","September","October","November","December"],t=["Su","Mo","Tu","We","Th","Fr","Sa"],r=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],a=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],s=["AM","PM"],u=["am","pm"],d=["a.m.","p.m."],i={MMM:function(n){return e[n.getMonth()]},MMMM:function(e){return n[e.getMonth()]},dd:function(e){return t[e.getDay()]},ddd:function(e){return r[e.getDay()]},dddd:function(e){return a[e.getDay()]},A:function(e){return e.getHours()/12>=1?s[1]:s[0]},a:function(e){return e.getHours()/12>=1?u[1]:u[0]},aa:function(e){return e.getHours()/12>=1?d[1]:d[0]}};return["M","D","DDD","d","Q","W"].forEach(function(e){i[e+"o"]=function(n,t){return function(e){var n=e%100;if(n>20||n<10)switch(n%10){case 1:return e+"st";case 2:return e+"nd";case 3:return e+"rd"}return e+"th"}(t[e](n))}}),{formatters:i,formattingTokensRegExp:o(i)}}},"./node_modules/date-fns/locale/en/index.js":
/*!**************************************************!*\
  !*** ./node_modules/date-fns/locale/en/index.js ***!
  \**************************************************/
/*! no static exports found */function(e,n,t){var o=t(/*! ./build_distance_in_words_locale/index.js */"./node_modules/date-fns/locale/en/build_distance_in_words_locale/index.js"),r=t(/*! ./build_format_locale/index.js */"./node_modules/date-fns/locale/en/build_format_locale/index.js");e.exports={distanceInWords:o(),format:r()}},"./node_modules/date-fns/parse/index.js":
/*!**********************************************!*\
  !*** ./node_modules/date-fns/parse/index.js ***!
  \**********************************************/
/*! no static exports found */function(e,n,t){var o=t(/*! ../is_date/index.js */"./node_modules/date-fns/is_date/index.js"),r=36e5,a=6e4,s=2,u=/[T ]/,d=/:/,i=/^(\d{2})$/,f=[/^([+-]\d{2})$/,/^([+-]\d{3})$/,/^([+-]\d{4})$/],l=/^(\d{4})/,c=[/^([+-]\d{4})/,/^([+-]\d{5})/,/^([+-]\d{6})/],_=/^-(\d{2})$/,m=/^-?(\d{3})$/,g=/^-?(\d{2})-?(\d{2})$/,p=/^-?W(\d{2})$/,w=/^-?W(\d{2})-?(\d{1})$/,h=/^(\d{2}([.,]\d*)?)$/,v=/^(\d{2}):?(\d{2}([.,]\d*)?)$/,x=/^(\d{2}):?(\d{2}):?(\d{2}([.,]\d*)?)$/,D=/([Z+-].*)$/,j=/^(Z)$/,b=/^([+-])(\d{2})$/,y=/^([+-])(\d{2}):?(\d{2})$/;function T(e,n,t){n=n||0,t=t||0;var o=new Date(0);o.setUTCFullYear(e,0,4);var r=7*n+t+1-(o.getUTCDay()||7);return o.setUTCDate(o.getUTCDate()+r),o}e.exports=function(e,n){if(o(e))return new Date(e.getTime());if("string"!=typeof e)return new Date(e);var t=(n||{}).additionalDigits;t=null==t?s:Number(t);var k=function(e){var n,t={},o=e.split(u);if(d.test(o[0])?(t.date=null,n=o[0]):(t.date=o[0],n=o[1]),n){var r=D.exec(n);r?(t.time=n.replace(r[1],""),t.timezone=r[1]):t.time=n}return t}(e),S=function(e,n){var t,o=f[n],r=c[n];if(t=l.exec(e)||r.exec(e)){var a=t[1];return{year:parseInt(a,10),restDateString:e.slice(a.length)}}if(t=i.exec(e)||o.exec(e)){var s=t[1];return{year:100*parseInt(s,10),restDateString:e.slice(s.length)}}return{year:null}}(k.date,t),O=S.year,M=function(e,n){if(null===n)return null;var t,o,r,a;if(0===e.length)return(o=new Date(0)).setUTCFullYear(n),o;if(t=_.exec(e))return o=new Date(0),r=parseInt(t[1],10)-1,o.setUTCFullYear(n,r),o;if(t=m.exec(e)){o=new Date(0);var s=parseInt(t[1],10);return o.setUTCFullYear(n,0,s),o}if(t=g.exec(e)){o=new Date(0),r=parseInt(t[1],10)-1;var u=parseInt(t[2],10);return o.setUTCFullYear(n,r,u),o}if(t=p.exec(e))return a=parseInt(t[1],10)-1,T(n,a);if(t=w.exec(e)){a=parseInt(t[1],10)-1;var d=parseInt(t[2],10)-1;return T(n,a,d)}return null}(S.restDateString,O);if(M){var N,Y=M.getTime(),I=0;return k.time&&(I=function(e){var n,t,o;if(n=h.exec(e))return(t=parseFloat(n[1].replace(",",".")))%24*r;if(n=v.exec(e))return t=parseInt(n[1],10),o=parseFloat(n[2].replace(",",".")),t%24*r+o*a;if(n=x.exec(e)){t=parseInt(n[1],10),o=parseInt(n[2],10);var s=parseFloat(n[3].replace(",","."));return t%24*r+o*a+1e3*s}return null}(k.time)),k.timezone?N=function(e){var n,t;return(n=j.exec(e))?0:(n=b.exec(e))?(t=60*parseInt(n[2],10),"+"===n[1]?-t:t):(n=y.exec(e))?(t=60*parseInt(n[2],10)+parseInt(n[3],10),"+"===n[1]?-t:t):0}(k.timezone):(N=new Date(Y+I).getTimezoneOffset(),N=new Date(Y+I+N*a).getTimezoneOffset()),new Date(Y+I+N*a)}return new Date(e)}},"./node_modules/date-fns/start_of_day/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/date-fns/start_of_day/index.js ***!
  \*****************************************************/
/*! no static exports found */function(e,n,t){var o=t(/*! ../parse/index.js */"./node_modules/date-fns/parse/index.js");e.exports=function(e){var n=o(e);return n.setHours(0,0,0,0),n}},"./node_modules/date-fns/start_of_iso_week/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/date-fns/start_of_iso_week/index.js ***!
  \**********************************************************/
/*! no static exports found */function(e,n,t){var o=t(/*! ../start_of_week/index.js */"./node_modules/date-fns/start_of_week/index.js");e.exports=function(e){return o(e,{weekStartsOn:1})}},"./node_modules/date-fns/start_of_iso_year/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/date-fns/start_of_iso_year/index.js ***!
  \**********************************************************/
/*! no static exports found */function(e,n,t){var o=t(/*! ../get_iso_year/index.js */"./node_modules/date-fns/get_iso_year/index.js"),r=t(/*! ../start_of_iso_week/index.js */"./node_modules/date-fns/start_of_iso_week/index.js");e.exports=function(e){var n=o(e),t=new Date(0);return t.setFullYear(n,0,4),t.setHours(0,0,0,0),r(t)}},"./node_modules/date-fns/start_of_week/index.js":
/*!******************************************************!*\
  !*** ./node_modules/date-fns/start_of_week/index.js ***!
  \******************************************************/
/*! no static exports found */function(e,n,t){var o=t(/*! ../parse/index.js */"./node_modules/date-fns/parse/index.js");e.exports=function(e,n){var t=n&&Number(n.weekStartsOn)||0,r=o(e),a=r.getDay(),s=(a<t?7:0)+a-t;return r.setDate(r.getDate()-s),r.setHours(0,0,0,0),r}},"./node_modules/date-fns/start_of_year/index.js":
/*!******************************************************!*\
  !*** ./node_modules/date-fns/start_of_year/index.js ***!
  \******************************************************/
/*! no static exports found */function(e,n,t){var o=t(/*! ../parse/index.js */"./node_modules/date-fns/parse/index.js");e.exports=function(e){var n=o(e),t=new Date(0);return t.setFullYear(n.getFullYear(),0,1),t.setHours(0,0,0,0),t}},0:
/*!***************************************************************************************************************************************************************!*\
  !*** multi ../common/df.workgroup.Preset.js ../common/df.workgroup.GlobalVars.js ../common/df.workgroup.Util.js ../common/df.workgroup.login.LoadInfoData.js ***!
  \***************************************************************************************************************************************************************/
/*! no static exports found */function(e,n,t){t(/*! ../common/df.workgroup.Preset.js */"../common/df.workgroup.Preset.js"),t(/*! ../common/df.workgroup.GlobalVars.js */"../common/df.workgroup.GlobalVars.js"),t(/*! ../common/df.workgroup.Util.js */"../common/df.workgroup.Util.js"),e.exports=t(/*! ../common/df.workgroup.login.LoadInfoData.js */"../common/df.workgroup.login.LoadInfoData.js")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbi9kZi53b3JrZ3JvdXAuR2xvYmFsVmFycy5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9uL2RmLndvcmtncm91cC5QcmVzZXQuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbi9kZi53b3JrZ3JvdXAuVXRpbC5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9uL2RmLndvcmtncm91cC5sb2dpbi5Mb2FkSW5mb0RhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2RpZmZlcmVuY2VfaW5fY2FsZW5kYXJfZGF5cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZm9ybWF0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9nZXRfZGF5X29mX3llYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2dldF9pc29fd2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZ2V0X2lzb195ZWFyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9pc19kYXRlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9pc192YWxpZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL19saWIvYnVpbGRfZm9ybWF0dGluZ190b2tlbnNfcmVnX2V4cC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL2VuL2J1aWxkX2Rpc3RhbmNlX2luX3dvcmRzX2xvY2FsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL2VuL2J1aWxkX2Zvcm1hdF9sb2NhbGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9lbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvcGFyc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL3N0YXJ0X29mX2RheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvc3RhcnRfb2ZfaXNvX3dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL3N0YXJ0X29mX2lzb195ZWFyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdGFydF9vZl93ZWVrL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdGFydF9vZl95ZWFyL2luZGV4LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwid2luZG93IiwiZGYiLCJ3b3JrZ3JvdXAiLCJHbG9iYWxWYXJzIiwiaXNMb2FkZWQiLCJpbmZvRGF0YSIsInRpbWVfbm93IiwicGFyYW1zIiwibGFiIiwiVXRpbCIsImdldFBhcmFtcyIsIlByZXNldCIsImpzb25fdXJsIiwiZGVmYXVsdCIsImRlZmF1bHRfbG9jYWwiLCJsb2dpbiIsImNoZWNraW4iLCJjaGVja291dCIsImxvZ291dCIsInN0YXJ0Iiwic3RvcCIsImRvY3VtZW50X3VybCIsImFwcHJvdmFsIiwiYXBwcm92YWxfbXkiLCJhcHByb3ZhbF9jYyIsIm1haW5fdXJsIiwiZXZlbnRUeXBlIiwiT05fTE9BRF9KU09OIiwiT05fTE9HSU4iLCJPTl9DSEVDS0lOIiwiT05fQ0hFQ0tPVVQiLCJPTl9MT0dPVVQiLCJPTl9DSEFOR0VfU1RBR0VfSU5GTyIsIk9OX0VSUk9SIiwiT05fV0FSTklORyIsIk9OX0NMT1NFX01PREFMIiwiT05fU1RBUlQiLCJPTl9TVE9QIiwiY2xhc3NfbmFtZSIsInNob3dJbiIsImhpZGVPdXQiLCJyZWxhdGVkX3NpdGUiLCJ0aXRsZSIsInVybCIsInRodW1iIiwiaXNCZ1Rlc3QiLCJkYXRlX2Zvcm1hdCIsImlzRGF0ZSIsImtvTG9jYWxlIiwibm93X2RhdGUiLCJfZ2V0SXNEYXRlIiwiZGF0ZSIsImxvYWRfanNvbiIsIm1ldGhvZCIsImNhbGxiYWNrIiwiJGRhdGEiLCJEYXRlIiwiY29uc29sZSIsImxvZyIsImRhdGEiLCJKU09OIiwic3RyaW5naWZ5IiwiYWN0aW9uIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwic2V0UmVxdWVzdEhlYWRlciIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsIm9ubG9hZGVuZCIsInJlc3BvbnNlIiwidGFyZ2V0Iiwic3RhdHVzIiwiZ2V0VGltZSIsInBhcnNlIiwicmVzcG9uc2VUZXh0Iiwic2V0VGltZW91dCIsInNlbmQiLCJhZGRaZXJvTnVtYmVyIiwibnVtIiwiYWRkUGFyYW1VbmlxIiwiaW5kZXhPZiIsImdldERhdGVfZm9ybWF0IiwiZm9ybWF0IiwibG9jYWxlIiwiZ2V0SXNEYXRlIiwiQ3VzdG9tRXZlbnQiLCJldmVudCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiZGV0YWlsIiwidW5kZWZpbmVkIiwiZXZ0IiwiZG9jdW1lbnQiLCJjcmVhdGVFdmVudCIsImluaXRDdXN0b21FdmVudCIsIkV2ZW50IiwiTG9hZEluZm9EYXRhIiwiQ0xBU1NfTkFNRSIsInVybF9qc29uIiwib25Mb2FkIiwiYWN0dWFsX0pTT04iLCJpc0xvZ2dlZEluIiwianNvbl9kYXRhIiwidXNlciIsImVsX2h0bWwiLCJxdWVyeVNlbGVjdG9yIiwiaXNEZXNrdG9wIiwiaGFzQ2xhc3MiLCJEZXRlY3RpenIiLCJkZXZpY2UiLCJ0eXBlIiwiaXNBZG1pbkFjY291bnQiLCJkaXNwYXRjaEV2ZW50IiwiX2Rpc3BhdGNoT25Mb2FkIiwib25Mb2FkSnNvbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpbml0IiwibG9jYXRpb24iLCJob3N0bmFtZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJsb2FkSlNPTiIsInN0YXJ0T2ZEYXkiLCJNSUxMSVNFQ09ORFNfSU5fTUlOVVRFIiwiTUlMTElTRUNPTkRTX0lOX0RBWSIsImRpcnR5RGF0ZUxlZnQiLCJkaXJ0eURhdGVSaWdodCIsInN0YXJ0T2ZEYXlMZWZ0Iiwic3RhcnRPZkRheVJpZ2h0IiwidGltZXN0YW1wTGVmdCIsImdldFRpbWV6b25lT2Zmc2V0IiwidGltZXN0YW1wUmlnaHQiLCJNYXRoIiwicm91bmQiLCJnZXREYXlPZlllYXIiLCJnZXRJU09XZWVrIiwiZ2V0SVNPWWVhciIsImlzVmFsaWQiLCJlbkxvY2FsZSIsImZvcm1hdHRlcnMiLCJNIiwiZ2V0TW9udGgiLCJNTSIsImFkZExlYWRpbmdaZXJvcyIsIlEiLCJjZWlsIiwiRCIsImdldERhdGUiLCJERCIsIkRERCIsIkREREQiLCJnZXREYXkiLCJFIiwiVyIsIldXIiwiWVkiLCJnZXRGdWxsWWVhciIsInN1YnN0ciIsIllZWVkiLCJHRyIsIlN0cmluZyIsIkdHR0ciLCJIIiwiZ2V0SG91cnMiLCJISCIsImgiLCJob3VycyIsImhoIiwiZ2V0TWludXRlcyIsIm1tIiwiZ2V0U2Vjb25kcyIsInNzIiwiUyIsImZsb29yIiwiZ2V0TWlsbGlzZWNvbmRzIiwiU1MiLCJTU1MiLCJaIiwiZm9ybWF0VGltZXpvbmUiLCJaWiIsIlgiLCJ4IiwicmVtb3ZlRm9ybWF0dGluZ1Rva2VucyIsImlucHV0IiwibWF0Y2giLCJyZXBsYWNlIiwib2Zmc2V0IiwiZGVsaW1ldGVyIiwic2lnbiIsImFic09mZnNldCIsImFicyIsIm1pbnV0ZXMiLCJudW1iZXIiLCJ0YXJnZXRMZW5ndGgiLCJvdXRwdXQiLCJ0b1N0cmluZyIsImxlbmd0aCIsImRpcnR5RGF0ZSIsImRpcnR5Rm9ybWF0U3RyIiwiZGlydHlPcHRpb25zIiwiZm9ybWF0U3RyIiwibG9jYWxlRm9ybWF0dGVycyIsImZvcm1hdHRpbmdUb2tlbnNSZWdFeHAiLCJmb3JtYXR0ZXIiLCJhcnJheSIsIkZ1bmN0aW9uIiwiYnVpbGRGb3JtYXRGbiIsImZvcm1hdEZuIiwic3RhcnRPZlllYXIiLCJkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMiLCJzdGFydE9mSVNPV2VlayIsInN0YXJ0T2ZJU09ZZWFyIiwiTUlMTElTRUNPTkRTX0lOX1dFRUsiLCJkaWZmIiwieWVhciIsImZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIiLCJzZXRGdWxsWWVhciIsInNldEhvdXJzIiwic3RhcnRPZk5leHRZZWFyIiwiZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhciIsInN0YXJ0T2ZUaGlzWWVhciIsImFyZ3VtZW50IiwiaXNOYU4iLCJUeXBlRXJyb3IiLCJjb21tb25Gb3JtYXR0ZXJLZXlzIiwiZm9ybWF0dGVyS2V5cyIsInB1c2giLCJmb3JtYXR0aW5nVG9rZW5zIiwiY29uY2F0Iiwic29ydCIsInJldmVyc2UiLCJSZWdFeHAiLCJqb2luIiwiZGlzdGFuY2VJbldvcmRzTG9jYWxlIiwibGVzc1RoYW5YU2Vjb25kcyIsIm9uZSIsIm90aGVyIiwieFNlY29uZHMiLCJoYWxmQU1pbnV0ZSIsImxlc3NUaGFuWE1pbnV0ZXMiLCJ4TWludXRlcyIsImFib3V0WEhvdXJzIiwieEhvdXJzIiwieERheXMiLCJhYm91dFhNb250aHMiLCJ4TW9udGhzIiwiYWJvdXRYWWVhcnMiLCJ4WWVhcnMiLCJvdmVyWFllYXJzIiwiYWxtb3N0WFllYXJzIiwibG9jYWxpemUiLCJ0b2tlbiIsImNvdW50Iiwib3B0aW9ucyIsInJlc3VsdCIsImFkZFN1ZmZpeCIsImNvbXBhcmlzb24iLCJidWlsZEZvcm1hdHRpbmdUb2tlbnNSZWdFeHAiLCJtb250aHMzY2hhciIsIm1vbnRoc0Z1bGwiLCJ3ZWVrZGF5czJjaGFyIiwid2Vla2RheXMzY2hhciIsIndlZWtkYXlzRnVsbCIsIm1lcmlkaWVtVXBwZXJjYXNlIiwibWVyaWRpZW1Mb3dlcmNhc2UiLCJtZXJpZGllbUZ1bGwiLCJNTU0iLCJNTU1NIiwiZGQiLCJkZGQiLCJkZGRkIiwiQSIsImEiLCJhYSIsImZvckVhY2giLCJmb3JtYXR0ZXJUb2tlbiIsInJlbTEwMCIsIm9yZGluYWwiLCJidWlsZERpc3RhbmNlSW5Xb3Jkc0xvY2FsZSIsImJ1aWxkRm9ybWF0TG9jYWxlIiwiZGlzdGFuY2VJbldvcmRzIiwiTUlMTElTRUNPTkRTX0lOX0hPVVIiLCJERUZBVUxUX0FERElUSU9OQUxfRElHSVRTIiwicGFyc2VUb2tlbkRhdGVUaW1lRGVsaW1ldGVyIiwicGFyc2VUb2tlblBsYWluVGltZSIsInBhcnNlVG9rZW5ZWSIsInBhcnNlVG9rZW5zWVlZIiwicGFyc2VUb2tlbllZWVkiLCJwYXJzZVRva2Vuc1lZWVlZIiwicGFyc2VUb2tlbk1NIiwicGFyc2VUb2tlbkRERCIsInBhcnNlVG9rZW5NTUREIiwicGFyc2VUb2tlbld3dyIsInBhcnNlVG9rZW5Xd3dEIiwicGFyc2VUb2tlbkhIIiwicGFyc2VUb2tlbkhITU0iLCJwYXJzZVRva2VuSEhNTVNTIiwicGFyc2VUb2tlblRpbWV6b25lIiwicGFyc2VUb2tlblRpbWV6b25lWiIsInBhcnNlVG9rZW5UaW1lem9uZUhIIiwicGFyc2VUb2tlblRpbWV6b25lSEhNTSIsImRheU9mSVNPWWVhciIsImlzb1llYXIiLCJ3ZWVrIiwiZGF5Iiwic2V0VVRDRnVsbFllYXIiLCJnZXRVVENEYXkiLCJzZXRVVENEYXRlIiwiZ2V0VVRDRGF0ZSIsImFkZGl0aW9uYWxEaWdpdHMiLCJOdW1iZXIiLCJkYXRlU3RyaW5ncyIsImRhdGVTdHJpbmciLCJ0aW1lU3RyaW5nIiwic3BsaXQiLCJ0ZXN0IiwiZXhlYyIsInRpbWUiLCJ0aW1lem9uZSIsInNwbGl0RGF0ZVN0cmluZyIsInBhcnNlWWVhclJlc3VsdCIsInBhcnNlVG9rZW5ZWVkiLCJwYXJzZVRva2VuWVlZWVkiLCJ5ZWFyU3RyaW5nIiwicGFyc2VJbnQiLCJyZXN0RGF0ZVN0cmluZyIsInNsaWNlIiwiY2VudHVyeVN0cmluZyIsInBhcnNlWWVhciIsIm1vbnRoIiwiZGF5T2ZZZWFyIiwiZGF5T2ZXZWVrIiwicGFyc2VEYXRlIiwidGltZXN0YW1wIiwicGFyc2VGbG9hdCIsInNlY29uZHMiLCJwYXJzZVRpbWUiLCJ0aW1lem9uZVN0cmluZyIsImFic29sdXRlT2Zmc2V0IiwicGFyc2VUaW1lem9uZSIsInN0YXJ0T2ZXZWVrIiwid2Vla1N0YXJ0c09uIiwiZm91cnRoT2ZKYW51YXJ5Iiwic2V0RGF0ZSIsImNsZWFuRGF0ZSJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEdBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDWixFQUFBa0IsRUFBQSxTQUFBaEIsR0FDQSxvQkFBQWlCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUFiLEVBQUFpQixPQUFBQyxhQUF3REMs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QXJDLEVBQUFxQyxFQUlBLE9BRkFqUyxFQUFBbVMsUUFBQW5TLEVBQUErRixVQUFBa0UsR0FDQWpLLEVBQUFxSyxTQUFBLFNBQ0FySzs7Ozs4Q0NsQ0EsSUFBQXNCLEVBQUE3RywwQkFBQSwwQ0EwQkFHLEVBQUFELFFBUkEsU0FBQXNPLEdBQ0EsSUFBQW1KLEVBQUE5USxFQUFBMkgsR0FDQWpKLEVBQUEsSUFBQUssS0FBQSxHQUdBLE9BRkFMLEVBQUFvSyxZQUFBZ0ksRUFBQTVMLGNBQUEsS0FDQXhHLEVBQUFxSyxTQUFBLFNBQ0FySyIsImZpbGUiOiJkZi53b3JrZ3JvdXAubG9naW4uY29tbW9uLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsIndpbmRvdy5kZiA9IHdpbmRvdy5kZiB8fCB7fTtcclxud2luZG93LmRmLndvcmtncm91cCA9IHdpbmRvdy5kZi53b3JrZ3JvdXAgfHwge307XHJcblxyXG53aW5kb3cuZGYud29ya2dyb3VwLkdsb2JhbFZhcnMgPSB7XHJcbiAgICBcImlzTG9hZGVkXCI6IGZhbHNlLFxyXG4gICAgXCJpbmZvRGF0YVwiOiBudWxsLFxyXG4gICAgXCJ0aW1lX25vd1wiOiAwLFxyXG4gICAgXCJwYXJhbXNcIjogZGYubGFiLlV0aWwuZ2V0UGFyYW1zKClcclxufTsiLCJ3aW5kb3cuZGYgPSB3aW5kb3cuZGYgfHwge307XHJcbndpbmRvdy5kZi53b3JrZ3JvdXAgPSB3aW5kb3cuZGYud29ya2dyb3VwIHx8IHt9O1xyXG5cclxud2luZG93LmRmLndvcmtncm91cC5QcmVzZXQgPSB7XHJcblxyXG4gICAgXCJqc29uX3VybFwiOiB7XHJcblxyXG4gICAgICAgIFwiZGVmYXVsdFwiOiBcIi9qc29uL2RmX2luZm9fZGF0YS5qc29uLnBocFwiLFxyXG4gICAgICAgIFwiZGVmYXVsdF9sb2NhbFwiOiBcImFzc2V0c19sb2dpbi90ZW1wL2RmX2luZm9fZGF0YS5qc29uXCIsXHJcblxyXG4gICAgICAgIFwibG9naW5cIjogXCJhc3NldHNfbG9naW4vdGVtcC9kZl9pbmZvX2RhdGFfMDFfbG9naW4uanNvblwiLFxyXG4gICAgICAgIFwiY2hlY2tpblwiOiBcImFzc2V0c19sb2dpbi90ZW1wL2RmX2luZm9fZGF0YV8wMl9jaGVja2luLmpzb25cIixcclxuICAgICAgICBcImNoZWNrb3V0XCI6IFwiYXNzZXRzX2xvZ2luL3RlbXAvZGZfaW5mb19kYXRhXzAzX2NoZWNrb3V0Lmpzb25cIixcclxuICAgICAgICBcImxvZ291dFwiOiBcImFzc2V0c19sb2dpbi90ZW1wL2RmX2luZm9fZGF0YV8wNF9sb2dvdXQuanNvblwiLFxyXG4gICAgICAgIFwic3RhcnRcIjogXCJhc3NldHNfbG9naW4vdGVtcC9kZl9pbmZvX2RhdGFfMDVfc3RhcnRfd29yay5qc29uXCIsXHJcbiAgICAgICAgXCJzdG9wXCI6IFwiYXNzZXRzX2xvZ2luL3RlbXAvZGZfaW5mb19kYXRhXzA2X3N0b3Bfd29yay5qc29uXCJcclxuICAgIH0sXHJcblxyXG4gICAgXCJkb2N1bWVudF91cmxcIjoge1xyXG4gICAgICAgIFwiYXBwcm92YWxcIjogXCJhcHByb3ZhbC9hcHByb3ZhbF90b19saXN0LnBocFwiLFxyXG4gICAgICAgIFwiYXBwcm92YWxfbXlcIjogXCJhcHByb3ZhbC9hcHByb3ZhbF9teV9saXN0LnBocFwiLFxyXG4gICAgICAgIFwiYXBwcm92YWxfY2NcIjogXCJhcHByb3ZhbC9hcHByb3ZhbF9jY19saXN0LnBocFwiXHJcbiAgICB9LFxyXG5cclxuICAgIFwibWFpbl91cmxcIjogXCJtYWluLnBocFwiLFxyXG5cclxuICAgIFwiZXZlbnRUeXBlXCI6IHtcclxuICAgICAgICBcIk9OX0xPQURfSlNPTlwiOiBcIm9uTG9hZEpzb25cIixcclxuICAgICAgICBcIk9OX0xPR0lOXCI6IFwib25Mb2dpblwiLFxyXG4gICAgICAgIFwiT05fQ0hFQ0tJTlwiOiBcIm9uQ2hlY2tpblwiLFxyXG4gICAgICAgIFwiT05fQ0hFQ0tPVVRcIjogXCJvbkNoZWNrb3V0XCIsXHJcbiAgICAgICAgXCJPTl9MT0dPVVRcIjogXCJvbkxvZ291dFwiLFxyXG4gICAgICAgIFwiT05fQ0hBTkdFX1NUQUdFX0lORk9cIjogXCJvbkNoYW5nZVN0YWdlSW5mb1wiLFxyXG4gICAgICAgIFwiT05fRVJST1JcIjogXCJvbkVycm9yXCIsXHJcbiAgICAgICAgXCJPTl9XQVJOSU5HXCI6IFwib25XYXJuaW5nXCIsXHJcbiAgICAgICAgXCJPTl9DTE9TRV9NT0RBTFwiOiBcIm9uQ2xvc2VNb2RhbFwiLFxyXG4gICAgICAgIFwiT05fU1RBUlRcIiA6IFwib25TdGFydFwiLFxyXG4gICAgICAgIFwiT05fU1RPUFwiIDogXCJvblN0b3BcIlxyXG4gICAgfSxcclxuXHJcbiAgICBcImNsYXNzX25hbWVcIjoge1xyXG4gICAgICAgIFwic2hvd0luXCI6IFwic2hvdy1pblwiLFxyXG4gICAgICAgIFwiaGlkZU91dFwiOiBcImhpZGUtb3V0XCJcclxuICAgIH0sXHJcblxyXG4gICAgXCJyZWxhdGVkX3NpdGVcIjogW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJ0aXRsZVwiOiBcImRlc2lnbmZldmVyLmNvbVwiLFxyXG4gICAgICAgICAgICBcInVybFwiOiBcImh0dHA6Ly9kZXNpZ25mZXZlci5jb20vXCIsXHJcbiAgICAgICAgICAgIFwidGh1bWJcIjogXCJ0aHVtYl9tYWlsLmpwZ18yMDB4MjAwXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkZhY2Vib29rXCIsXHJcbiAgICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL2ZldmVyYm9va1wiLFxyXG4gICAgICAgICAgICBcInRodW1iXCI6IFwidGh1bWJfbWFpbC5qcGdfMjAweDIwMFwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwidGl0bGVcIjogXCJUd2l0dGVyXCIsXHJcbiAgICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly90d2l0dGVyLmNvbS9kZXNpZ25mZXZlcl9rclwiLFxyXG4gICAgICAgICAgICBcInRodW1iXCI6IFwidGh1bWJfbWFpbC5qcGdfMjAweDIwMFwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwidGl0bGVcIjogXCJCbG9nXCIsXHJcbiAgICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9ibG9nLm5hdmVyLmNvbS9kZXNpZ25fZmV2ZXJcIixcclxuICAgICAgICAgICAgXCJ0aHVtYlwiOiBcInRodW1iX21haWwuanBnXzIwMHgyMDBcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcInRpdGxlXCI6IFwiREYgTWFpbFwiLFxyXG4gICAgICAgICAgICBcInVybFwiOiBcImh0dHA6Ly9tYWlsLmRlc2lnbmZldmVyLmNvbS9cIixcclxuICAgICAgICAgICAgXCJ0aHVtYlwiOiBcInRodW1iX21haWwuanBnXzIwMHgyMDBcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcInRpdGxlXCI6IFwiREYgTGFiXCIsXHJcbiAgICAgICAgICAgIFwidXJsXCI6IFwiaHR0cDovL2Rldi5kZXNpZ25mZXZlci5jb20vbGFiL1wiLFxyXG4gICAgICAgICAgICBcInRodW1iXCI6IFwidGh1bWJfbWFpbC5qcGdfMjAweDIwMFwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwidGl0bGVcIjogXCJZb3V0dWJlXCIsXHJcbiAgICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vdXNlci9kZXNpZ25mZXZlcmRhXCIsXHJcbiAgICAgICAgICAgIFwidGh1bWJcIjogXCJ0aHVtYl9tYWlsLmpwZ18yMDB4MjAwXCJcclxuICAgICAgICB9XHJcbiAgICBdLFxyXG4gICAgXCJpc0JnVGVzdFwiOiBmYWxzZVxyXG59O1xyXG4iLCJ2YXIgZGF0ZV9mb3JtYXQgPSByZXF1aXJlKCAnLi4vYnVuZGxlci9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZm9ybWF0Jyk7XHJcbnZhciBpc0RhdGUgPSByZXF1aXJlKCcuLi9idW5kbGVyL25vZGVfbW9kdWxlcy9kYXRlLWZucy9pc19kYXRlJyk7XHJcbnZhciBrb0xvY2FsZSA9IHJlcXVpcmUoJy4uL2J1bmRsZXIvbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9lbicpO1xyXG5cclxud2luZG93LmRmID0gd2luZG93LmRmIHx8IHt9O1xyXG53aW5kb3cuZGYud29ya2dyb3VwID0gd2luZG93LmRmLndvcmtncm91cCB8fCB7fTtcclxuXHJcbndpbmRvdy5kZi53b3JrZ3JvdXAuVXRpbCA9IChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgdmFyIG5vd19kYXRlO1xyXG5cclxuICAgIGZ1bmN0aW9uIGxvYWRfanNvbih1cmwsIG1ldGhvZCwgY2FsbGJhY2ssICRkYXRhKSB7XHJcblxyXG4gICAgICAgIG5vd19kYXRlID0gbmV3IERhdGUoKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIlxcbi0tLS0tIDw8IFNUQVJUIExPQUQgPj4geGhyLnVybCA6IFwiLCB1cmwsIFwiXFxuXCIpO1xyXG5cclxuICAgICAgICB2YXIgZGF0YSA9ICRkYXRhID8gSlNPTi5zdHJpbmdpZnkoJGRhdGEpIDogbnVsbDtcclxuXHJcbiAgICAgICAgdmFyIHBhcmFtcyA9IHtcclxuICAgICAgICAgICAgbWV0aG9kOiBtZXRob2QsXHJcbiAgICAgICAgICAgIGFjdGlvbjogdXJsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gQ29uc3RydWN0IGFuIEhUVFAgcmVxdWVzdFxyXG4gICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgICAgICB4aHIub3BlbihwYXJhbXMubWV0aG9kLCBwYXJhbXMuYWN0aW9uLCB0cnVlKTtcclxuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpO1xyXG4gICAgICAgIC8veGhyLnNldFJlcXVlc3RIZWFkZXIoJ0FjY2VwdCcsICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PVVURi04Jyk7XHJcbiAgICAgICAgLy94aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9VVRGLTgnKTtcclxuXHJcbiAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcInhoci5yZWFkeVN0YXRlIDogXCIsIHhoci5yZWFkeVN0YXRlKTtcclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcInhoci5zdGF0dXMgOiBcIiwgeGhyLnN0YXR1cyk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gQ2FsbGJhY2sgZnVuY3Rpb25cclxuICAgICAgICB4aHIub25sb2FkZW5kID0gZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcblxyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwieGhyLm9ubG9hZGVuZCA6IFwiICwgcmVzcG9uc2UpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnRhcmdldC5zdGF0dXMgPT09IDApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBGYWlsZWQgWG1sSHR0cFJlcXVlc3Qgc2hvdWxkIGJlIGNvbnNpZGVyZWQgYW4gdW5kZWZpbmVkIGVycm9yLlxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJ4aHIub25sb2FkZW5kIChGYWlsZWQpIDogXCIsIHhocik7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLnRhcmdldC5zdGF0dXMgPT09IDQwMCkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEJhZCBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInhoci5vbmxvYWRlbmQgKEJhZCBSZXF1ZXN0KSA6IFwiLCB4aHIpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLnRhcmdldC5zdGF0dXMgPT09IDQwNCkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEJhZCBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInhoci5vbmxvYWRlbmQgKDQwNCBOb3QgRm91bmQpIDogXCIsIHhocik7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLnRhcmdldC5zdGF0dXMgPT09IDIwMCkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFN1Y2Nlc3NcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiXFxuLS0tLS0gPDwgQ09NUCBMT0FEID4+IC0tLS0tIHhoci5vbmxvYWRlbmQgKFN1Y2Nlc3MpIGR1cmF0aW9uIDogXCIsICgoKG5ldyBEYXRlKCkpLmdldFRpbWUoKSAtIG5vd19kYXRlLmdldFRpbWUoKSkgLyAxMDAwKSArIFwic2VjXFxuXFxuXCIpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJ4aHIub25sb2FkZW5kIChTdWNjZXNzKSByZXNwb25zZSA6IFxcblwiLCByZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInhoci5vbmxvYWRlbmQgKFN1Y2Nlc3MpIHJlc3BvbnNlVGV4dChKU09OKSA6IFxcblwiLCBKU09OLnBhcnNlKHJlc3BvbnNlLnRhcmdldC5yZXNwb25zZVRleHQpKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiXFxuLS0tLS0gPDwgQ09NUCBMT0FEID4+IC0tLS0tXFxuXFxuXCIpO1xyXG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcInhoci5vbmxvYWRlbmQgKFN1Y2Nlc3MpIHhociA6IFwiICwgeGhyKTtcclxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJ4aHIub25sb2FkZW5kIChTdWNjZXNzKSByZXNwb25zZS50YXJnZXQucmVzcG9uc2VUZXh0IDogXCIgLCBKU09OLnBhcnNlKHJlc3BvbnNlLnRhcmdldC5yZXNwb25zZVRleHQpKTtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgIH0sIDEwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gU2VuZCB0aGUgY29sbGVjdGVkIGRhdGEgYXMgSlNPTlxyXG4gICAgICAgIHhoci5zZW5kKGRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGFkZFplcm9OdW1iZXIobnVtKSB7XHJcblxyXG4gICAgICAgIHZhciBzdHJfbnVtID0gXCJcIjtcclxuICAgICAgICBpZiAobnVtIDwgMTApIHN0cl9udW0gPSBcIjBcIiArIG51bTtcclxuICAgICAgICBlbHNlIHN0cl9udW0gPSBcIlwiICsgbnVtO1xyXG4gICAgICAgIHJldHVybiBzdHJfbnVtO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGFkZFBhcmFtVW5pcSh1cmwpIHtcclxuXHJcbiAgICAgICAgaWYgKHVybC5pbmRleE9mKCc/JykgPT0gLTEpIHtcclxuICAgICAgICAgICAgdXJsID0gdXJsICsgXCI/dW5pcT1cIiArIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHVybCA9IHVybCArIFwiJnVuaXE9XCIgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHVybDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfZ2V0RGF0ZV9mb3JtYXQoZGF0ZSwgZm9ybWF0KXtcclxuXHJcbiAgICAgICAgLy8gdmFyIE1NX1MgPSBbJ0pBTicsICdGRUInLCAnTUFSJywgJ0FQUicsICdNQVknLCAnSlVOJywgJ0pVTCcsICdBVUcnLCAnU0VQJywgJ09DVCcsICdOT1YnLCAnREVDJ107XHJcbiAgICAgICAgLy8gdmFyIE1NID0gWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5ICcsICdNYXJjaCAnLCAnQXByaWwnLCAnTWF5JywgJ0p1bmUnLCAnSnVseScsICdBdWd1c3QnLCAnU2VwdGVtYmVyJywgJ09jdG9iZXInLCAnTm92ZW1iZXInLCAnRGVjZW1iZXInXTtcclxuICAgICAgICAvLyB2YXIgRFcgPSBbJ1N1bmRheScsICdNb25kYXknLCAnVHVlc2RheScsICdXZWRuZXNkYXknLCAnVGh1cnNkYXknLCAnRnJpZGF5JywgJ1NhdHVyZGF5J107XHJcblxyXG4gICAgICAgIC8vIGh0dHBzOi8vZGF0ZS1mbnMub3JnL3YxLjI5LjAvZG9jcy9mb3JtYXRcclxuICAgICAgICBpZihfZ2V0SXNEYXRlKGRhdGUpKSByZXR1cm4gZGF0ZV9mb3JtYXQoZGF0ZSwgZm9ybWF0LFxyXG4gICAgICAgICAgICB7bG9jYWxlOiBrb0xvY2FsZX0pO1xyXG4gICAgICAgIGVsc2UgcmV0dXJuIFwiWFhYWFhYWFhYWFhcIjtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfZ2V0SXNEYXRlKGRhdGUpe1xyXG4gICAgICAgIHJldHVybiBpc0RhdGUoZGF0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBsb2FkX2pzb246IGxvYWRfanNvbixcclxuICAgICAgICBhZGRaZXJvTnVtYmVyOiBhZGRaZXJvTnVtYmVyLFxyXG4gICAgICAgIGFkZFBhcmFtVW5pcTogYWRkUGFyYW1VbmlxLFxyXG4gICAgICAgIGdldERhdGVfZm9ybWF0OiBfZ2V0RGF0ZV9mb3JtYXQsXHJcbiAgICAgICAgZ2V0SXNEYXRlOiBfZ2V0SXNEYXRlXHJcbiAgICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAodHlwZW9mIHdpbmRvdy5DdXN0b21FdmVudCA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gZmFsc2U7IC8vSWYgbm90IElFXHJcblxyXG4gICAgZnVuY3Rpb24gQ3VzdG9tRXZlbnQoZXZlbnQsIHBhcmFtcykge1xyXG4gICAgICAgIHBhcmFtcyA9IHBhcmFtcyB8fCB7YnViYmxlczogZmFsc2UsIGNhbmNlbGFibGU6IGZhbHNlLCBkZXRhaWw6IHVuZGVmaW5lZH07XHJcbiAgICAgICAgdmFyIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xyXG4gICAgICAgIGV2dC5pbml0Q3VzdG9tRXZlbnQoZXZlbnQsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuY2FuY2VsYWJsZSwgcGFyYW1zLmRldGFpbCk7XHJcbiAgICAgICAgcmV0dXJuIGV2dDtcclxuICAgIH1cclxuXHJcbiAgICBDdXN0b21FdmVudC5wcm90b3R5cGUgPSB3aW5kb3cuRXZlbnQucHJvdG90eXBlO1xyXG5cclxuICAgIHdpbmRvdy5DdXN0b21FdmVudCA9IEN1c3RvbUV2ZW50O1xyXG59KSgpO1xyXG5cclxud2luZG93LmRmID0gd2luZG93LmRmIHx8IHt9O1xyXG53aW5kb3cuZGYud29ya2dyb3VwID0gd2luZG93LmRmLndvcmtncm91cCB8fCB7fTtcclxud2luZG93LmRmLndvcmtncm91cC5sb2dpbiA9IHdpbmRvdy5kZi53b3JrZ3JvdXAubG9naW4gfHwge307XHJcblxyXG53aW5kb3cuZGYud29ya2dyb3VwLmxvZ2luLkxvYWRJbmZvRGF0YSA9IChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgdmFyIENMQVNTX05BTUUgPSBcIlsgTG9hZEluZm9EYXRhIF1cIjtcclxuICAgIHZhciB1cmxfanNvbiA9IFwiXCI7XHJcblxyXG4gICAgZnVuY3Rpb24gaW5pdCgpIHtcclxuXHJcbiAgICAgICAgdmFyIF9pc0xvY2FsaG9zdCA9IGZhbHNlO1xyXG4gICAgICAgIGlmICh3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgPT09IFwibG9jYWxob3N0XCIgfHwgd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lID09PSBcIjEyNy4wLjAuMVwiKSB7XHJcbiAgICAgICAgICAgIF9pc0xvY2FsaG9zdCA9IHRydWU7XHJcbiAgICAgICAgICAgIHVybF9qc29uID0gd2luZG93LmRmLndvcmtncm91cC5QcmVzZXQuanNvbl91cmwuZGVmYXVsdF9sb2NhbDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBfaXNMb2NhbGhvc3QgPSBmYWxzZTtcclxuICAgICAgICAgICAgdXJsX2pzb24gPSB3aW5kb3cuZGYud29ya2dyb3VwLlByZXNldC5qc29uX3VybC5kZWZhdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhDTEFTU19OQU1FICsgXCIgX2lzTG9jYWxob3N0IDogXCIsIF9pc0xvY2FsaG9zdCArIFwiIC8ganNvbl91cmwgOiBcIiwgdXJsX2pzb24pO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKENMQVNTX05BTUUsIFwiIGxvYWQgZGVmYXVsdCBqc29uIGRhdGFcIik7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3cuZGYud29ya2dyb3VwLlByZXNldC5ldmVudFR5cGUuT05fTE9BRF9KU09OLCBvbkxvYWRKc29uKTtcclxuICAgICAgICBsb2FkSlNPTih1cmxfanNvbiwgb25Mb2FkKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBsb2FkSlNPTih1cmwsIGNhbGxiYWNrKSB7XHJcblxyXG4gICAgICAgIHZhciBwYXJhbXMgPSB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgICAgICAgYWN0aW9uOiBkZi53b3JrZ3JvdXAuVXRpbC5hZGRQYXJhbVVuaXEodXJsKVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGRmLndvcmtncm91cC5VdGlsLmxvYWRfanNvbihwYXJhbXMuYWN0aW9uLCBwYXJhbXMubWV0aG9kLCBjYWxsYmFjaywgbnVsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gb25Mb2FkKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgdmFyIGFjdHVhbF9KU09OID0gSlNPTi5wYXJzZShyZXNwb25zZS50YXJnZXQucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICB3aW5kb3cuZGYud29ya2dyb3VwLkdsb2JhbFZhcnMuaXNMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgIHdpbmRvdy5kZi53b3JrZ3JvdXAuR2xvYmFsVmFycy5pbmZvRGF0YSA9IGFjdHVhbF9KU09OO1xyXG5cclxuXHJcbiAgICAgICAgdmFyIGlzTG9nZ2VkSW4gPSBmYWxzZTtcclxuICAgICAgICB2YXIganNvbl9kYXRhID0gd2luZG93LmRmLndvcmtncm91cC5HbG9iYWxWYXJzLmluZm9EYXRhO1xyXG4gICAgICAgIGlmIChqc29uX2RhdGEudXNlciAhPSB1bmRlZmluZWQgJiZcclxuICAgICAgICAgICAganNvbl9kYXRhLnVzZXIuaXNMb2dnZWRJbiAhPSB1bmRlZmluZWQpIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChqc29uX2RhdGEudXNlci5pc0xvZ2dlZEluIHx8IGpzb25fZGF0YS51c2VyLmlzTG9nZ2VkSW4gPT0gXCJ0cnVlXCIpIHtcclxuICAgICAgICAgICAgICAgIGlzTG9nZ2VkSW4gPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBpZiBpcyBkZXNrdG9wXHJcblxyXG4gICAgICAgIHZhciBlbF9odG1sID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaHRtbCcpO1xyXG4gICAgICAgIHZhciBpc0Rlc2t0b3AgPSB3aW5kb3cuZGYubGFiLlV0aWwuaGFzQ2xhc3MoZWxfaHRtbCwgJ2Rlc2t0b3AnKTtcclxuXHJcbiAgICAgICAgaWYgKGlzTG9nZ2VkSW4pIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChpc0Rlc2t0b3AgJiYgRGV0ZWN0aXpyLmRldmljZS50eXBlID09IFwiZGVza3RvcFwiKSB7XHJcbiAgICAgICAgICAgICAgICAvL3JlZGlyZWN0VG9NYWluKCk7XHJcbiAgICAgICAgICAgICAgICAvL3JldHVybjtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoanNvbl9kYXRhLnVzZXIuaXNBZG1pbkFjY291bnQpIHtcclxuICAgICAgICAgICAgICAgIC8vcmVkaXJlY3RUb01haW4oKTtcclxuICAgICAgICAgICAgICAgIC8vcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBlbHNlIC1cclxuXHJcbiAgICAgICAgX2Rpc3BhdGNoT25Mb2FkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmVkaXJlY3RUb01haW4oKSB7XHJcblxyXG4gICAgICAgIHZhciB1cmwgPSBcIlwiO1xyXG4gICAgICAgIHZhciBqc29uX2RhdGEgPSB3aW5kb3cuZGYud29ya2dyb3VwLkdsb2JhbFZhcnMuaW5mb0RhdGE7XHJcbiAgICAgICAgaWYgKGpzb25fZGF0YS5wcmVzZXQgIT0gdW5kZWZpbmVkICYmXHJcbiAgICAgICAgICAgIGpzb25fZGF0YS5wcmVzZXQubWFpbl91cmwgIT0gdW5kZWZpbmVkKSB7XHJcblxyXG4gICAgICAgICAgICB1cmwgPSBqc29uX2RhdGEucHJlc2V0Lm1haW5fdXJsO1xyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKENMQVNTX05BTUUgKyBcIiBnbyB0byBtYWluIHVybCAoZ2V0IHNlcnZlcikgOiBcIiwgdXJsKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB1cmwgPSB3aW5kb3cuZGYud29ya2dyb3VwLlByZXNldC5tYWluX3VybDtcclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhDTEFTU19OQU1FICsgXCIgZ28gdG8gbWFpbiB1cmwgKGdldCBsb2NhbCkgOiBcIiwgdXJsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS5sb2coQ0xBU1NfTkFNRSArIFwiIGdvIHRvIG1haW4gdXJsIDogXCIsIHVybCk7XHJcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSB1cmw7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9kaXNwYXRjaE9uTG9hZCgpIHtcclxuICAgICAgICB2YXIgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQod2luZG93LmRmLndvcmtncm91cC5QcmVzZXQuZXZlbnRUeXBlLk9OX0xPQURfSlNPTik7XHJcbiAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gb25Mb2FkSnNvbigpIHtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKENMQVNTX05BTUUgKyBcIiBvbkxvYWRKc29uIC0gXCIgLCB3aW5kb3cuZGYud29ya2dyb3VwLkdsb2JhbFZhcnMuaW5mb0RhdGEpO1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIod2luZG93LmRmLndvcmtncm91cC5QcmVzZXQuZXZlbnRUeXBlLk9OX0xPQURfSlNPTiwgb25Mb2FkSnNvbik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBpbml0OiBpbml0XHJcbiAgICB9XHJcbn0pKCk7XHJcblxyXG5cclxud2luZG93LmRmLndvcmtncm91cC5sb2dpbi5Mb2FkSW5mb0RhdGEuaW5pdCgpO1xyXG4iLCJ2YXIgc3RhcnRPZkRheSA9IHJlcXVpcmUoJy4uL3N0YXJ0X29mX2RheS9pbmRleC5qcycpXG5cbnZhciBNSUxMSVNFQ09ORFNfSU5fTUlOVVRFID0gNjAwMDBcbnZhciBNSUxMSVNFQ09ORFNfSU5fREFZID0gODY0MDAwMDBcblxuLyoqXG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgbnVtYmVyIG9mIGNhbGVuZGFyIGRheXMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIG51bWJlciBvZiBjYWxlbmRhciBkYXlzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxTdHJpbmd8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBsYXRlciBkYXRlXG4gKiBAcGFyYW0ge0RhdGV8U3RyaW5nfE51bWJlcn0gZGF0ZVJpZ2h0IC0gdGhlIGVhcmxpZXIgZGF0ZVxuICogQHJldHVybnMge051bWJlcn0gdGhlIG51bWJlciBvZiBjYWxlbmRhciBkYXlzXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEhvdyBtYW55IGNhbGVuZGFyIGRheXMgYXJlIGJldHdlZW5cbiAqIC8vIDIgSnVseSAyMDExIDIzOjAwOjAwIGFuZCAyIEp1bHkgMjAxMiAwMDowMDowMD9cbiAqIHZhciByZXN1bHQgPSBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMoXG4gKiAgIG5ldyBEYXRlKDIwMTIsIDYsIDIsIDAsIDApLFxuICogICBuZXcgRGF0ZSgyMDExLCA2LCAyLCAyMywgMClcbiAqIClcbiAqIC8vPT4gMzY2XG4gKi9cbmZ1bmN0aW9uIGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyAoZGlydHlEYXRlTGVmdCwgZGlydHlEYXRlUmlnaHQpIHtcbiAgdmFyIHN0YXJ0T2ZEYXlMZWZ0ID0gc3RhcnRPZkRheShkaXJ0eURhdGVMZWZ0KVxuICB2YXIgc3RhcnRPZkRheVJpZ2h0ID0gc3RhcnRPZkRheShkaXJ0eURhdGVSaWdodClcblxuICB2YXIgdGltZXN0YW1wTGVmdCA9IHN0YXJ0T2ZEYXlMZWZ0LmdldFRpbWUoKSAtXG4gICAgc3RhcnRPZkRheUxlZnQuZ2V0VGltZXpvbmVPZmZzZXQoKSAqIE1JTExJU0VDT05EU19JTl9NSU5VVEVcbiAgdmFyIHRpbWVzdGFtcFJpZ2h0ID0gc3RhcnRPZkRheVJpZ2h0LmdldFRpbWUoKSAtXG4gICAgc3RhcnRPZkRheVJpZ2h0LmdldFRpbWV6b25lT2Zmc2V0KCkgKiBNSUxMSVNFQ09ORFNfSU5fTUlOVVRFXG5cbiAgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIGRheSBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIGRheSBvZiB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpXG4gIHJldHVybiBNYXRoLnJvdW5kKCh0aW1lc3RhbXBMZWZ0IC0gdGltZXN0YW1wUmlnaHQpIC8gTUlMTElTRUNPTkRTX0lOX0RBWSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXNcbiIsInZhciBnZXREYXlPZlllYXIgPSByZXF1aXJlKCcuLi9nZXRfZGF5X29mX3llYXIvaW5kZXguanMnKVxudmFyIGdldElTT1dlZWsgPSByZXF1aXJlKCcuLi9nZXRfaXNvX3dlZWsvaW5kZXguanMnKVxudmFyIGdldElTT1llYXIgPSByZXF1aXJlKCcuLi9nZXRfaXNvX3llYXIvaW5kZXguanMnKVxudmFyIHBhcnNlID0gcmVxdWlyZSgnLi4vcGFyc2UvaW5kZXguanMnKVxudmFyIGlzVmFsaWQgPSByZXF1aXJlKCcuLi9pc192YWxpZC9pbmRleC5qcycpXG52YXIgZW5Mb2NhbGUgPSByZXF1aXJlKCcuLi9sb2NhbGUvZW4vaW5kZXguanMnKVxuXG4vKipcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgRm9ybWF0IHRoZSBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBmb3JtYXR0ZWQgZGF0ZSBzdHJpbmcgaW4gdGhlIGdpdmVuIGZvcm1hdC5cbiAqXG4gKiBBY2NlcHRlZCB0b2tlbnM6XG4gKiB8IFVuaXQgICAgICAgICAgICAgICAgICAgIHwgVG9rZW4gfCBSZXN1bHQgZXhhbXBsZXMgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8IE1vbnRoICAgICAgICAgICAgICAgICAgIHwgTSAgICAgfCAxLCAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgTW8gICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU0gICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NICAgfCBKYW4sIEZlYiwgLi4uLCBEZWMgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NTSAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciB8XG4gKiB8IFF1YXJ0ZXIgICAgICAgICAgICAgICAgIHwgUSAgICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgUW8gICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICB8XG4gKiB8IERheSBvZiBtb250aCAgICAgICAgICAgIHwgRCAgICAgfCAxLCAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgRG8gICAgfCAxc3QsIDJuZCwgLi4uLCAzMXN0ICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgREQgICAgfCAwMSwgMDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICB8XG4gKiB8IERheSBvZiB5ZWFyICAgICAgICAgICAgIHwgREREICAgfCAxLCAyLCAuLi4sIDM2NiAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgREREbyAgfCAxc3QsIDJuZCwgLi4uLCAzNjZ0aCAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgRERERCAgfCAwMDEsIDAwMiwgLi4uLCAzNjYgICAgICAgICAgICAgICB8XG4gKiB8IERheSBvZiB3ZWVrICAgICAgICAgICAgIHwgZCAgICAgfCAwLCAxLCAuLi4sIDYgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgZG8gICAgfCAwdGgsIDFzdCwgLi4uLCA2dGggICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgZGQgICAgfCBTdSwgTW8sIC4uLiwgU2EgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgZGRkICAgfCBTdW4sIE1vbiwgLi4uLCBTYXQgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgZGRkZCAgfCBTdW5kYXksIE1vbmRheSwgLi4uLCBTYXR1cmRheSAgICB8XG4gKiB8IERheSBvZiBJU08gd2VlayAgICAgICAgIHwgRSAgICAgfCAxLCAyLCAuLi4sIDcgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IElTTyB3ZWVrICAgICAgICAgICAgICAgIHwgVyAgICAgfCAxLCAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgV28gICAgfCAxc3QsIDJuZCwgLi4uLCA1M3JkICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgV1cgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICB8XG4gKiB8IFllYXIgICAgICAgICAgICAgICAgICAgIHwgWVkgICAgfCAwMCwgMDEsIC4uLiwgOTkgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWSAgfCAxOTAwLCAxOTAxLCAuLi4sIDIwOTkgICAgICAgICAgICB8XG4gKiB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyIHwgR0cgICAgfCAwMCwgMDEsIC4uLiwgOTkgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHRyAgfCAxOTAwLCAxOTAxLCAuLi4sIDIwOTkgICAgICAgICAgICB8XG4gKiB8IEFNL1BNICAgICAgICAgICAgICAgICAgIHwgQSAgICAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgYSAgICAgfCBhbSwgcG0gICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWEgICAgfCBhLm0uLCBwLm0uICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IEhvdXIgICAgICAgICAgICAgICAgICAgIHwgSCAgICAgfCAwLCAxLCAuLi4gMjMgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgSEggICAgfCAwMCwgMDEsIC4uLiAyMyAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgaCAgICAgfCAxLCAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgaGggICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICB8XG4gKiB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgIHwgbSAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW0gICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICB8XG4gKiB8IFNlY29uZCAgICAgICAgICAgICAgICAgIHwgcyAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgc3MgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICB8XG4gKiB8IDEvMTAgb2Ygc2Vjb25kICAgICAgICAgIHwgUyAgICAgfCAwLCAxLCAuLi4sIDkgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IDEvMTAwIG9mIHNlY29uZCAgICAgICAgIHwgU1MgICAgfCAwMCwgMDEsIC4uLiwgOTkgICAgICAgICAgICAgICAgICB8XG4gKiB8IE1pbGxpc2Vjb25kICAgICAgICAgICAgIHwgU1NTICAgfCAwMDAsIDAwMSwgLi4uLCA5OTkgICAgICAgICAgICAgICB8XG4gKiB8IFRpbWV6b25lICAgICAgICAgICAgICAgIHwgWiAgICAgfCAtMDE6MDAsICswMDowMCwgLi4uICsxMjowMCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgWlogICAgfCAtMDEwMCwgKzAwMDAsIC4uLiwgKzEyMDAgICAgICAgICB8XG4gKiB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgIHwgWCAgICAgfCA1MTI5Njk1MjAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IE1pbGxpc2Vjb25kcyB0aW1lc3RhbXAgIHwgeCAgICAgfCA1MTI5Njk1MjA5MDAgICAgICAgICAgICAgICAgICAgICB8XG4gKlxuICogVGhlIGNoYXJhY3RlcnMgd3JhcHBlZCBpbiBzcXVhcmUgYnJhY2tldHMgYXJlIGVzY2FwZWQuXG4gKlxuICogVGhlIHJlc3VsdCBtYXkgdmFyeSBieSBsb2NhbGUuXG4gKlxuICogQHBhcmFtIHtEYXRlfFN0cmluZ3xOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHBhcmFtIHtTdHJpbmd9IFtmb3JtYXQ9J1lZWVktTU0tRERUSEg6bW06c3MuU1NTWiddIC0gdGhlIHN0cmluZyBvZiB0b2tlbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSB0aGUgb2JqZWN0IHdpdGggb3B0aW9uc1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmxvY2FsZT1lbkxvY2FsZV0gLSB0aGUgbG9jYWxlIG9iamVjdFxuICogQHJldHVybnMge1N0cmluZ30gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZ1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXByZXNlbnQgMTEgRmVicnVhcnkgMjAxNCBpbiBtaWRkbGUtZW5kaWFuIGZvcm1hdDpcbiAqIHZhciByZXN1bHQgPSBmb3JtYXQoXG4gKiAgIG5ldyBEYXRlKDIwMTQsIDEsIDExKSxcbiAqICAgJ01NL0REL1lZWVknXG4gKiApXG4gKiAvLz0+ICcwMi8xMS8yMDE0J1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXByZXNlbnQgMiBKdWx5IDIwMTQgaW4gRXNwZXJhbnRvOlxuICogdmFyIGVvTG9jYWxlID0gcmVxdWlyZSgnZGF0ZS1mbnMvbG9jYWxlL2VvJylcbiAqIHZhciByZXN1bHQgPSBmb3JtYXQoXG4gKiAgIG5ldyBEYXRlKDIwMTQsIDYsIDIpLFxuICogICAnRG8gW2RlXSBNTU1NIFlZWVknLFxuICogICB7bG9jYWxlOiBlb0xvY2FsZX1cbiAqIClcbiAqIC8vPT4gJzItYSBkZSBqdWxpbyAyMDE0J1xuICovXG5mdW5jdGlvbiBmb3JtYXQgKGRpcnR5RGF0ZSwgZGlydHlGb3JtYXRTdHIsIGRpcnR5T3B0aW9ucykge1xuICB2YXIgZm9ybWF0U3RyID0gZGlydHlGb3JtYXRTdHIgPyBTdHJpbmcoZGlydHlGb3JtYXRTdHIpIDogJ1lZWVktTU0tRERUSEg6bW06c3MuU1NTWidcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge31cblxuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGVcbiAgdmFyIGxvY2FsZUZvcm1hdHRlcnMgPSBlbkxvY2FsZS5mb3JtYXQuZm9ybWF0dGVyc1xuICB2YXIgZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCA9IGVuTG9jYWxlLmZvcm1hdC5mb3JtYXR0aW5nVG9rZW5zUmVnRXhwXG4gIGlmIChsb2NhbGUgJiYgbG9jYWxlLmZvcm1hdCAmJiBsb2NhbGUuZm9ybWF0LmZvcm1hdHRlcnMpIHtcbiAgICBsb2NhbGVGb3JtYXR0ZXJzID0gbG9jYWxlLmZvcm1hdC5mb3JtYXR0ZXJzXG5cbiAgICBpZiAobG9jYWxlLmZvcm1hdC5mb3JtYXR0aW5nVG9rZW5zUmVnRXhwKSB7XG4gICAgICBmb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gbG9jYWxlLmZvcm1hdC5mb3JtYXR0aW5nVG9rZW5zUmVnRXhwXG4gICAgfVxuICB9XG5cbiAgdmFyIGRhdGUgPSBwYXJzZShkaXJ0eURhdGUpXG5cbiAgaWYgKCFpc1ZhbGlkKGRhdGUpKSB7XG4gICAgcmV0dXJuICdJbnZhbGlkIERhdGUnXG4gIH1cblxuICB2YXIgZm9ybWF0Rm4gPSBidWlsZEZvcm1hdEZuKGZvcm1hdFN0ciwgbG9jYWxlRm9ybWF0dGVycywgZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cClcblxuICByZXR1cm4gZm9ybWF0Rm4oZGF0ZSlcbn1cblxudmFyIGZvcm1hdHRlcnMgPSB7XG4gIC8vIE1vbnRoOiAxLCAyLCAuLi4sIDEyXG4gICdNJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRNb250aCgpICsgMVxuICB9LFxuXG4gIC8vIE1vbnRoOiAwMSwgMDIsIC4uLiwgMTJcbiAgJ01NJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0TW9udGgoKSArIDEsIDIpXG4gIH0sXG5cbiAgLy8gUXVhcnRlcjogMSwgMiwgMywgNFxuICAnUSc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIE1hdGguY2VpbCgoZGF0ZS5nZXRNb250aCgpICsgMSkgLyAzKVxuICB9LFxuXG4gIC8vIERheSBvZiBtb250aDogMSwgMiwgLi4uLCAzMVxuICAnRCc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0RGF0ZSgpXG4gIH0sXG5cbiAgLy8gRGF5IG9mIG1vbnRoOiAwMSwgMDIsIC4uLiwgMzFcbiAgJ0REJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0RGF0ZSgpLCAyKVxuICB9LFxuXG4gIC8vIERheSBvZiB5ZWFyOiAxLCAyLCAuLi4sIDM2NlxuICAnREREJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gZ2V0RGF5T2ZZZWFyKGRhdGUpXG4gIH0sXG5cbiAgLy8gRGF5IG9mIHllYXI6IDAwMSwgMDAyLCAuLi4sIDM2NlxuICAnRERERCc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhnZXREYXlPZlllYXIoZGF0ZSksIDMpXG4gIH0sXG5cbiAgLy8gRGF5IG9mIHdlZWs6IDAsIDEsIC4uLiwgNlxuICAnZCc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0RGF5KClcbiAgfSxcblxuICAvLyBEYXkgb2YgSVNPIHdlZWs6IDEsIDIsIC4uLiwgN1xuICAnRSc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0RGF5KCkgfHwgN1xuICB9LFxuXG4gIC8vIElTTyB3ZWVrOiAxLCAyLCAuLi4sIDUzXG4gICdXJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gZ2V0SVNPV2VlayhkYXRlKVxuICB9LFxuXG4gIC8vIElTTyB3ZWVrOiAwMSwgMDIsIC4uLiwgNTNcbiAgJ1dXJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGdldElTT1dlZWsoZGF0ZSksIDIpXG4gIH0sXG5cbiAgLy8gWWVhcjogMDAsIDAxLCAuLi4sIDk5XG4gICdZWSc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldEZ1bGxZZWFyKCksIDQpLnN1YnN0cigyKVxuICB9LFxuXG4gIC8vIFllYXI6IDE5MDAsIDE5MDEsIC4uLiwgMjA5OVxuICAnWVlZWSc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldEZ1bGxZZWFyKCksIDQpXG4gIH0sXG5cbiAgLy8gSVNPIHdlZWstbnVtYmVyaW5nIHllYXI6IDAwLCAwMSwgLi4uLCA5OVxuICAnR0cnOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHJldHVybiBTdHJpbmcoZ2V0SVNPWWVhcihkYXRlKSkuc3Vic3RyKDIpXG4gIH0sXG5cbiAgLy8gSVNPIHdlZWstbnVtYmVyaW5nIHllYXI6IDE5MDAsIDE5MDEsIC4uLiwgMjA5OVxuICAnR0dHRyc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIGdldElTT1llYXIoZGF0ZSlcbiAgfSxcblxuICAvLyBIb3VyOiAwLCAxLCAuLi4gMjNcbiAgJ0gnOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLmdldEhvdXJzKClcbiAgfSxcblxuICAvLyBIb3VyOiAwMCwgMDEsIC4uLiwgMjNcbiAgJ0hIJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0SG91cnMoKSwgMilcbiAgfSxcblxuICAvLyBIb3VyOiAxLCAyLCAuLi4sIDEyXG4gICdoJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldEhvdXJzKClcbiAgICBpZiAoaG91cnMgPT09IDApIHtcbiAgICAgIHJldHVybiAxMlxuICAgIH0gZWxzZSBpZiAoaG91cnMgPiAxMikge1xuICAgICAgcmV0dXJuIGhvdXJzICUgMTJcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGhvdXJzXG4gICAgfVxuICB9LFxuXG4gIC8vIEhvdXI6IDAxLCAwMiwgLi4uLCAxMlxuICAnaGgnOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZm9ybWF0dGVyc1snaCddKGRhdGUpLCAyKVxuICB9LFxuXG4gIC8vIE1pbnV0ZTogMCwgMSwgLi4uLCA1OVxuICAnbSc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0TWludXRlcygpXG4gIH0sXG5cbiAgLy8gTWludXRlOiAwMCwgMDEsIC4uLiwgNTlcbiAgJ21tJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0TWludXRlcygpLCAyKVxuICB9LFxuXG4gIC8vIFNlY29uZDogMCwgMSwgLi4uLCA1OVxuICAncyc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0U2Vjb25kcygpXG4gIH0sXG5cbiAgLy8gU2Vjb25kOiAwMCwgMDEsIC4uLiwgNTlcbiAgJ3NzJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0U2Vjb25kcygpLCAyKVxuICB9LFxuXG4gIC8vIDEvMTAgb2Ygc2Vjb25kOiAwLCAxLCAuLi4sIDlcbiAgJ1MnOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkgLyAxMDApXG4gIH0sXG5cbiAgLy8gMS8xMDAgb2Ygc2Vjb25kOiAwMCwgMDEsIC4uLiwgOTlcbiAgJ1NTJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKE1hdGguZmxvb3IoZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSAvIDEwKSwgMilcbiAgfSxcblxuICAvLyBNaWxsaXNlY29uZDogMDAwLCAwMDEsIC4uLiwgOTk5XG4gICdTU1MnOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSwgMylcbiAgfSxcblxuICAvLyBUaW1lem9uZTogLTAxOjAwLCArMDA6MDAsIC4uLiArMTI6MDBcbiAgJ1onOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHJldHVybiBmb3JtYXRUaW1lem9uZShkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCksICc6JylcbiAgfSxcblxuICAvLyBUaW1lem9uZTogLTAxMDAsICswMDAwLCAuLi4gKzEyMDBcbiAgJ1paJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUoZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpKVxuICB9LFxuXG4gIC8vIFNlY29uZHMgdGltZXN0YW1wOiA1MTI5Njk1MjBcbiAgJ1gnOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKGRhdGUuZ2V0VGltZSgpIC8gMTAwMClcbiAgfSxcblxuICAvLyBNaWxsaXNlY29uZHMgdGltZXN0YW1wOiA1MTI5Njk1MjA5MDBcbiAgJ3gnOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLmdldFRpbWUoKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJ1aWxkRm9ybWF0Rm4gKGZvcm1hdFN0ciwgbG9jYWxlRm9ybWF0dGVycywgZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCkge1xuICB2YXIgYXJyYXkgPSBmb3JtYXRTdHIubWF0Y2goZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cClcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aFxuXG4gIHZhciBpXG4gIHZhciBmb3JtYXR0ZXJcbiAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgZm9ybWF0dGVyID0gbG9jYWxlRm9ybWF0dGVyc1thcnJheVtpXV0gfHwgZm9ybWF0dGVyc1thcnJheVtpXV1cbiAgICBpZiAoZm9ybWF0dGVyKSB7XG4gICAgICBhcnJheVtpXSA9IGZvcm1hdHRlclxuICAgIH0gZWxzZSB7XG4gICAgICBhcnJheVtpXSA9IHJlbW92ZUZvcm1hdHRpbmdUb2tlbnMoYXJyYXlbaV0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgdmFyIG91dHB1dCA9ICcnXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGFycmF5W2ldIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICAgICAgb3V0cHV0ICs9IGFycmF5W2ldKGRhdGUsIGZvcm1hdHRlcnMpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXRwdXQgKz0gYXJyYXlbaV1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dFxuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUZvcm1hdHRpbmdUb2tlbnMgKGlucHV0KSB7XG4gIGlmIChpbnB1dC5tYXRjaCgvXFxbW1xcc1xcU10vKSkge1xuICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9eXFxbfF0kL2csICcnKVxuICB9XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC9cXFxcL2csICcnKVxufVxuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZSAob2Zmc2V0LCBkZWxpbWV0ZXIpIHtcbiAgZGVsaW1ldGVyID0gZGVsaW1ldGVyIHx8ICcnXG4gIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJ1xuICB2YXIgYWJzT2Zmc2V0ID0gTWF0aC5hYnMob2Zmc2V0KVxuICB2YXIgaG91cnMgPSBNYXRoLmZsb29yKGFic09mZnNldCAvIDYwKVxuICB2YXIgbWludXRlcyA9IGFic09mZnNldCAlIDYwXG4gIHJldHVybiBzaWduICsgYWRkTGVhZGluZ1plcm9zKGhvdXJzLCAyKSArIGRlbGltZXRlciArIGFkZExlYWRpbmdaZXJvcyhtaW51dGVzLCAyKVxufVxuXG5mdW5jdGlvbiBhZGRMZWFkaW5nWmVyb3MgKG51bWJlciwgdGFyZ2V0TGVuZ3RoKSB7XG4gIHZhciBvdXRwdXQgPSBNYXRoLmFicyhudW1iZXIpLnRvU3RyaW5nKClcbiAgd2hpbGUgKG91dHB1dC5sZW5ndGggPCB0YXJnZXRMZW5ndGgpIHtcbiAgICBvdXRwdXQgPSAnMCcgKyBvdXRwdXRcbiAgfVxuICByZXR1cm4gb3V0cHV0XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZm9ybWF0XG4iLCJ2YXIgcGFyc2UgPSByZXF1aXJlKCcuLi9wYXJzZS9pbmRleC5qcycpXG52YXIgc3RhcnRPZlllYXIgPSByZXF1aXJlKCcuLi9zdGFydF9vZl95ZWFyL2luZGV4LmpzJylcbnZhciBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMgPSByZXF1aXJlKCcuLi9kaWZmZXJlbmNlX2luX2NhbGVuZGFyX2RheXMvaW5kZXguanMnKVxuXG4vKipcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSBkYXkgb2YgdGhlIHllYXIgb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIGRheSBvZiB0aGUgeWVhciBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8U3RyaW5nfE51bWJlcn0gZGF0ZSAtIHRoZSBnaXZlbiBkYXRlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgZGF5IG9mIHllYXJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hpY2ggZGF5IG9mIHRoZSB5ZWFyIGlzIDIgSnVseSAyMDE0P1xuICogdmFyIHJlc3VsdCA9IGdldERheU9mWWVhcihuZXcgRGF0ZSgyMDE0LCA2LCAyKSlcbiAqIC8vPT4gMTgzXG4gKi9cbmZ1bmN0aW9uIGdldERheU9mWWVhciAoZGlydHlEYXRlKSB7XG4gIHZhciBkYXRlID0gcGFyc2UoZGlydHlEYXRlKVxuICB2YXIgZGlmZiA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhkYXRlLCBzdGFydE9mWWVhcihkYXRlKSlcbiAgdmFyIGRheU9mWWVhciA9IGRpZmYgKyAxXG4gIHJldHVybiBkYXlPZlllYXJcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXREYXlPZlllYXJcbiIsInZhciBwYXJzZSA9IHJlcXVpcmUoJy4uL3BhcnNlL2luZGV4LmpzJylcbnZhciBzdGFydE9mSVNPV2VlayA9IHJlcXVpcmUoJy4uL3N0YXJ0X29mX2lzb193ZWVrL2luZGV4LmpzJylcbnZhciBzdGFydE9mSVNPWWVhciA9IHJlcXVpcmUoJy4uL3N0YXJ0X29mX2lzb195ZWFyL2luZGV4LmpzJylcblxudmFyIE1JTExJU0VDT05EU19JTl9XRUVLID0gNjA0ODAwMDAwXG5cbi8qKlxuICogQGNhdGVnb3J5IElTTyBXZWVrIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgSVNPIHdlZWsgb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIElTTyB3ZWVrIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyOiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGVcbiAqXG4gKiBAcGFyYW0ge0RhdGV8U3RyaW5nfE51bWJlcn0gZGF0ZSAtIHRoZSBnaXZlbiBkYXRlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgSVNPIHdlZWtcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hpY2ggd2VlayBvZiB0aGUgSVNPLXdlZWsgbnVtYmVyaW5nIHllYXIgaXMgMiBKYW51YXJ5IDIwMDU/XG4gKiB2YXIgcmVzdWx0ID0gZ2V0SVNPV2VlayhuZXcgRGF0ZSgyMDA1LCAwLCAyKSlcbiAqIC8vPT4gNTNcbiAqL1xuZnVuY3Rpb24gZ2V0SVNPV2VlayAoZGlydHlEYXRlKSB7XG4gIHZhciBkYXRlID0gcGFyc2UoZGlydHlEYXRlKVxuICB2YXIgZGlmZiA9IHN0YXJ0T2ZJU09XZWVrKGRhdGUpLmdldFRpbWUoKSAtIHN0YXJ0T2ZJU09ZZWFyKGRhdGUpLmdldFRpbWUoKVxuXG4gIC8vIFJvdW5kIHRoZSBudW1iZXIgb2YgZGF5cyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyXG4gIC8vIGJlY2F1c2UgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaW4gYSB3ZWVrIGlzIG5vdCBjb25zdGFudFxuICAvLyAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgd2VlayBvZiB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpXG4gIHJldHVybiBNYXRoLnJvdW5kKGRpZmYgLyBNSUxMSVNFQ09ORFNfSU5fV0VFSykgKyAxXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0SVNPV2Vla1xuIiwidmFyIHBhcnNlID0gcmVxdWlyZSgnLi4vcGFyc2UvaW5kZXguanMnKVxudmFyIHN0YXJ0T2ZJU09XZWVrID0gcmVxdWlyZSgnLi4vc3RhcnRfb2ZfaXNvX3dlZWsvaW5kZXguanMnKVxuXG4vKipcbiAqIEBjYXRlZ29yeSBJU08gV2Vlay1OdW1iZXJpbmcgWWVhciBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBJU08gd2Vlay1udW1iZXJpbmcgeWVhciBvZiB0aGUgZ2l2ZW4gZGF0ZSxcbiAqIHdoaWNoIGFsd2F5cyBzdGFydHMgMyBkYXlzIGJlZm9yZSB0aGUgeWVhcidzIGZpcnN0IFRodXJzZGF5LlxuICpcbiAqIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyOiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGVcbiAqXG4gKiBAcGFyYW0ge0RhdGV8U3RyaW5nfE51bWJlcn0gZGF0ZSAtIHRoZSBnaXZlbiBkYXRlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgSVNPIHdlZWstbnVtYmVyaW5nIHllYXJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hpY2ggSVNPLXdlZWsgbnVtYmVyaW5nIHllYXIgaXMgMiBKYW51YXJ5IDIwMDU/XG4gKiB2YXIgcmVzdWx0ID0gZ2V0SVNPWWVhcihuZXcgRGF0ZSgyMDA1LCAwLCAyKSlcbiAqIC8vPT4gMjAwNFxuICovXG5mdW5jdGlvbiBnZXRJU09ZZWFyIChkaXJ0eURhdGUpIHtcbiAgdmFyIGRhdGUgPSBwYXJzZShkaXJ0eURhdGUpXG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpXG5cbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIgPSBuZXcgRGF0ZSgwKVxuICBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyLnNldEZ1bGxZZWFyKHllYXIgKyAxLCAwLCA0KVxuICBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyLnNldEhvdXJzKDAsIDAsIDAsIDApXG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mSVNPV2Vlayhmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyKVxuXG4gIHZhciBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyID0gbmV3IERhdGUoMClcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRGdWxsWWVhcih5ZWFyLCAwLCA0KVxuICBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyLnNldEhvdXJzKDAsIDAsIDAsIDApXG4gIHZhciBzdGFydE9mVGhpc1llYXIgPSBzdGFydE9mSVNPV2Vlayhmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyKVxuXG4gIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxXG4gIH0gZWxzZSBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZlRoaXNZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHllYXIgLSAxXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRJU09ZZWFyXG4iLCIvKipcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIGFyZ3VtZW50IGFuIGluc3RhbmNlIG9mIERhdGU/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBJcyB0aGUgZ2l2ZW4gYXJndW1lbnQgYW4gaW5zdGFuY2Ugb2YgRGF0ZT9cbiAqXG4gKiBAcGFyYW0geyp9IGFyZ3VtZW50IC0gdGhlIGFyZ3VtZW50IHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGdpdmVuIGFyZ3VtZW50IGlzIGFuIGluc3RhbmNlIG9mIERhdGVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSXMgJ21heW9ubmFpc2UnIGEgRGF0ZT9cbiAqIHZhciByZXN1bHQgPSBpc0RhdGUoJ21heW9ubmFpc2UnKVxuICogLy89PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUgKGFyZ3VtZW50KSB7XG4gIHJldHVybiBhcmd1bWVudCBpbnN0YW5jZW9mIERhdGVcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0RhdGVcbiIsInZhciBpc0RhdGUgPSByZXF1aXJlKCcuLi9pc19kYXRlL2luZGV4LmpzJylcblxuLyoqXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIHZhbGlkP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyBmYWxzZSBpZiBhcmd1bWVudCBpcyBJbnZhbGlkIERhdGUgYW5kIHRydWUgb3RoZXJ3aXNlLlxuICogSW52YWxpZCBEYXRlIGlzIGEgRGF0ZSwgd2hvc2UgdGltZSB2YWx1ZSBpcyBOYU4uXG4gKlxuICogVGltZSB2YWx1ZSBvZiBEYXRlOiBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjkuMS4xXG4gKlxuICogQHBhcmFtIHtEYXRlfSBkYXRlIC0gdGhlIGRhdGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZGF0ZSBpcyB2YWxpZFxuICogQHRocm93cyB7VHlwZUVycm9yfSBhcmd1bWVudCBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIERhdGVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWxpZCBkYXRlOlxuICogdmFyIHJlc3VsdCA9IGlzVmFsaWQobmV3IERhdGUoMjAxNCwgMSwgMzEpKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgaW52YWxpZCBkYXRlOlxuICogdmFyIHJlc3VsdCA9IGlzVmFsaWQobmV3IERhdGUoJycpKVxuICogLy89PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1ZhbGlkIChkaXJ0eURhdGUpIHtcbiAgaWYgKGlzRGF0ZShkaXJ0eURhdGUpKSB7XG4gICAgcmV0dXJuICFpc05hTihkaXJ0eURhdGUpXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcih0b1N0cmluZy5jYWxsKGRpcnR5RGF0ZSkgKyAnIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBEYXRlJylcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVmFsaWRcbiIsInZhciBjb21tb25Gb3JtYXR0ZXJLZXlzID0gW1xuICAnTScsICdNTScsICdRJywgJ0QnLCAnREQnLCAnREREJywgJ0REREQnLCAnZCcsXG4gICdFJywgJ1cnLCAnV1cnLCAnWVknLCAnWVlZWScsICdHRycsICdHR0dHJyxcbiAgJ0gnLCAnSEgnLCAnaCcsICdoaCcsICdtJywgJ21tJyxcbiAgJ3MnLCAnc3MnLCAnUycsICdTUycsICdTU1MnLFxuICAnWicsICdaWicsICdYJywgJ3gnXG5dXG5cbmZ1bmN0aW9uIGJ1aWxkRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCAoZm9ybWF0dGVycykge1xuICB2YXIgZm9ybWF0dGVyS2V5cyA9IFtdXG4gIGZvciAodmFyIGtleSBpbiBmb3JtYXR0ZXJzKSB7XG4gICAgaWYgKGZvcm1hdHRlcnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgZm9ybWF0dGVyS2V5cy5wdXNoKGtleSlcbiAgICB9XG4gIH1cblxuICB2YXIgZm9ybWF0dGluZ1Rva2VucyA9IGNvbW1vbkZvcm1hdHRlcktleXNcbiAgICAuY29uY2F0KGZvcm1hdHRlcktleXMpXG4gICAgLnNvcnQoKVxuICAgIC5yZXZlcnNlKClcbiAgdmFyIGZvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPSBuZXcgUmVnRXhwKFxuICAgICcoXFxcXFtbXlxcXFxbXSpcXFxcXSl8KFxcXFxcXFxcKT8nICsgJygnICsgZm9ybWF0dGluZ1Rva2Vucy5qb2luKCd8JykgKyAnfC4pJywgJ2cnXG4gIClcblxuICByZXR1cm4gZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJ1aWxkRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cFxuIiwiZnVuY3Rpb24gYnVpbGREaXN0YW5jZUluV29yZHNMb2NhbGUgKCkge1xuICB2YXIgZGlzdGFuY2VJbldvcmRzTG9jYWxlID0ge1xuICAgIGxlc3NUaGFuWFNlY29uZHM6IHtcbiAgICAgIG9uZTogJ2xlc3MgdGhhbiBhIHNlY29uZCcsXG4gICAgICBvdGhlcjogJ2xlc3MgdGhhbiB7e2NvdW50fX0gc2Vjb25kcydcbiAgICB9LFxuXG4gICAgeFNlY29uZHM6IHtcbiAgICAgIG9uZTogJzEgc2Vjb25kJyxcbiAgICAgIG90aGVyOiAne3tjb3VudH19IHNlY29uZHMnXG4gICAgfSxcblxuICAgIGhhbGZBTWludXRlOiAnaGFsZiBhIG1pbnV0ZScsXG5cbiAgICBsZXNzVGhhblhNaW51dGVzOiB7XG4gICAgICBvbmU6ICdsZXNzIHRoYW4gYSBtaW51dGUnLFxuICAgICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IG1pbnV0ZXMnXG4gICAgfSxcblxuICAgIHhNaW51dGVzOiB7XG4gICAgICBvbmU6ICcxIG1pbnV0ZScsXG4gICAgICBvdGhlcjogJ3t7Y291bnR9fSBtaW51dGVzJ1xuICAgIH0sXG5cbiAgICBhYm91dFhIb3Vyczoge1xuICAgICAgb25lOiAnYWJvdXQgMSBob3VyJyxcbiAgICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IGhvdXJzJ1xuICAgIH0sXG5cbiAgICB4SG91cnM6IHtcbiAgICAgIG9uZTogJzEgaG91cicsXG4gICAgICBvdGhlcjogJ3t7Y291bnR9fSBob3VycydcbiAgICB9LFxuXG4gICAgeERheXM6IHtcbiAgICAgIG9uZTogJzEgZGF5JyxcbiAgICAgIG90aGVyOiAne3tjb3VudH19IGRheXMnXG4gICAgfSxcblxuICAgIGFib3V0WE1vbnRoczoge1xuICAgICAgb25lOiAnYWJvdXQgMSBtb250aCcsXG4gICAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSBtb250aHMnXG4gICAgfSxcblxuICAgIHhNb250aHM6IHtcbiAgICAgIG9uZTogJzEgbW9udGgnLFxuICAgICAgb3RoZXI6ICd7e2NvdW50fX0gbW9udGhzJ1xuICAgIH0sXG5cbiAgICBhYm91dFhZZWFyczoge1xuICAgICAgb25lOiAnYWJvdXQgMSB5ZWFyJyxcbiAgICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IHllYXJzJ1xuICAgIH0sXG5cbiAgICB4WWVhcnM6IHtcbiAgICAgIG9uZTogJzEgeWVhcicsXG4gICAgICBvdGhlcjogJ3t7Y291bnR9fSB5ZWFycydcbiAgICB9LFxuXG4gICAgb3ZlclhZZWFyczoge1xuICAgICAgb25lOiAnb3ZlciAxIHllYXInLFxuICAgICAgb3RoZXI6ICdvdmVyIHt7Y291bnR9fSB5ZWFycydcbiAgICB9LFxuXG4gICAgYWxtb3N0WFllYXJzOiB7XG4gICAgICBvbmU6ICdhbG1vc3QgMSB5ZWFyJyxcbiAgICAgIG90aGVyOiAnYWxtb3N0IHt7Y291bnR9fSB5ZWFycydcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBsb2NhbGl6ZSAodG9rZW4sIGNvdW50LCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICAgIHZhciByZXN1bHRcbiAgICBpZiAodHlwZW9mIGRpc3RhbmNlSW5Xb3Jkc0xvY2FsZVt0b2tlbl0gPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXN1bHQgPSBkaXN0YW5jZUluV29yZHNMb2NhbGVbdG9rZW5dXG4gICAgfSBlbHNlIGlmIChjb3VudCA9PT0gMSkge1xuICAgICAgcmVzdWx0ID0gZGlzdGFuY2VJbldvcmRzTG9jYWxlW3Rva2VuXS5vbmVcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gZGlzdGFuY2VJbldvcmRzTG9jYWxlW3Rva2VuXS5vdGhlci5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudClcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICAgIGlmIChvcHRpb25zLmNvbXBhcmlzb24gPiAwKSB7XG4gICAgICAgIHJldHVybiAnaW4gJyArIHJlc3VsdFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCArICcgYWdvJ1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbG9jYWxpemU6IGxvY2FsaXplXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBidWlsZERpc3RhbmNlSW5Xb3Jkc0xvY2FsZVxuIiwidmFyIGJ1aWxkRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCA9IHJlcXVpcmUoJy4uLy4uL19saWIvYnVpbGRfZm9ybWF0dGluZ190b2tlbnNfcmVnX2V4cC9pbmRleC5qcycpXG5cbmZ1bmN0aW9uIGJ1aWxkRm9ybWF0TG9jYWxlICgpIHtcbiAgLy8gTm90ZTogaW4gRW5nbGlzaCwgdGhlIG5hbWVzIG9mIGRheXMgb2YgdGhlIHdlZWsgYW5kIG1vbnRocyBhcmUgY2FwaXRhbGl6ZWQuXG4gIC8vIElmIHlvdSBhcmUgbWFraW5nIGEgbmV3IGxvY2FsZSBiYXNlZCBvbiB0aGlzIG9uZSwgY2hlY2sgaWYgdGhlIHNhbWUgaXMgdHJ1ZSBmb3IgdGhlIGxhbmd1YWdlIHlvdSdyZSB3b3JraW5nIG9uLlxuICAvLyBHZW5lcmFsbHksIGZvcm1hdHRlZCBkYXRlcyBzaG91bGQgbG9vayBsaWtlIHRoZXkgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSBzZW50ZW5jZSxcbiAgLy8gZS5nLiBpbiBTcGFuaXNoIGxhbmd1YWdlIHRoZSB3ZWVrZGF5cyBhbmQgbW9udGhzIHNob3VsZCBiZSBpbiB0aGUgbG93ZXJjYXNlLlxuICB2YXIgbW9udGhzM2NoYXIgPSBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJywgJ09jdCcsICdOb3YnLCAnRGVjJ11cbiAgdmFyIG1vbnRoc0Z1bGwgPSBbJ0phbnVhcnknLCAnRmVicnVhcnknLCAnTWFyY2gnLCAnQXByaWwnLCAnTWF5JywgJ0p1bmUnLCAnSnVseScsICdBdWd1c3QnLCAnU2VwdGVtYmVyJywgJ09jdG9iZXInLCAnTm92ZW1iZXInLCAnRGVjZW1iZXInXVxuICB2YXIgd2Vla2RheXMyY2hhciA9IFsnU3UnLCAnTW8nLCAnVHUnLCAnV2UnLCAnVGgnLCAnRnInLCAnU2EnXVxuICB2YXIgd2Vla2RheXMzY2hhciA9IFsnU3VuJywgJ01vbicsICdUdWUnLCAnV2VkJywgJ1RodScsICdGcmknLCAnU2F0J11cbiAgdmFyIHdlZWtkYXlzRnVsbCA9IFsnU3VuZGF5JywgJ01vbmRheScsICdUdWVzZGF5JywgJ1dlZG5lc2RheScsICdUaHVyc2RheScsICdGcmlkYXknLCAnU2F0dXJkYXknXVxuICB2YXIgbWVyaWRpZW1VcHBlcmNhc2UgPSBbJ0FNJywgJ1BNJ11cbiAgdmFyIG1lcmlkaWVtTG93ZXJjYXNlID0gWydhbScsICdwbSddXG4gIHZhciBtZXJpZGllbUZ1bGwgPSBbJ2EubS4nLCAncC5tLiddXG5cbiAgdmFyIGZvcm1hdHRlcnMgPSB7XG4gICAgLy8gTW9udGg6IEphbiwgRmViLCAuLi4sIERlY1xuICAgICdNTU0nOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgcmV0dXJuIG1vbnRoczNjaGFyW2RhdGUuZ2V0TW9udGgoKV1cbiAgICB9LFxuXG4gICAgLy8gTW9udGg6IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyXG4gICAgJ01NTU0nOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgcmV0dXJuIG1vbnRoc0Z1bGxbZGF0ZS5nZXRNb250aCgpXVxuICAgIH0sXG5cbiAgICAvLyBEYXkgb2Ygd2VlazogU3UsIE1vLCAuLi4sIFNhXG4gICAgJ2RkJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgIHJldHVybiB3ZWVrZGF5czJjaGFyW2RhdGUuZ2V0RGF5KCldXG4gICAgfSxcblxuICAgIC8vIERheSBvZiB3ZWVrOiBTdW4sIE1vbiwgLi4uLCBTYXRcbiAgICAnZGRkJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgIHJldHVybiB3ZWVrZGF5czNjaGFyW2RhdGUuZ2V0RGF5KCldXG4gICAgfSxcblxuICAgIC8vIERheSBvZiB3ZWVrOiBTdW5kYXksIE1vbmRheSwgLi4uLCBTYXR1cmRheVxuICAgICdkZGRkJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgIHJldHVybiB3ZWVrZGF5c0Z1bGxbZGF0ZS5nZXREYXkoKV1cbiAgICB9LFxuXG4gICAgLy8gQU0sIFBNXG4gICAgJ0EnOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgcmV0dXJuIChkYXRlLmdldEhvdXJzKCkgLyAxMikgPj0gMSA/IG1lcmlkaWVtVXBwZXJjYXNlWzFdIDogbWVyaWRpZW1VcHBlcmNhc2VbMF1cbiAgICB9LFxuXG4gICAgLy8gYW0sIHBtXG4gICAgJ2EnOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgcmV0dXJuIChkYXRlLmdldEhvdXJzKCkgLyAxMikgPj0gMSA/IG1lcmlkaWVtTG93ZXJjYXNlWzFdIDogbWVyaWRpZW1Mb3dlcmNhc2VbMF1cbiAgICB9LFxuXG4gICAgLy8gYS5tLiwgcC5tLlxuICAgICdhYSc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICByZXR1cm4gKGRhdGUuZ2V0SG91cnMoKSAvIDEyKSA+PSAxID8gbWVyaWRpZW1GdWxsWzFdIDogbWVyaWRpZW1GdWxsWzBdXG4gICAgfVxuICB9XG5cbiAgLy8gR2VuZXJhdGUgb3JkaW5hbCB2ZXJzaW9uIG9mIGZvcm1hdHRlcnM6IE0gLT4gTW8sIEQgLT4gRG8sIGV0Yy5cbiAgdmFyIG9yZGluYWxGb3JtYXR0ZXJzID0gWydNJywgJ0QnLCAnREREJywgJ2QnLCAnUScsICdXJ11cbiAgb3JkaW5hbEZvcm1hdHRlcnMuZm9yRWFjaChmdW5jdGlvbiAoZm9ybWF0dGVyVG9rZW4pIHtcbiAgICBmb3JtYXR0ZXJzW2Zvcm1hdHRlclRva2VuICsgJ28nXSA9IGZ1bmN0aW9uIChkYXRlLCBmb3JtYXR0ZXJzKSB7XG4gICAgICByZXR1cm4gb3JkaW5hbChmb3JtYXR0ZXJzW2Zvcm1hdHRlclRva2VuXShkYXRlKSlcbiAgICB9XG4gIH0pXG5cbiAgcmV0dXJuIHtcbiAgICBmb3JtYXR0ZXJzOiBmb3JtYXR0ZXJzLFxuICAgIGZvcm1hdHRpbmdUb2tlbnNSZWdFeHA6IGJ1aWxkRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cChmb3JtYXR0ZXJzKVxuICB9XG59XG5cbmZ1bmN0aW9uIG9yZGluYWwgKG51bWJlcikge1xuICB2YXIgcmVtMTAwID0gbnVtYmVyICUgMTAwXG4gIGlmIChyZW0xMDAgPiAyMCB8fCByZW0xMDAgPCAxMCkge1xuICAgIHN3aXRjaCAocmVtMTAwICUgMTApIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICdzdCdcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICduZCdcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICdyZCdcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bWJlciArICd0aCdcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBidWlsZEZvcm1hdExvY2FsZVxuIiwidmFyIGJ1aWxkRGlzdGFuY2VJbldvcmRzTG9jYWxlID0gcmVxdWlyZSgnLi9idWlsZF9kaXN0YW5jZV9pbl93b3Jkc19sb2NhbGUvaW5kZXguanMnKVxudmFyIGJ1aWxkRm9ybWF0TG9jYWxlID0gcmVxdWlyZSgnLi9idWlsZF9mb3JtYXRfbG9jYWxlL2luZGV4LmpzJylcblxuLyoqXG4gKiBAY2F0ZWdvcnkgTG9jYWxlc1xuICogQHN1bW1hcnkgRW5nbGlzaCBsb2NhbGUuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkaXN0YW5jZUluV29yZHM6IGJ1aWxkRGlzdGFuY2VJbldvcmRzTG9jYWxlKCksXG4gIGZvcm1hdDogYnVpbGRGb3JtYXRMb2NhbGUoKVxufVxuIiwidmFyIGlzRGF0ZSA9IHJlcXVpcmUoJy4uL2lzX2RhdGUvaW5kZXguanMnKVxuXG52YXIgTUlMTElTRUNPTkRTX0lOX0hPVVIgPSAzNjAwMDAwXG52YXIgTUlMTElTRUNPTkRTX0lOX01JTlVURSA9IDYwMDAwXG52YXIgREVGQVVMVF9BRERJVElPTkFMX0RJR0lUUyA9IDJcblxudmFyIHBhcnNlVG9rZW5EYXRlVGltZURlbGltZXRlciA9IC9bVCBdL1xudmFyIHBhcnNlVG9rZW5QbGFpblRpbWUgPSAvOi9cblxuLy8geWVhciB0b2tlbnNcbnZhciBwYXJzZVRva2VuWVkgPSAvXihcXGR7Mn0pJC9cbnZhciBwYXJzZVRva2Vuc1lZWSA9IFtcbiAgL14oWystXVxcZHsyfSkkLywgLy8gMCBhZGRpdGlvbmFsIGRpZ2l0c1xuICAvXihbKy1dXFxkezN9KSQvLCAvLyAxIGFkZGl0aW9uYWwgZGlnaXRcbiAgL14oWystXVxcZHs0fSkkLyAvLyAyIGFkZGl0aW9uYWwgZGlnaXRzXG5dXG5cbnZhciBwYXJzZVRva2VuWVlZWSA9IC9eKFxcZHs0fSkvXG52YXIgcGFyc2VUb2tlbnNZWVlZWSA9IFtcbiAgL14oWystXVxcZHs0fSkvLCAvLyAwIGFkZGl0aW9uYWwgZGlnaXRzXG4gIC9eKFsrLV1cXGR7NX0pLywgLy8gMSBhZGRpdGlvbmFsIGRpZ2l0XG4gIC9eKFsrLV1cXGR7Nn0pLyAvLyAyIGFkZGl0aW9uYWwgZGlnaXRzXG5dXG5cbi8vIGRhdGUgdG9rZW5zXG52YXIgcGFyc2VUb2tlbk1NID0gL14tKFxcZHsyfSkkL1xudmFyIHBhcnNlVG9rZW5EREQgPSAvXi0/KFxcZHszfSkkL1xudmFyIHBhcnNlVG9rZW5NTUREID0gL14tPyhcXGR7Mn0pLT8oXFxkezJ9KSQvXG52YXIgcGFyc2VUb2tlbld3dyA9IC9eLT9XKFxcZHsyfSkkL1xudmFyIHBhcnNlVG9rZW5Xd3dEID0gL14tP1coXFxkezJ9KS0/KFxcZHsxfSkkL1xuXG4vLyB0aW1lIHRva2Vuc1xudmFyIHBhcnNlVG9rZW5ISCA9IC9eKFxcZHsyfShbLixdXFxkKik/KSQvXG52YXIgcGFyc2VUb2tlbkhITU0gPSAvXihcXGR7Mn0pOj8oXFxkezJ9KFsuLF1cXGQqKT8pJC9cbnZhciBwYXJzZVRva2VuSEhNTVNTID0gL14oXFxkezJ9KTo/KFxcZHsyfSk6PyhcXGR7Mn0oWy4sXVxcZCopPykkL1xuXG4vLyB0aW1lem9uZSB0b2tlbnNcbnZhciBwYXJzZVRva2VuVGltZXpvbmUgPSAvKFtaKy1dLiopJC9cbnZhciBwYXJzZVRva2VuVGltZXpvbmVaID0gL14oWikkL1xudmFyIHBhcnNlVG9rZW5UaW1lem9uZUhIID0gL14oWystXSkoXFxkezJ9KSQvXG52YXIgcGFyc2VUb2tlblRpbWV6b25lSEhNTSA9IC9eKFsrLV0pKFxcZHsyfSk6PyhcXGR7Mn0pJC9cblxuLyoqXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBpdHMgY2xvbmUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgbnVtYmVyLCBpdCBpcyB0cmVhdGVkIGFzIGEgdGltZXN0YW1wLlxuICpcbiAqIElmIGFuIGFyZ3VtZW50IGlzIGEgc3RyaW5nLCB0aGUgZnVuY3Rpb24gdHJpZXMgdG8gcGFyc2UgaXQuXG4gKiBGdW5jdGlvbiBhY2NlcHRzIGNvbXBsZXRlIElTTyA4NjAxIGZvcm1hdHMgYXMgd2VsbCBhcyBwYXJ0aWFsIGltcGxlbWVudGF0aW9ucy5cbiAqIElTTyA4NjAxOiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT184NjAxXG4gKlxuICogSWYgYWxsIGFib3ZlIGZhaWxzLCB0aGUgZnVuY3Rpb24gcGFzc2VzIHRoZSBnaXZlbiBhcmd1bWVudCB0byBEYXRlIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxTdHJpbmd8TnVtYmVyfSBhcmd1bWVudCAtIHRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gdGhlIG9iamVjdCB3aXRoIG9wdGlvbnNcbiAqIEBwYXJhbSB7MCB8IDEgfCAyfSBbb3B0aW9ucy5hZGRpdGlvbmFsRGlnaXRzPTJdIC0gdGhlIGFkZGl0aW9uYWwgbnVtYmVyIG9mIGRpZ2l0cyBpbiB0aGUgZXh0ZW5kZWQgeWVhciBmb3JtYXRcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgcGFyc2VkIGRhdGUgaW4gdGhlIGxvY2FsIHRpbWUgem9uZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDb252ZXJ0IHN0cmluZyAnMjAxNC0wMi0xMVQxMTozMDozMCcgdG8gZGF0ZTpcbiAqIHZhciByZXN1bHQgPSBwYXJzZSgnMjAxNC0wMi0xMVQxMTozMDozMCcpXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBQYXJzZSBzdHJpbmcgJyswMjAxNDEwMScsXG4gKiAvLyBpZiB0aGUgYWRkaXRpb25hbCBudW1iZXIgb2YgZGlnaXRzIGluIHRoZSBleHRlbmRlZCB5ZWFyIGZvcm1hdCBpcyAxOlxuICogdmFyIHJlc3VsdCA9IHBhcnNlKCcrMDIwMTQxMDEnLCB7YWRkaXRpb25hbERpZ2l0czogMX0pXG4gKiAvLz0+IEZyaSBBcHIgMTEgMjAxNCAwMDowMDowMFxuICovXG5mdW5jdGlvbiBwYXJzZSAoYXJndW1lbnQsIGRpcnR5T3B0aW9ucykge1xuICBpZiAoaXNEYXRlKGFyZ3VtZW50KSkge1xuICAgIC8vIFByZXZlbnQgdGhlIGRhdGUgdG8gbG9zZSB0aGUgbWlsbGlzZWNvbmRzIHdoZW4gcGFzc2VkIHRvIG5ldyBEYXRlKCkgaW4gSUUxMFxuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudC5nZXRUaW1lKCkpXG4gIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3VtZW50ICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudClcbiAgfVxuXG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9XG4gIHZhciBhZGRpdGlvbmFsRGlnaXRzID0gb3B0aW9ucy5hZGRpdGlvbmFsRGlnaXRzXG4gIGlmIChhZGRpdGlvbmFsRGlnaXRzID09IG51bGwpIHtcbiAgICBhZGRpdGlvbmFsRGlnaXRzID0gREVGQVVMVF9BRERJVElPTkFMX0RJR0lUU1xuICB9IGVsc2Uge1xuICAgIGFkZGl0aW9uYWxEaWdpdHMgPSBOdW1iZXIoYWRkaXRpb25hbERpZ2l0cylcbiAgfVxuXG4gIHZhciBkYXRlU3RyaW5ncyA9IHNwbGl0RGF0ZVN0cmluZyhhcmd1bWVudClcblxuICB2YXIgcGFyc2VZZWFyUmVzdWx0ID0gcGFyc2VZZWFyKGRhdGVTdHJpbmdzLmRhdGUsIGFkZGl0aW9uYWxEaWdpdHMpXG4gIHZhciB5ZWFyID0gcGFyc2VZZWFyUmVzdWx0LnllYXJcbiAgdmFyIHJlc3REYXRlU3RyaW5nID0gcGFyc2VZZWFyUmVzdWx0LnJlc3REYXRlU3RyaW5nXG5cbiAgdmFyIGRhdGUgPSBwYXJzZURhdGUocmVzdERhdGVTdHJpbmcsIHllYXIpXG5cbiAgaWYgKGRhdGUpIHtcbiAgICB2YXIgdGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKClcbiAgICB2YXIgdGltZSA9IDBcbiAgICB2YXIgb2Zmc2V0XG5cbiAgICBpZiAoZGF0ZVN0cmluZ3MudGltZSkge1xuICAgICAgdGltZSA9IHBhcnNlVGltZShkYXRlU3RyaW5ncy50aW1lKVxuICAgIH1cblxuICAgIGlmIChkYXRlU3RyaW5ncy50aW1lem9uZSkge1xuICAgICAgb2Zmc2V0ID0gcGFyc2VUaW1lem9uZShkYXRlU3RyaW5ncy50aW1lem9uZSlcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZ2V0IG9mZnNldCBhY2N1cmF0ZSB0byBob3VyIGluIHRpbWV6b25lcyB0aGF0IGNoYW5nZSBvZmZzZXRcbiAgICAgIG9mZnNldCA9IG5ldyBEYXRlKHRpbWVzdGFtcCArIHRpbWUpLmdldFRpbWV6b25lT2Zmc2V0KClcbiAgICAgIG9mZnNldCA9IG5ldyBEYXRlKHRpbWVzdGFtcCArIHRpbWUgKyBvZmZzZXQgKiBNSUxMSVNFQ09ORFNfSU5fTUlOVVRFKS5nZXRUaW1lem9uZU9mZnNldCgpXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCArIHRpbWUgKyBvZmZzZXQgKiBNSUxMSVNFQ09ORFNfSU5fTUlOVVRFKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudClcbiAgfVxufVxuXG5mdW5jdGlvbiBzcGxpdERhdGVTdHJpbmcgKGRhdGVTdHJpbmcpIHtcbiAgdmFyIGRhdGVTdHJpbmdzID0ge31cbiAgdmFyIGFycmF5ID0gZGF0ZVN0cmluZy5zcGxpdChwYXJzZVRva2VuRGF0ZVRpbWVEZWxpbWV0ZXIpXG4gIHZhciB0aW1lU3RyaW5nXG5cbiAgaWYgKHBhcnNlVG9rZW5QbGFpblRpbWUudGVzdChhcnJheVswXSkpIHtcbiAgICBkYXRlU3RyaW5ncy5kYXRlID0gbnVsbFxuICAgIHRpbWVTdHJpbmcgPSBhcnJheVswXVxuICB9IGVsc2Uge1xuICAgIGRhdGVTdHJpbmdzLmRhdGUgPSBhcnJheVswXVxuICAgIHRpbWVTdHJpbmcgPSBhcnJheVsxXVxuICB9XG5cbiAgaWYgKHRpbWVTdHJpbmcpIHtcbiAgICB2YXIgdG9rZW4gPSBwYXJzZVRva2VuVGltZXpvbmUuZXhlYyh0aW1lU3RyaW5nKVxuICAgIGlmICh0b2tlbikge1xuICAgICAgZGF0ZVN0cmluZ3MudGltZSA9IHRpbWVTdHJpbmcucmVwbGFjZSh0b2tlblsxXSwgJycpXG4gICAgICBkYXRlU3RyaW5ncy50aW1lem9uZSA9IHRva2VuWzFdXG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGVTdHJpbmdzLnRpbWUgPSB0aW1lU3RyaW5nXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGVTdHJpbmdzXG59XG5cbmZ1bmN0aW9uIHBhcnNlWWVhciAoZGF0ZVN0cmluZywgYWRkaXRpb25hbERpZ2l0cykge1xuICB2YXIgcGFyc2VUb2tlbllZWSA9IHBhcnNlVG9rZW5zWVlZW2FkZGl0aW9uYWxEaWdpdHNdXG4gIHZhciBwYXJzZVRva2VuWVlZWVkgPSBwYXJzZVRva2Vuc1lZWVlZW2FkZGl0aW9uYWxEaWdpdHNdXG5cbiAgdmFyIHRva2VuXG5cbiAgLy8gWVlZWSBvciDCsVlZWVlZXG4gIHRva2VuID0gcGFyc2VUb2tlbllZWVkuZXhlYyhkYXRlU3RyaW5nKSB8fCBwYXJzZVRva2VuWVlZWVkuZXhlYyhkYXRlU3RyaW5nKVxuICBpZiAodG9rZW4pIHtcbiAgICB2YXIgeWVhclN0cmluZyA9IHRva2VuWzFdXG4gICAgcmV0dXJuIHtcbiAgICAgIHllYXI6IHBhcnNlSW50KHllYXJTdHJpbmcsIDEwKSxcbiAgICAgIHJlc3REYXRlU3RyaW5nOiBkYXRlU3RyaW5nLnNsaWNlKHllYXJTdHJpbmcubGVuZ3RoKVxuICAgIH1cbiAgfVxuXG4gIC8vIFlZIG9yIMKxWVlZXG4gIHRva2VuID0gcGFyc2VUb2tlbllZLmV4ZWMoZGF0ZVN0cmluZykgfHwgcGFyc2VUb2tlbllZWS5leGVjKGRhdGVTdHJpbmcpXG4gIGlmICh0b2tlbikge1xuICAgIHZhciBjZW50dXJ5U3RyaW5nID0gdG9rZW5bMV1cbiAgICByZXR1cm4ge1xuICAgICAgeWVhcjogcGFyc2VJbnQoY2VudHVyeVN0cmluZywgMTApICogMTAwLFxuICAgICAgcmVzdERhdGVTdHJpbmc6IGRhdGVTdHJpbmcuc2xpY2UoY2VudHVyeVN0cmluZy5sZW5ndGgpXG4gICAgfVxuICB9XG5cbiAgLy8gSW52YWxpZCBJU08tZm9ybWF0dGVkIHllYXJcbiAgcmV0dXJuIHtcbiAgICB5ZWFyOiBudWxsXG4gIH1cbn1cblxuZnVuY3Rpb24gcGFyc2VEYXRlIChkYXRlU3RyaW5nLCB5ZWFyKSB7XG4gIC8vIEludmFsaWQgSVNPLWZvcm1hdHRlZCB5ZWFyXG4gIGlmICh5ZWFyID09PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHZhciB0b2tlblxuICB2YXIgZGF0ZVxuICB2YXIgbW9udGhcbiAgdmFyIHdlZWtcblxuICAvLyBZWVlZXG4gIGlmIChkYXRlU3RyaW5nLmxlbmd0aCA9PT0gMCkge1xuICAgIGRhdGUgPSBuZXcgRGF0ZSgwKVxuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoeWVhcilcbiAgICByZXR1cm4gZGF0ZVxuICB9XG5cbiAgLy8gWVlZWS1NTVxuICB0b2tlbiA9IHBhcnNlVG9rZW5NTS5leGVjKGRhdGVTdHJpbmcpXG4gIGlmICh0b2tlbikge1xuICAgIGRhdGUgPSBuZXcgRGF0ZSgwKVxuICAgIG1vbnRoID0gcGFyc2VJbnQodG9rZW5bMV0sIDEwKSAtIDFcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHllYXIsIG1vbnRoKVxuICAgIHJldHVybiBkYXRlXG4gIH1cblxuICAvLyBZWVlZLURERCBvciBZWVlZREREXG4gIHRva2VuID0gcGFyc2VUb2tlbkRERC5leGVjKGRhdGVTdHJpbmcpXG4gIGlmICh0b2tlbikge1xuICAgIGRhdGUgPSBuZXcgRGF0ZSgwKVxuICAgIHZhciBkYXlPZlllYXIgPSBwYXJzZUludCh0b2tlblsxXSwgMTApXG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBkYXlPZlllYXIpXG4gICAgcmV0dXJuIGRhdGVcbiAgfVxuXG4gIC8vIFlZWVktTU0tREQgb3IgWVlZWU1NRERcbiAgdG9rZW4gPSBwYXJzZVRva2VuTU1ERC5leGVjKGRhdGVTdHJpbmcpXG4gIGlmICh0b2tlbikge1xuICAgIGRhdGUgPSBuZXcgRGF0ZSgwKVxuICAgIG1vbnRoID0gcGFyc2VJbnQodG9rZW5bMV0sIDEwKSAtIDFcbiAgICB2YXIgZGF5ID0gcGFyc2VJbnQodG9rZW5bMl0sIDEwKVxuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoeWVhciwgbW9udGgsIGRheSlcbiAgICByZXR1cm4gZGF0ZVxuICB9XG5cbiAgLy8gWVlZWS1Xd3cgb3IgWVlZWVd3d1xuICB0b2tlbiA9IHBhcnNlVG9rZW5Xd3cuZXhlYyhkYXRlU3RyaW5nKVxuICBpZiAodG9rZW4pIHtcbiAgICB3ZWVrID0gcGFyc2VJbnQodG9rZW5bMV0sIDEwKSAtIDFcbiAgICByZXR1cm4gZGF5T2ZJU09ZZWFyKHllYXIsIHdlZWspXG4gIH1cblxuICAvLyBZWVlZLVd3dy1EIG9yIFlZWVlXd3dEXG4gIHRva2VuID0gcGFyc2VUb2tlbld3d0QuZXhlYyhkYXRlU3RyaW5nKVxuICBpZiAodG9rZW4pIHtcbiAgICB3ZWVrID0gcGFyc2VJbnQodG9rZW5bMV0sIDEwKSAtIDFcbiAgICB2YXIgZGF5T2ZXZWVrID0gcGFyc2VJbnQodG9rZW5bMl0sIDEwKSAtIDFcbiAgICByZXR1cm4gZGF5T2ZJU09ZZWFyKHllYXIsIHdlZWssIGRheU9mV2VlaylcbiAgfVxuXG4gIC8vIEludmFsaWQgSVNPLWZvcm1hdHRlZCBkYXRlXG4gIHJldHVybiBudWxsXG59XG5cbmZ1bmN0aW9uIHBhcnNlVGltZSAodGltZVN0cmluZykge1xuICB2YXIgdG9rZW5cbiAgdmFyIGhvdXJzXG4gIHZhciBtaW51dGVzXG5cbiAgLy8gaGhcbiAgdG9rZW4gPSBwYXJzZVRva2VuSEguZXhlYyh0aW1lU3RyaW5nKVxuICBpZiAodG9rZW4pIHtcbiAgICBob3VycyA9IHBhcnNlRmxvYXQodG9rZW5bMV0ucmVwbGFjZSgnLCcsICcuJykpXG4gICAgcmV0dXJuIChob3VycyAlIDI0KSAqIE1JTExJU0VDT05EU19JTl9IT1VSXG4gIH1cblxuICAvLyBoaDptbSBvciBoaG1tXG4gIHRva2VuID0gcGFyc2VUb2tlbkhITU0uZXhlYyh0aW1lU3RyaW5nKVxuICBpZiAodG9rZW4pIHtcbiAgICBob3VycyA9IHBhcnNlSW50KHRva2VuWzFdLCAxMClcbiAgICBtaW51dGVzID0gcGFyc2VGbG9hdCh0b2tlblsyXS5yZXBsYWNlKCcsJywgJy4nKSlcbiAgICByZXR1cm4gKGhvdXJzICUgMjQpICogTUlMTElTRUNPTkRTX0lOX0hPVVIgK1xuICAgICAgbWludXRlcyAqIE1JTExJU0VDT05EU19JTl9NSU5VVEVcbiAgfVxuXG4gIC8vIGhoOm1tOnNzIG9yIGhobW1zc1xuICB0b2tlbiA9IHBhcnNlVG9rZW5ISE1NU1MuZXhlYyh0aW1lU3RyaW5nKVxuICBpZiAodG9rZW4pIHtcbiAgICBob3VycyA9IHBhcnNlSW50KHRva2VuWzFdLCAxMClcbiAgICBtaW51dGVzID0gcGFyc2VJbnQodG9rZW5bMl0sIDEwKVxuICAgIHZhciBzZWNvbmRzID0gcGFyc2VGbG9hdCh0b2tlblszXS5yZXBsYWNlKCcsJywgJy4nKSlcbiAgICByZXR1cm4gKGhvdXJzICUgMjQpICogTUlMTElTRUNPTkRTX0lOX0hPVVIgK1xuICAgICAgbWludXRlcyAqIE1JTExJU0VDT05EU19JTl9NSU5VVEUgK1xuICAgICAgc2Vjb25kcyAqIDEwMDBcbiAgfVxuXG4gIC8vIEludmFsaWQgSVNPLWZvcm1hdHRlZCB0aW1lXG4gIHJldHVybiBudWxsXG59XG5cbmZ1bmN0aW9uIHBhcnNlVGltZXpvbmUgKHRpbWV6b25lU3RyaW5nKSB7XG4gIHZhciB0b2tlblxuICB2YXIgYWJzb2x1dGVPZmZzZXRcblxuICAvLyBaXG4gIHRva2VuID0gcGFyc2VUb2tlblRpbWV6b25lWi5leGVjKHRpbWV6b25lU3RyaW5nKVxuICBpZiAodG9rZW4pIHtcbiAgICByZXR1cm4gMFxuICB9XG5cbiAgLy8gwrFoaFxuICB0b2tlbiA9IHBhcnNlVG9rZW5UaW1lem9uZUhILmV4ZWModGltZXpvbmVTdHJpbmcpXG4gIGlmICh0b2tlbikge1xuICAgIGFic29sdXRlT2Zmc2V0ID0gcGFyc2VJbnQodG9rZW5bMl0sIDEwKSAqIDYwXG4gICAgcmV0dXJuICh0b2tlblsxXSA9PT0gJysnKSA/IC1hYnNvbHV0ZU9mZnNldCA6IGFic29sdXRlT2Zmc2V0XG4gIH1cblxuICAvLyDCsWhoOm1tIG9yIMKxaGhtbVxuICB0b2tlbiA9IHBhcnNlVG9rZW5UaW1lem9uZUhITU0uZXhlYyh0aW1lem9uZVN0cmluZylcbiAgaWYgKHRva2VuKSB7XG4gICAgYWJzb2x1dGVPZmZzZXQgPSBwYXJzZUludCh0b2tlblsyXSwgMTApICogNjAgKyBwYXJzZUludCh0b2tlblszXSwgMTApXG4gICAgcmV0dXJuICh0b2tlblsxXSA9PT0gJysnKSA/IC1hYnNvbHV0ZU9mZnNldCA6IGFic29sdXRlT2Zmc2V0XG4gIH1cblxuICByZXR1cm4gMFxufVxuXG5mdW5jdGlvbiBkYXlPZklTT1llYXIgKGlzb1llYXIsIHdlZWssIGRheSkge1xuICB3ZWVrID0gd2VlayB8fCAwXG4gIGRheSA9IGRheSB8fCAwXG4gIHZhciBkYXRlID0gbmV3IERhdGUoMClcbiAgZGF0ZS5zZXRVVENGdWxsWWVhcihpc29ZZWFyLCAwLCA0KVxuICB2YXIgZm91cnRoT2ZKYW51YXJ5RGF5ID0gZGF0ZS5nZXRVVENEYXkoKSB8fCA3XG4gIHZhciBkaWZmID0gd2VlayAqIDcgKyBkYXkgKyAxIC0gZm91cnRoT2ZKYW51YXJ5RGF5XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIGRpZmYpXG4gIHJldHVybiBkYXRlXG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyc2VcbiIsInZhciBwYXJzZSA9IHJlcXVpcmUoJy4uL3BhcnNlL2luZGV4LmpzJylcblxuLyoqXG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYSBkYXkgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhIGRheSBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxTdHJpbmd8TnVtYmVyfSBkYXRlIC0gdGhlIG9yaWdpbmFsIGRhdGVcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgc3RhcnQgb2YgYSBkYXlcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGEgZGF5IGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogdmFyIHJlc3VsdCA9IHN0YXJ0T2ZEYXkobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSlcbiAqIC8vPT4gVHVlIFNlcCAwMiAyMDE0IDAwOjAwOjAwXG4gKi9cbmZ1bmN0aW9uIHN0YXJ0T2ZEYXkgKGRpcnR5RGF0ZSkge1xuICB2YXIgZGF0ZSA9IHBhcnNlKGRpcnR5RGF0ZSlcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKVxuICByZXR1cm4gZGF0ZVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YXJ0T2ZEYXlcbiIsInZhciBzdGFydE9mV2VlayA9IHJlcXVpcmUoJy4uL3N0YXJ0X29mX3dlZWsvaW5kZXguanMnKVxuXG4vKipcbiAqIEBjYXRlZ29yeSBJU08gV2VlayBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIHN0YXJ0IG9mIGFuIElTTyB3ZWVrIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgc3RhcnQgb2YgYW4gSVNPIHdlZWsgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiBJU08gd2Vlay1udW1iZXJpbmcgeWVhcjogaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlXG4gKlxuICogQHBhcmFtIHtEYXRlfFN0cmluZ3xOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHJldHVybnMge0RhdGV9IHRoZSBzdGFydCBvZiBhbiBJU08gd2Vla1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBUaGUgc3RhcnQgb2YgYW4gSVNPIHdlZWsgZm9yIDIgU2VwdGVtYmVyIDIwMTQgMTE6NTU6MDA6XG4gKiB2YXIgcmVzdWx0ID0gc3RhcnRPZklTT1dlZWsobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSlcbiAqIC8vPT4gTW9uIFNlcCAwMSAyMDE0IDAwOjAwOjAwXG4gKi9cbmZ1bmN0aW9uIHN0YXJ0T2ZJU09XZWVrIChkaXJ0eURhdGUpIHtcbiAgcmV0dXJuIHN0YXJ0T2ZXZWVrKGRpcnR5RGF0ZSwge3dlZWtTdGFydHNPbjogMX0pXG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhcnRPZklTT1dlZWtcbiIsInZhciBnZXRJU09ZZWFyID0gcmVxdWlyZSgnLi4vZ2V0X2lzb195ZWFyL2luZGV4LmpzJylcbnZhciBzdGFydE9mSVNPV2VlayA9IHJlcXVpcmUoJy4uL3N0YXJ0X29mX2lzb193ZWVrL2luZGV4LmpzJylcblxuLyoqXG4gKiBAY2F0ZWdvcnkgSVNPIFdlZWstTnVtYmVyaW5nIFllYXIgSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBzdGFydCBvZiBhbiBJU08gd2Vlay1udW1iZXJpbmcgeWVhciBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIHN0YXJ0IG9mIGFuIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyLFxuICogd2hpY2ggYWx3YXlzIHN0YXJ0cyAzIGRheXMgYmVmb3JlIHRoZSB5ZWFyJ3MgZmlyc3QgVGh1cnNkYXkuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyOiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGVcbiAqXG4gKiBAcGFyYW0ge0RhdGV8U3RyaW5nfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHN0YXJ0IG9mIGFuIElTTyB5ZWFyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBzdGFydCBvZiBhbiBJU08gd2Vlay1udW1iZXJpbmcgeWVhciBmb3IgMiBKdWx5IDIwMDU6XG4gKiB2YXIgcmVzdWx0ID0gc3RhcnRPZklTT1llYXIobmV3IERhdGUoMjAwNSwgNiwgMikpXG4gKiAvLz0+IE1vbiBKYW4gMDMgMjAwNSAwMDowMDowMFxuICovXG5mdW5jdGlvbiBzdGFydE9mSVNPWWVhciAoZGlydHlEYXRlKSB7XG4gIHZhciB5ZWFyID0gZ2V0SVNPWWVhcihkaXJ0eURhdGUpXG4gIHZhciBmb3VydGhPZkphbnVhcnkgPSBuZXcgRGF0ZSgwKVxuICBmb3VydGhPZkphbnVhcnkuc2V0RnVsbFllYXIoeWVhciwgMCwgNClcbiAgZm91cnRoT2ZKYW51YXJ5LnNldEhvdXJzKDAsIDAsIDAsIDApXG4gIHZhciBkYXRlID0gc3RhcnRPZklTT1dlZWsoZm91cnRoT2ZKYW51YXJ5KVxuICByZXR1cm4gZGF0ZVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YXJ0T2ZJU09ZZWFyXG4iLCJ2YXIgcGFyc2UgPSByZXF1aXJlKCcuLi9wYXJzZS9pbmRleC5qcycpXG5cbi8qKlxuICogQGNhdGVnb3J5IFdlZWsgSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBzdGFydCBvZiBhIHdlZWsgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhIHdlZWsgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8U3RyaW5nfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gdGhlIG9iamVjdCB3aXRoIG9wdGlvbnNcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy53ZWVrU3RhcnRzT249MF0gLSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayAoMCAtIFN1bmRheSlcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgc3RhcnQgb2YgYSB3ZWVrXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBzdGFydCBvZiBhIHdlZWsgZm9yIDIgU2VwdGVtYmVyIDIwMTQgMTE6NTU6MDA6XG4gKiB2YXIgcmVzdWx0ID0gc3RhcnRPZldlZWsobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSlcbiAqIC8vPT4gU3VuIEF1ZyAzMSAyMDE0IDAwOjAwOjAwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElmIHRoZSB3ZWVrIHN0YXJ0cyBvbiBNb25kYXksIHRoZSBzdGFydCBvZiB0aGUgd2VlayBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIHZhciByZXN1bHQgPSBzdGFydE9mV2VlayhuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApLCB7d2Vla1N0YXJ0c09uOiAxfSlcbiAqIC8vPT4gTW9uIFNlcCAwMSAyMDE0IDAwOjAwOjAwXG4gKi9cbmZ1bmN0aW9uIHN0YXJ0T2ZXZWVrIChkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICB2YXIgd2Vla1N0YXJ0c09uID0gZGlydHlPcHRpb25zID8gKE51bWJlcihkaXJ0eU9wdGlvbnMud2Vla1N0YXJ0c09uKSB8fCAwKSA6IDBcblxuICB2YXIgZGF0ZSA9IHBhcnNlKGRpcnR5RGF0ZSlcbiAgdmFyIGRheSA9IGRhdGUuZ2V0RGF5KClcbiAgdmFyIGRpZmYgPSAoZGF5IDwgd2Vla1N0YXJ0c09uID8gNyA6IDApICsgZGF5IC0gd2Vla1N0YXJ0c09uXG5cbiAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpIC0gZGlmZilcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKVxuICByZXR1cm4gZGF0ZVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YXJ0T2ZXZWVrXG4iLCJ2YXIgcGFyc2UgPSByZXF1aXJlKCcuLi9wYXJzZS9pbmRleC5qcycpXG5cbi8qKlxuICogQGNhdGVnb3J5IFllYXIgSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBzdGFydCBvZiBhIHllYXIgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhIHllYXIgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8U3RyaW5nfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHN0YXJ0IG9mIGEgeWVhclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBUaGUgc3RhcnQgb2YgYSB5ZWFyIGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogdmFyIHJlc3VsdCA9IHN0YXJ0T2ZZZWFyKG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMDApKVxuICogLy89PiBXZWQgSmFuIDAxIDIwMTQgMDA6MDA6MDBcbiAqL1xuZnVuY3Rpb24gc3RhcnRPZlllYXIgKGRpcnR5RGF0ZSkge1xuICB2YXIgY2xlYW5EYXRlID0gcGFyc2UoZGlydHlEYXRlKVxuICB2YXIgZGF0ZSA9IG5ldyBEYXRlKDApXG4gIGRhdGUuc2V0RnVsbFllYXIoY2xlYW5EYXRlLmdldEZ1bGxZZWFyKCksIDAsIDEpXG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMClcbiAgcmV0dXJuIGRhdGVcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFydE9mWWVhclxuIl0sInNvdXJjZVJvb3QiOiIifQ==
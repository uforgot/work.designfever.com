!function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=2)}({"../login/checkinController.js":
/*!*************************************!*\
  !*** ../login/checkinController.js ***!
  \*************************************/
/*! no static exports found */function(e,t){e.exports=function(){var e=document.querySelector(".sec-login .wrapper-checkin"),t=e.querySelector(".area-check-inout.area-checkin"),o=e.querySelector(".area-check-inout.area-checkout"),n=document.getElementById("id_checkin"),r=document.getElementById("id_checkout"),a=document.getElementById("id_btn_checkout_re"),i=0,s=null;function d(){if(s=window.df.workgroup.GlobalVars.infoData.user,document.getElementById("id_user_name").textContent=s.name,document.getElementById("id_user_position").textContent=s.position,s.isLoggedIn)if(s.isCheckin){var e=document.getElementById("id_checkin_time"),t=new Date(s.checkin_time);e.textContent=t.getHours()+"시 "+window.df.workgroup.Util.addZeroNumber(t.getMinutes())+"분";var o=document.getElementById("id_checkout_able_time"),n=new Date(s.checkout_able_time);if(o.textContent=n.getHours()+"시 "+window.df.workgroup.Util.addZeroNumber(n.getMinutes())+"분",!0,s.isCheckout){u();var r=document.getElementById("id_checkout_time"),a=new Date(s.checkout_time),d=a.getHours();a.getDate()-t.getDate()>0&&(d=24*(a.getDate()-t.getDate())+a.getHours()),r.textContent=d+"시 "+window.df.workgroup.Util.addZeroNumber(a.getMinutes())+"분"}else u(),l(),i=setInterval(l,1e3)}else u();else u()}function l(){if(s.isCheckin){var e=s.checkout_able_time-s.checkin_time,t=(window.df.workgroup.GlobalVars.time_now-s.checkin_time)/e;t<0&&(t=0),t>1&&(t=1);var n=Math.round(100*t)+"%";document.getElementById("id_per_time").style.width=n,function(e){e?df.lab.Util.addClass(o,"checkout-able"):df.lab.Util.removeClass(o,"checkout-able")}(t>=0)}else u()}function u(){!1,clearInterval(i)}function c(){var e=window.df.workgroup.GlobalVars.infoData;void 0!=e.preset&&void 0!=e.preset.json_url&&void 0!=e.preset.json_url.checkin?n.action=e.preset.json_url.checkin:n.action=window.df.workgroup.Preset.json_url.checkin,void 0!=e.preset&&void 0!=e.preset.json_url&&void 0!=e.preset.json_url.checkout?r.action=e.preset.json_url.checkout:r.action=window.df.workgroup.Preset.json_url.checkout}function f(e){e.preventDefault(),g()}function m(e){e.preventDefault(),function(){var e=t.querySelector(".ui-loading");df.lab.Util.addClass(e,window.df.workgroup.Preset.class_name.showIn),p()}(),k(n,_)}function w(e){e.preventDefault(),g()}function g(){return function(){var e=o.querySelector(".ui-loading");df.lab.Util.addClass(e,window.df.workgroup.Preset.class_name.showIn),h()}(),k(r,v),!1}function p(){for(var e=n.querySelectorAll("input"),t=0;t<e.length;t++)e[t].setAttribute("disabled","")}function h(){for(var e=r.querySelectorAll("input"),t=0;t<e.length;t++)e[t].setAttribute("disabled","")}function _(e){var o=t.querySelector(".ui-loading");df.lab.Util.removeClass(o,window.df.workgroup.Preset.class_name.showIn),function(e){var t=new CustomEvent(window.df.workgroup.Preset.eventType.ON_CHECKIN,{detail:{response:e}});document.dispatchEvent(t)}(e);var n=C(e);n.isWarning&&(console.log("status.text : ",n.text),b(n.text))}function v(e){var t=o.querySelector(".ui-loading");df.lab.Util.removeClass(t,window.df.workgroup.Preset.class_name.showIn),function(e){var t=new CustomEvent(window.df.workgroup.Preset.eventType.ON_CHECKOUT,{detail:{response:e}});document.dispatchEvent(t)}(e);var n=C(e);n.isWarning&&b(n.text)}function C(e){var t={isWarning:!1,text:"표시할 메세지가 없습니다."},o=JSON.parse(e.target.responseText),n=o.user.status;if(n.toLowerCase()=="L00".toLowerCase()||n.toLowerCase()=="C10".toLowerCase()||n.toLowerCase()=="C01".toLowerCase()||n.toLowerCase()=="C02".toLowerCase()||n.toLowerCase()=="C03".toLowerCase()||n.toLowerCase()=="C04".toLowerCase()||n.toLowerCase()=="C05".toLowerCase()||n.toLowerCase()=="C11".toLowerCase()||n.toLowerCase()=="C12".toLowerCase()||n.toLowerCase()=="C13".toLowerCase()||n.toLowerCase()=="C14".toLowerCase()||n.toLowerCase()=="C15".toLowerCase())for(var r=o.preset.status_list,a=0;a<r.length;a++){var i=r[a];if(i.code.toLowerCase()==n.toLowerCase()){t.isWarning=!0,t.text=i.text;break}}return t}function b(e){var t=new CustomEvent(window.df.workgroup.Preset.eventType.ON_WARNING,{detail:{message:e}});document.dispatchEvent(t)}function k(e,t){for(var o={},n=0,r=e.length;n<r;++n){var a=e[n];a.name&&(o[a.name]=a.value)}var i={method:e.method,action:df.workgroup.Util.addParamUniq(e.action)};df.workgroup.Util.load_json(i.action,i.method,t,o)}return{init:function(){d(),c(),n.addEventListener("submit",m),r.addEventListener("submit",w),a.addEventListener("click",f),p(),h()},showCheckinBtn:function(){d(),c(),df.lab.Util.addClass(e,window.df.workgroup.Preset.class_name.showIn),function(){for(var e=n.querySelectorAll("input"),t=0;t<e.length;t++)e[t].removeAttribute("disabled")}(),h()},showCheckoutBtn:function(){d(),c(),df.lab.Util.addClass(e,"checked"),p(),function(){for(var e=r.querySelectorAll("input"),t=0;t<e.length;t++)e[t].removeAttribute("disabled")}()},showCheckoutText:function(){d(),c(),df.lab.Util.addClass(e,"checkedout"),p(),h()},hideCheckinBtn:function(){df.lab.Util.removeClass(e,window.df.workgroup.Preset.class_name.showIn),df.lab.Util.removeClass(e,"checked"),df.lab.Util.removeClass(e,"checkedout"),p(),h()}}}},"../login/df.workgroup.login_new.js":
/*!******************************************!*\
  !*** ../login/df.workgroup.login_new.js ***!
  \******************************************/
/*! no exports provided */function(e,t,o){"use strict";o.r(t);var n=o(/*! ./loginClock */"../login/loginClock.js"),r=o.n(n),a=o(/*! ./loginDate */"../login/loginDate.js"),i=o.n(a),s=o(/*! ./loginBgController */"../login/loginBgController.js"),d=o.n(s),l=o(/*! ./loginFieldController */"../login/loginFieldController.js"),u=o.n(l),c=o(/*! ./logoutController */"../login/logoutController.js"),f=o.n(c),m=o(/*! ./checkinController */"../login/checkinController.js"),w=o.n(m),g=o(/*! ./startStopController */"../login/startStopController.js"),p=o.n(g),h=o(/*! ./loginInfoController */"../login/loginInfoController.js"),_=o.n(h),v=o(/*! ./loginUtilController */"../login/loginUtilController.js"),C=o.n(v),b=o(/*! ./modalController */"../login/modalController.js"),k=o.n(b);window.df=window.df||{},window.df.workgroup=window.df.workgroup||{},window.df.workgroup.login=function(e){var t,o,n="[ login ]",a=document.getElementById("id_bg_frame"),s=document.getElementById("id_container_clock"),l=document.querySelector(".sec-date .wrapper-date"),c=e,m=0,g=new r.a(s,c),h=new i.a(l,c),v=new d.a(a,c),b=new u.a,y=new f.a,x=new w.a,I=new p.a,T=new _.a,E=new C.a,L=new k.a,S=null,D=!1,U=0;function M(){void 0!=c.info&&void 0!=c.info.date&&void 0!=c.info.date.server_time&&(m=c.info.date.server_time-(new Date).getTime(),console.log(n+" [server time] : ",c.info.date.server_time," [client time] : ",(new Date).getTime()," [_offsetTime] : ",m))}function j(e){var t=JSON.parse(e.target.responseText);console.log(n+" << _resetData>> ",t),window.df.workgroup.GlobalVars.infoData=t,c=window.df.workgroup.GlobalVars.infoData,M()}function P(e){j(e.detail.response),H()}function O(e){j(e.detail.response),H()}function N(e){j(e.detail.response),H()}function W(e){j(e.detail.response),H()}function G(e){j(e.detail.response),H()}function q(e){j(e.detail.response),H()}function A(e){L.showModal(e.detail.message)}function B(e){}function H(){var t=window.df.workgroup.GlobalVars.params;console.log(n," user : isLoggedIn - ",c.user.isLoggedIn," / isCheckin - ",c.user.isCheckin," / isCheckout",c.user.isCheckout),function(){D&&(console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> _resetChangeDateCheck"),clearTimeout(U),document.removeEventListener("mousemove",R),document.removeEventListener("touchstart",R),document.removeEventListener("touchmove",R));D=!1}();var r=document.querySelector("html"),a=window.df.lab.Util.hasClass(r,"desktop");c.user.isLoggedIn&&void 0!=t.retUrl&&""!=t.retUrl&&t.retUrl.length>0&&(console.log("--------------------------------------- go redirect : ",t.retUrl[0]),window.location.href=decodeURIComponent(t.retUrl[0])),c.user.isLoggedIn&&(a&&"desktop"==Detectizr.device.type||e.user.isAdminAccount),c.user.isLoggedIn,document.title=o,"true"==t.test?T.resetData(c.info.test.notice,c.info.birthday):T.resetData(c.info.today.notice,c.info.birthday),E.resetData(c.user);var i=document.querySelector(".sec-login");c.user.isLoggedIn?(df.lab.Util.addClass(i,"logged"),function(){b.hideLoginFrom(),y.showLogoutBtn(),I.showStartBtn();var e=document.querySelector(".sec-util");df.lab.Util.addClass(e,window.df.workgroup.Preset.class_name.showIn),T.showNotice()}(),c.user.workInfo.isWorking?I.showStopBtn():I.hideStopBtn()):(df.lab.Util.removeClass(i,"logged"),function(){var e=document.querySelector(".sec-util");df.lab.Util.removeClass(e,window.df.workgroup.Preset.class_name.showIn);var t=document.querySelector(".sec-login");df.lab.Util.removeClass(t,"logged"),y.hideLogoutBtn(),x.hideCheckinBtn(),I.hideStartBtn(),b.showLoginFrom()}())}function Y(){!function(){F(),1!=D&&S!=t.getDate()&&null!=S&&(console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Change Date "),D=!0,document.removeEventListener("mousemove",R),document.addEventListener("mousemove",R),document.removeEventListener("touchstart",R),document.addEventListener("touchstart",R),document.removeEventListener("touchmove",R),document.addEventListener("touchmove",R),X());S=t.getDate(),setTimeout(Y,500)}(),g.updateToday(t),h.updateToday(t)}function F(){(t=new Date).setTime(t.getTime()+m),window.df.workgroup.GlobalVars.time_now=t.getTime()}function X(){console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> _delayAutoRefresh : ",1e4),clearTimeout(U),U=setTimeout(function(){console.log("_Refresh"),window.location.reload(!0)},1e4)}function R(e){X()}return{init:function(){console.log("NEW NEW NEW NEW NEW NEW NEW NEW NEW NEW NEW NEW NEW NEW NEW NEW NEW"),o=document.title,M(),F(),v.init(),g.init(t),h.init(t),b.init(),y.init(),x.init(),I.init(),T.init(c.info.today.notice,c.info.birthday),E.init(c.preset.document_url,c.preset.main_url,c.user),L.init(),function(){H();var e=document.querySelector("header");setTimeout(function(){df.lab.Util.addClass(e,window.df.workgroup.Preset.class_name.showIn)},10);var t=document.querySelector(".sec-info");setTimeout(function(){df.lab.Util.addClass(t,window.df.workgroup.Preset.class_name.showIn)},0);var o=document.querySelector(".sec-login");setTimeout(function(){df.lab.Util.addClass(o,window.df.workgroup.Preset.class_name.showIn)},10);var n=document.querySelector("footer");setTimeout(function(){df.lab.Util.addClass(n,window.df.workgroup.Preset.class_name.showIn)},1500)}(),Y(),document.addEventListener(window.df.workgroup.Preset.eventType.ON_LOGIN,P),document.addEventListener(window.df.workgroup.Preset.eventType.ON_CHECKIN,O),document.addEventListener(window.df.workgroup.Preset.eventType.ON_CHECKOUT,N),document.addEventListener(window.df.workgroup.Preset.eventType.ON_START,W),document.addEventListener(window.df.workgroup.Preset.eventType.ON_STOP,G),document.addEventListener(window.df.workgroup.Preset.eventType.ON_CHANGE_STAGE_INFO,B),document.addEventListener(window.df.workgroup.Preset.eventType.ON_LOGOUT,q),document.addEventListener(window.df.workgroup.Preset.eventType.ON_WARNING,A)}}}},"../login/loginBgController.js":
/*!*************************************!*\
  !*** ../login/loginBgController.js ***!
  \*************************************/
/*! no static exports found */function(e,t){e.exports=function(e,t){var o,n="[ LoginBgController ]",r=(e=e,[]);function a(e,t,o){return 1==e.random_show||"true"==e.random_show}return{init:function(){if(function(e){var o=window.df.workgroup.GlobalVars.params;if(t){var i=e.info.test.bg_contents,s=e.info.today.bg_contents,d=e.info.birthday;if(void 0!=i&&null!=i&&i.length>0&&"true"==o.test)console.log(n+" : ","type : ","test bg"),r=r.concat(i);else if(void 0!=s&&null!=s&&s.length>0)console.log(n+" : ","type : ","custom bg"),r=r.concat(s);else if(void 0!=d&&null!=d&&d.length>0)console.log(n+" : ","type : ","Birthday bg"),r=r.concat(e.preset.bg_contents.birthday.list);else{var l;console.log(n+" : ","type : ","random bg"),l=e.preset.bg_contents.weather.list.filter(a),r=r.concat(l),l=e.preset.bg_contents.birthday.list.filter(a),r=r.concat(l),l=e.preset.bg_contents.artwork.list.filter(a),r=r.concat(l),l=e.preset.bg_contents.custom.list.filter(a),r=r.concat(l),l=e.preset.bg_contents.custom_image_slide.list.filter(a),r=r.concat(l),l=e.preset.bg_contents.custom_video_player.list.filter(a),r=r.concat(l)}console.log(n+" : ","arr_bg_list : ",r)}}(t),e&&(o=e.querySelector(".dim")),r.length>0){var i=Math.floor(r.length*Math.random()),s=r[i].url;console.log(n+" : ","iframe url : ",i," / ",s),function(t){if(e){var n=document.createElement("iframe");n.setAttribute("src",t),n.setAttribute("name","iframe-bg"),e.appendChild(n),setTimeout(function(){o&&df.lab.Util.addClass(o,window.df.workgroup.Preset.class_name.showIn)},2e3)}}(s)}}}}},"../login/loginClock.js":
/*!******************************!*\
  !*** ../login/loginClock.js ***!
  \******************************/
/*! no static exports found */function(e,t){e.exports=function(e,t){var o=e,n={objectName:"ConectedLines_"+(new Date).getTime(),container:document.body,stageWidth:1920,stageHeight:1080},r={},a={count:0,oW:0,oH:0,date_now:null},i={render:{},app:{},mainContainer:{},clockContainer:{},clockGraphic:{bar_hh:{},bar_mm:{},bar_ss:{}},txt_hh:{},txt_mm:{},txt_ss:{}},s=null;var d=function(e){r=df.lab.Util.combine_object_value(e,n),a.oW=r.stageWidth,a.oH=r.stageHeight,m(),i.mainContainer=new PIXI.Container,i.clockContainer=new PIXI.Container,i.app.stage.addChild(i.mainContainer),i.render=new PIXI.ticker.Ticker,i.render.autoStart=!0,i.clockGraphic.bar_hh=new PIXI.Graphics,i.clockGraphic.bar_mm=new PIXI.Graphics,i.clockGraphic.bar_ss=new PIXI.Graphics,i.clockContainer.rotation=Math.radians(-360),i.clockGraphic.bar_hh.alpha=0,i.clockGraphic.bar_mm.alpha=0,i.clockGraphic.bar_ss.alpha=0,i.clockGraphic.bar_hh.scale.x=.1,i.clockGraphic.bar_mm.scale.x=.1,i.clockGraphic.bar_ss.scale.x=.1,c(),f(r.stageWidth,r.stageHeight),r.container.appendChild(i.app.view)},l=function(){window.onresize=function(e){u()},window.addEventListener("orientationchange",function(){clearTimeout(s),s=setTimeout(u,1e3)},!1)};function u(){a.oW==r.container.offsetWidth&&a.oH==r.container.offsetHeight||(a.oW=r.container.offsetWidth,a.oH=r.container.offsetHeight,f(a.oW,a.oH))}var c=function(){var e=new PIXI.TextStyle({fontFamily:"NanumSquareRound",fontSize:20,fontWeight:"700",fill:["#ffffff"]});i.txt_hh=new PIXI.Text("00",e);var t=new PIXI.TextStyle({fontFamily:"NanumSquareRound",fontSize:14,fontWeight:"700",fill:["#ffffff"]});i.txt_mm=new PIXI.Text("00",t);var o=new PIXI.TextStyle({fontFamily:"NanumSquareRound",fontSize:14,fontWeight:"700",fill:["#ff0000"]});i.txt_ss=new PIXI.Text("00",o),i.txt_hh.alpha=0,i.txt_mm.alpha=0,i.txt_ss.alpha=0},f=function(e,t){r.stageWidth=e||r.stageWidth,r.stageHeight=t||r.stageHeight,i.app.view.style.width=r.stageWidth+"px",i.app.view.style.height=r.stageHeight+"px",function(){var e=r.stageWidth/2,t=r.stageHeight/2;i.clockContainer.x=e,i.clockContainer.y=t;var o=Math.min(e,t),n=o-58,a=o-58,s=Math.round(.74*a);i.clockGraphic.bar_hh.clear(),i.clockGraphic.bar_hh.beginFill(16777215),i.clockGraphic.bar_hh.drawRoundedRect(-3,-3,s+3,6,3),i.clockGraphic.bar_hh.endFill(),i.clockGraphic.bar_mm.clear(),i.clockGraphic.bar_mm.beginFill(16777215),i.clockGraphic.bar_mm.drawRoundedRect(-3,-3,a+3,6,3),i.clockGraphic.bar_mm.endFill(),i.clockGraphic.bar_ss.clear(),i.clockGraphic.bar_ss.beginFill(16711680),i.clockGraphic.bar_ss.drawRoundedRect(-1,-1,n+1,2,1),i.clockGraphic.bar_ss.endFill()}(),i.app.renderer.resize(r.stageWidth,r.stageHeight)},m=function(){PIXI.settings.RESOLUTION=window.devicePixelRatio,PIXI.settings.SCALE_MODE=PIXI.SCALE_MODES.NEAREST,i.app=new PIXI.Application(r.stageWidth,r.stageHeight,{transparent:!0,antialias:!0})},w=function(){i.mainContainer.addChild(i.clockContainer),i.clockContainer.addChild(i.clockGraphic.bar_ss),i.clockContainer.addChild(i.clockGraphic.bar_mm),i.clockContainer.addChild(i.clockGraphic.bar_hh),i.mainContainer.addChild(i.txt_hh),i.mainContainer.addChild(i.txt_mm),g();TweenMax.to(i.clockContainer,5,{rotation:0,ease:Expo.easeOut,delay:0}),TweenMax.to(i.clockGraphic.bar_hh,2.2,{alpha:1,ease:Expo.easeInOut,delay:0}),TweenMax.to(i.clockGraphic.bar_mm,2.2,{alpha:1,ease:Expo.easeInOut,delay:.5}),TweenMax.to(i.clockGraphic.bar_ss,2.2,{alpha:1,ease:Expo.easeInOut,delay:1}),TweenMax.to(i.clockGraphic.bar_hh.scale,2.2,{x:1,ease:Expo.easeInOut,delay:0}),TweenMax.to(i.clockGraphic.bar_mm.scale,2.2,{x:1,ease:Expo.easeInOut,delay:.5}),TweenMax.to(i.clockGraphic.bar_ss.scale,2.2,{x:1,ease:Expo.easeInOut,delay:.5}),TweenMax.to(i.txt_hh,1.2,{alpha:1,ease:Cubic.easeOut,delay:2}),TweenMax.to(i.txt_mm,1.2,{alpha:1,ease:Cubic.easeOut,delay:2.5}),TweenMax.to(i.txt_ss,1.2,{alpha:1,ease:Cubic.easeOut,delay:3})},g=function(){i.render.add(function(e){p(),h()})},p=function(){a.count=a.count+1},h=function(){i.txt_hh.text=window.df.workgroup.Util.getDate_format(a.date_now,"h"),i.txt_mm.text=window.df.workgroup.Util.getDate_format(a.date_now,"mm"),i.txt_ss.text=window.df.workgroup.Util.getDate_format(a.date_now,"ss");var e=a.date_now.getHours(),t=a.date_now.getMinutes(),o=a.date_now.getSeconds()/60*360,n=Math.radians((o-90)%360),s=t/60*360,d=Math.radians((s-90)%360),l=e%12/12*360+t/60*30,u=Math.radians((l-90)%360);i.clockGraphic.bar_hh.rotation=u,i.clockGraphic.bar_mm.rotation=d,i.clockGraphic.bar_ss.rotation=n;var c=r.stageWidth/2,f=r.stageHeight/2,m=Math.min(c,f),w=m-58,g=m-58,p=new PIXI.Point,h=new PIXI.Point,_=new PIXI.Point;p.x=c+Math.cos(u)*(w+20)-i.txt_hh.width/2,p.y=f+Math.sin(u)*(w+20)-i.txt_hh.height/2,i.txt_hh.x=p.x,i.txt_hh.y=p.y,h.x=c+Math.cos(d)*(w+44)-i.txt_mm.width/2,h.y=f+Math.sin(d)*(w+44)-i.txt_mm.height/2,i.txt_mm.x=h.x,i.txt_mm.y=h.y,_.x=c+Math.cos(n)*(g+44)-i.txt_ss.width/2,_.y=f+Math.sin(n)*(g+44)-i.txt_ss.height/2,i.txt_ss.x=_.x,i.txt_ss.y=_.y};function _(e){a.date_now=e}return{init:function(e){d({container:o,stageWidth:o.offsetWidth,stageHeight:o.offsetHeight}),_(e),l(),w()},updateToday:_}}},"../login/loginDate.js":
/*!*****************************!*\
  !*** ../login/loginDate.js ***!
  \*****************************/
/*! no static exports found */function(e,t,o){o(/*! ../bundler/node_modules/date-fns/format */"./node_modules/date-fns/format/index.js");e.exports=function(e,t){var o=e,n={txt_MM:"",txt_DD:"",txt_DW:""},r={MM:"",DD:"",DW:""},a="";function i(e){var t=window.df.workgroup.Util.getDate_format(e,"MMMM"),i=window.df.workgroup.Util.getDate_format(e,"DD"),s=window.df.workgroup.Util.getDate_format(e,"dddd");r.MM==t&&r.DD==i&&r.DW==s||(r.MM=t,r.DD=i,r.DW=s,df.lab.Util.removeClass(o,window.df.workgroup.Preset.class_name.showIn),clearTimeout(a),a=setTimeout(function(){df.lab.Util.addClass(o,window.df.workgroup.Preset.class_name.showIn)},1e3),n.txt_MM.textContent=r.MM,n.txt_DD.textContent=r.DD,n.txt_DW.textContent=r.DW)}return{init:function(e){n.txt_MM=document.getElementById("id_txt_MM"),n.txt_DD=document.getElementById("id_txt_DD"),n.txt_DW=document.getElementById("id_txt_DW"),i(e)},updateToday:i}}},"../login/loginFieldController.js":
/*!****************************************!*\
  !*** ../login/loginFieldController.js ***!
  \****************************************/
/*! no static exports found */function(e,t){e.exports=function(){var e,t,o,n,r=13,a=9,i="[ LoginFieldController ]",s=document.getElementById("id_login"),d=0;function l(){void 0!=o&&null!=o||(e.focus(),e.select())}function u(){clearTimeout(d)}function c(e){switch(e.which){case r:t.focus();break;case a:console.log("ID")}}function f(e){e.preventDefault(),function(){if(s.user_id.value.length<2||s.user_id.value.length>15)return s.user_id.focus(),!1;if(s.user_pw.value.length<4||s.user_pw.value.length>15)return s.user_pw.focus(),!1;console.log(i," load json"),document.getElementById("user_pw").blur(),m(),function(e,t){for(var o={},n=0,r=e.length;n<r;++n){var a=e[n];a.name&&(o[a.name]=a.value)}var i={method:e.method,action:df.workgroup.Util.addParamUniq(e.action)};df.workgroup.Util.load_json(i.action,i.method,t,o)}(s,g)}()}function m(){var e=document.querySelector(".sec-login");df.lab.Util.addClass(e,"loading");for(var t=s.querySelectorAll("input"),o=0;o<t.length;o++)t[o].setAttribute("disabled","")}function w(){var e=document.querySelector(".sec-login");df.lab.Util.removeClass(e,"loading");for(var t=s.querySelectorAll("input"),o=0;o<t.length;o++)t[o].removeAttribute("disabled")}function g(e){w(),function(e){var t=new CustomEvent(window.df.workgroup.Preset.eventType.ON_LOGIN,{detail:{response:e}});document.dispatchEvent(t)}(e);var t=function(e){var t={isWarning:!1,text:"표시할 메세지가 없습니다.",code:null},o=JSON.parse(e.target.responseText),n=o.user.status;if(n.toLowerCase()=="L01".toLowerCase()||n.toLowerCase()=="L02".toLowerCase()||n.toLowerCase()=="L03".toLowerCase())for(var r=o.preset.status_list,a=0;a<r.length;a++){var i=r[a],s=i.code;if(s.toLowerCase()==n.toLowerCase()){t.isWarning=!0,t.text=i.text,t.code=i.code;break}}return t}(e);t.isWarning&&(!function(e){var t=new CustomEvent(window.df.workgroup.Preset.eventType.ON_WARNING,{detail:{message:e}});document.dispatchEvent(t)}(t.text),"L01"==t.code||"L03"==t.code?document.addEventListener(window.df.workgroup.Preset.eventType.ON_CLOSE_MODAL,p):"L02"==t.code&&document.addEventListener(window.df.workgroup.Preset.eventType.ON_CLOSE_MODAL,h))}function p(){document.removeEventListener(window.df.workgroup.Preset.eventType.ON_CLOSE_MODAL,p),l()}function h(){document.removeEventListener(window.df.workgroup.Preset.eventType.ON_CLOSE_MODAL,h),void 0!=n&&null!=n||(t.focus(),t.select())}return{init:function(){e=document.getElementById("user_id"),t=document.getElementById("user_pw"),function(){var e=window.df.workgroup.GlobalVars.infoData;void 0!=e.preset&&void 0!=e.preset.json_url&&void 0!=e.preset.json_url.login?s.action=e.preset.json_url.login:s.action=window.df.workgroup.Preset.json_url.login}(),e.addEventListener("keypress",c),s.addEventListener("submit",f),t.addEventListener("focusin",u);var o=document.querySelector("html");window.df.lab.Util.hasClass(o,"desktop")&&(d=setTimeout(l,1e3))},hideLoginFrom:function(){m()},showLoginFrom:function(){w()}}}},"../login/loginInfoController.js":
/*!***************************************!*\
  !*** ../login/loginInfoController.js ***!
  \***************************************/
/*! no static exports found */function(e,t){e.exports=function(){var e,t,o,n,r="",a="",i="",s="",d="",l="",u=0,c={oX:0,oY:0,passX:0,passY:0},f=!1,m=!1,w=15e3;function g(r,s){j(),clearTimeout(o),function(t){if(void 0!=t&&null!=t&&void 0!=t.title&&null!=t.title&&void 0!=t.dec&&null!=t.dec){e=t,f=!1;for(var o=a.querySelector(".txt-notice"),n="",r=0;r<e.title.length;r++)null!=e.title[r]&&""!=e.title[r]&&(n=n+"<span>"+e.title[r]+"</span>",f=!0);o.innerHTML=n;var i=a.querySelector(".txt-sub");n="";for(var r=0;r<e.dec.length;r++)null!=e.dec[r]&&""!=e.dec[r]&&(n=n+"<span>"+e.dec[r]+"</span>",f=!0);f?(i.innerHTML=n,df.lab.Util.removeClass(a,"hide")):df.lab.Util.addClass(a,"hide")}else df.lab.Util.addClass(a,"hide")}(r),function(e){if(void 0!=e&&null!=e&&e.length>0){t=e,m=!0;for(var o=["오늘","생일을","축하 드려요."],n="",r=i.querySelector(".txt-notice"),a=o.length,s=0;s<a;s++)n=n+"<span>"+o[s]+"</span>";r.innerHTML=n;var d=i.querySelector(".txt-sub");a=t.length,n="";for(var s=0;s<a;s++)0==s&&(n+="<span>"),0==s?n=n+t[s].name+" "+t[s].position+"님":s>0&&(n=n+", "+t[s].name+" "+t[s].position+"님"),s==a-1&&(n+="</span>");d.innerHTML=n,df.lab.Util.removeClass(i,"hide")}else df.lab.Util.addClass(i,"hide")}(s),m||f?o=setTimeout(v,1500):C(),n=setTimeout(L,w),m||f?(df.lab.Util.addClass(l,window.df.workgroup.Preset.class_name.showIn),function(){p();for(var e=l.querySelectorAll("li.item-list"),t=0;t<e.length;t++){var o=e[t];1==t&&!f||2==t&&!m?df.lab.Util.addClass(o,"hide"):df.lab.Util.removeClass(o,"hide");var n=o.querySelector("button.btn-indi");n.setAttribute("data-index",t),n.addEventListener("click",_)}}(),h(u)):(df.lab.Util.removeClass(l,window.df.workgroup.Preset.class_name.showIn),p())}function p(){for(var e=l.querySelectorAll("li.item-list"),t=0;t<e.length;t++){var o=e[t];df.lab.Util.addClass(o,"hide"),o.querySelector("button.btn-indi").removeEventListener("click",_)}}function h(e){for(var t=l.querySelectorAll("li.item-list"),o=0;o<t.length;o++){var n=t[o];e==o?df.lab.Util.addClass(n,"active"):df.lab.Util.removeClass(n,"active")}}function _(e){var t=e.currentTarget;S(parseInt(t.getAttribute("data-index")))}function v(){C(),"desktop"!=Detectizr.device.type?d.addEventListener("touchstart",k):d.addEventListener("click",b)}function C(){clearTimeout(o),d.removeEventListener("touchstart",k),d.removeEventListener("click",b)}function b(e){e.preventDefault(),f&&m?2==u?I():L():u>0?I():f?T():m&&E()}function k(e){e.stopPropagation(),d.addEventListener("touchmove",x),document.addEventListener("touchend",y);var t=0,o=0;"mousedown"==e.type?(t=e.clientX,o=e.clientY):"touchstart"==e.type&&1===e.touches.length&&(t=e.touches[0].pageX,o=e.touches[0].pageY),c.oX=t,c.oY=o,c.passX=t,c.passY=o}function y(e){e.stopPropagation(),d.removeEventListener("touchmove",x),document.removeEventListener("touchend",y);var t=s.offsetWidth,o=c.passX-c.oX;Math.abs(o)/t>.1&&(o<0?L():function(){var e=u-1;if(!f&&!m)return;if(f&&m){if(!(e>-1))return;S(e)}else I()}())}function x(e){var t,o;e.stopPropagation(),"mousemove"==e.type?(t=e.clientX,o=e.clientY):"touchmove"==e.type&&1===e.touches.length&&(t=e.touches[0].pageX,o=e.touches[0].pageY),c.passX=t,c.passY=o}function I(){S(0)}function T(){f&&S(1)}function E(){m&&S(2)}function L(){var e=u+1;if(f||m)if(f&&m){if(!(e<3))return;S(e)}else if(0==u&&f)T();else{if(0!=u||!m)return;E()}}function S(e){if(u!=e){switch(j(),u=e){case 1:D(!0),df.lab.Util.removeClass(a,"out-left"),df.lab.Util.removeClass(a,"out-right"),df.lab.Util.addClass(a,window.df.workgroup.Preset.class_name.showIn),M(!1);break;case 2:D(!0),U(!0),df.lab.Util.removeClass(i,"out-left"),df.lab.Util.removeClass(i,"out-right"),df.lab.Util.addClass(i,window.df.workgroup.Preset.class_name.showIn);break;default:df.lab.Util.removeClass(r,"out-left"),df.lab.Util.removeClass(r,"out-right"),df.lab.Util.addClass(r,window.df.workgroup.Preset.class_name.showIn),U(!1),M(!1)}if(h(u),function(){var e=new CustomEvent(window.df.workgroup.Preset.eventType.ON_CHANGE_STAGE_INFO,{detail:{curIndex:u}});document.dispatchEvent(e)}(),!f&&!m)return;n=f&&m?u<2?setTimeout(L,w):setTimeout(I,w):0==u?setTimeout(L,w):setTimeout(I,w)}}function D(e){df.lab.Util.removeClass(r,window.df.workgroup.Preset.class_name.showIn),e?(df.lab.Util.removeClass(r,"out-right"),df.lab.Util.addClass(r,"out-left")):(df.lab.Util.addClass(r,"out-right"),df.lab.Util.removeClass(r,"out-left"))}function U(e){df.lab.Util.removeClass(a,window.df.workgroup.Preset.class_name.showIn),e?(df.lab.Util.removeClass(a,"out-right"),df.lab.Util.addClass(a,"out-left")):(df.lab.Util.addClass(a,"out-right"),df.lab.Util.removeClass(a,"out-left"))}function M(e){df.lab.Util.removeClass(i,window.df.workgroup.Preset.class_name.showIn),e?(df.lab.Util.removeClass(i,"out-right"),df.lab.Util.addClass(i,"out-left")):(df.lab.Util.addClass(i,"out-right"),df.lab.Util.removeClass(i,"out-left"))}function j(){clearTimeout(n)}return{init:function(e,t){r=document.getElementById("id_stage_clock"),a=document.getElementById("id_stage_notice"),i=document.getElementById("id_stage_birthday"),s=document.querySelector("section.sec-info"),d=s.querySelector("ul.contents_con"),l=s.querySelector(".area-indicator ul.indicator"),g(e,t)},showNotice:function(){j(),(f||m)&&(f?n=setTimeout(T,600):m&&(n=setTimeout(E,600)))},resetData:function(e,t){f||m||I(),g(e,t)}}}},"../login/loginUtilController.js":
/*!***************************************!*\
  !*** ../login/loginUtilController.js ***!
  \***************************************/
/*! no static exports found */function(e,t){e.exports=function(){document.querySelector(".sec-util");function e(e){var t=document.getElementById("id_link_doc_approval").querySelector(".doc-num"),o=document.getElementById("id_link_doc_approval_my").querySelector(".doc-num"),n=document.getElementById("id_link_doc_approval_cc").querySelector(".doc-num");void 0!=e&&e.isLoggedIn?(e.document_approval_num>0?t.textContent=e.document_approval_num+"":t.textContent="0",e.document_approval_my_num>0?o.textContent=e.document_approval_my_num+"":o.textContent="0",e.document_approval_cc_num>0?n.textContent=e.document_approval_cc_num+"":n.textContent="0"):(t.textContent="0",o.textContent="0",n.textContent="0")}return{init:function(t,o,n){!function(e,t){var o=document.getElementById("id_link_doc_approval").querySelector("a.btn-link"),n=document.getElementById("id_link_doc_approval_my").querySelector("a.btn-link"),r=document.getElementById("id_link_doc_approval_cc").querySelector("a.btn-link"),a=document.getElementById("id_link_main").querySelector("a.btn-link");void 0!=e.approval&&""!=e.approval?(o.href=e.approval,df.lab.Util.addClass(o,"able")):(o.href="#",df.lab.Util.removeClass(o,"able")),void 0!=e.approval_my&&""!=e.approval_my?(n.href=e.approval_my,df.lab.Util.addClass(n,"able")):(n.href="#",df.lab.Util.removeClass(n,"able")),void 0!=e.approval_cc&&""!=e.approval_cc?(r.href=e.approval_cc,df.lab.Util.addClass(r,"able")):(r.href="#",df.lab.Util.removeClass(r,"able")),void 0!=t&&""!=t?(a.href=t,df.lab.Util.addClass(a,"able")):(a.href="#",df.lab.Util.removeClass(a,"able"))}(t,o),e(n)},resetData:function(t){e(t)}}}},"../login/logoutController.js":
/*!************************************!*\
  !*** ../login/logoutController.js ***!
  \************************************/
/*! no static exports found */function(e,t){e.exports=function(){var e=document.getElementById("id_form_logout");function t(){var t=window.df.workgroup.GlobalVars.infoData;void 0!=t.preset&&void 0!=t.preset.json_url&&void 0!=t.preset.json_url.logout?e.action=t.preset.json_url.logout:e.action=window.df.workgroup.Preset.json_url.logout}function o(t){t.preventDefault(),n(),function(e,t){for(var o={},n=0,r=e.length;n<r;++n){var a=e[n];a.name&&(o[a.name]=a.value)}var i={method:e.method,action:df.workgroup.Util.addParamUniq(e.action)};df.workgroup.Util.load_json(i.action,i.method,t,o)}(e,r)}function n(){for(var t=e.querySelectorAll("input"),o=0;o<t.length;o++)t[o].setAttribute("disabled",""),df.lab.Util.addClass(t[o],"disable")}function r(e){!function(e){var t=new CustomEvent(window.df.workgroup.Preset.eventType.ON_LOGOUT,{detail:{response:e}});document.dispatchEvent(t)}(e);var t=function(e){var t={isWarning:!1,text:"표시할 메세지가 없습니다."},o=JSON.parse(e.target.responseText),n=o.user.status;if(n.toLowerCase()=="L04".toLowerCase())for(var r=o.preset.status_list,a=0;a<r.length;a++){var i=r[a],s=i.code;if(s.toLowerCase()==n.toLowerCase()){t.isWarning=!0,t.text=i.text;break}}return t}(e);t.isWarning&&(!function(e){var t=new CustomEvent(window.df.workgroup.Preset.eventType.ON_WARNING,{detail:{message:e}});document.dispatchEvent(t)}(t.text),document.addEventListener(window.df.workgroup.Preset.eventType.ON_CLOSE_MODAL,a))}function a(){document.removeEventListener(window.df.workgroup.Preset.eventType.ON_CLOSE_MODAL,a),setTimeout(function(){window.location.reload(!0)},10)}return{init:function(){t(),e.addEventListener("submit",o)},showLogoutBtn:function(){!function(){for(var t=e.querySelectorAll("input"),o=0;o<t.length;o++)t[o].removeAttribute("disabled"),df.lab.Util.removeClass(t[o],"disable")}(),t();var o=document.querySelector("header .wrapper-logout");df.lab.Util.addClass(o,window.df.workgroup.Preset.class_name.showIn)},hideLogoutBtn:function(){n();var e=document.querySelector("header .wrapper-logout");df.lab.Util.removeClass(e,window.df.workgroup.Preset.class_name.showIn)}}}},"../login/modalController.js":
/*!***********************************!*\
  !*** ../login/modalController.js ***!
  \***********************************/
/*! no static exports found */function(e,t){e.exports=function(){var e=document.getElementById("id_modal"),t=document.getElementById("id_modal_txt"),o=document.getElementById("id_btn_close_modal"),n=0;function r(){clearTimeout(n),df.lab.Util.removeClass(e,window.df.workgroup.Preset.class_name.showIn),e.style.display="none",function(){var e=new CustomEvent(window.df.workgroup.Preset.eventType.ON_CLOSE_MODAL);document.dispatchEvent(e)}()}return{init:function(){o.onclick=function(){r()},window.onclick=function(t){t.target==e&&r()}},showModal:function(o){clearTimeout(n),t.textContent=o,df.lab.Util.removeClass(e,window.df.workgroup.Preset.class_name.showIn),e.style.display="block",n=setTimeout(function(){df.lab.Util.addClass(e,window.df.workgroup.Preset.class_name.showIn)},100),e.setAttribute("tabindex","-1"),e.focus(),e.removeAttribute("tabindex")},closeModal:r}}},"../login/startStopController.js":
/*!***************************************!*\
  !*** ../login/startStopController.js ***!
  \***************************************/
/*! no static exports found */function(e,t){e.exports=function(){var e=document.querySelector(".sec-login .wrapper-startStop"),t=e.querySelector(".area-start.start"),o=e.querySelector(".area-start.stop"),n=document.getElementById("id_start"),r=document.getElementById("id_stop"),a=null;function i(){if(a=window.df.workgroup.GlobalVars.infoData.user,document.getElementById("id_user_name_new").textContent=a.name,document.getElementById("id_user_position_new").textContent=a.position,a.isLoggedIn){if(a.workInfo.isWorking){var e=document.getElementById("id_start_time"),t=new Date(a.workInfo.startedTime);e.textContent=t.getHours()+"시 "+window.df.workgroup.Util.addZeroNumber(t.getMinutes())+"분",!0}var o=document.getElementById("id_workingTime_forToday"),n=s(a.workInfo.workingTime_forToday);o.textContent=n.hours+"시간 "+window.df.workgroup.Util.addZeroNumber(n.minutes)+"분",o=document.getElementById("id_workingTime_forThisWeek"),n=s(a.workInfo.workingTime_forThisWeek),o.textContent=n.hours+"시간 "+window.df.workgroup.Util.addZeroNumber(n.minutes)+"분",o=document.getElementById("id_workingTime_forThisMonth"),n=s(a.workInfo.workingTime_forThisMonth),o.textContent=n.hours+"시간 "+window.df.workgroup.Util.addZeroNumber(n.minutes)+"분",o=document.getElementById("id_workingTime_total_ofThisMonth"),n=s(a.workInfo.workingTime_forThisMonth),o.textContent=n.hours+"시간",n.minutes>0&&(o.textContent=o.textContent+" "+window.df.workgroup.Util.addZeroNumber(n.minutes)+"분")}}function s(e){var t=Math.floor(e/1e3)%60,o=Math.floor(e/1e3/60)%60;return{hours:Math.floor(e/1e3/60/60),minutes:o,seconds:t}}function d(){var e=window.df.workgroup.GlobalVars.infoData;void 0!=e.preset&&void 0!=e.preset.json_url&&void 0!=e.preset.json_url.start?n.action=e.preset.json_url.start:n.action=window.df.workgroup.Preset.json_url.start,void 0!=e.preset&&void 0!=e.preset.json_url&&void 0!=e.preset.json_url.stop?r.action=e.preset.json_url.stop:r.action=window.df.workgroup.Preset.json_url.stop}function l(e){e.preventDefault(),function(){var e=t.querySelector(".ui-loading");df.lab.Util.addClass(e,window.df.workgroup.Preset.class_name.showIn),c()}(),_(n,w)}function u(e){e.preventDefault(),function(){var e=o.querySelector(".ui-loading");df.lab.Util.addClass(e,window.df.workgroup.Preset.class_name.showIn),m()}(),_(r,g)}function c(){for(var e=n.querySelectorAll("input"),t=0;t<e.length;t++)e[t].setAttribute("disabled","")}function f(){for(var e=n.querySelectorAll("input"),t=0;t<e.length;t++)e[t].removeAttribute("disabled")}function m(){for(var e=r.querySelectorAll("input"),t=0;t<e.length;t++)e[t].setAttribute("disabled","")}function w(e){var o=t.querySelector(".ui-loading");df.lab.Util.removeClass(o,window.df.workgroup.Preset.class_name.showIn),function(e){var t=new CustomEvent(window.df.workgroup.Preset.eventType.ON_START,{detail:{response:e}});document.dispatchEvent(t)}(e);var n=p(e);n.isWarning&&(console.log("status.text : ",n.text),h(n.text))}function g(e){var t=o.querySelector(".ui-loading");df.lab.Util.removeClass(t,window.df.workgroup.Preset.class_name.showIn),function(e){var t=new CustomEvent(window.df.workgroup.Preset.eventType.ON_STOP,{detail:{response:e}});document.dispatchEvent(t)}(e);var n=p(e);n.isWarning&&h(n.text)}function p(e){var t={isWarning:!1,text:"표시할 메세지가 없습니다."},o=JSON.parse(e.target.responseText),n=o.user.status;if(n.toLowerCase()=="L00".toLowerCase()||n.toLowerCase()=="C10".toLowerCase()||n.toLowerCase()=="C01".toLowerCase()||n.toLowerCase()=="C02".toLowerCase()||n.toLowerCase()=="C03".toLowerCase()||n.toLowerCase()=="C04".toLowerCase()||n.toLowerCase()=="C05".toLowerCase()||n.toLowerCase()=="C11".toLowerCase()||n.toLowerCase()=="C12".toLowerCase()||n.toLowerCase()=="C13".toLowerCase()||n.toLowerCase()=="C14".toLowerCase()||n.toLowerCase()=="C15".toLowerCase())for(var r=o.preset.status_list,a=0;a<r.length;a++){var i=r[a];if(i.code.toLowerCase()==n.toLowerCase()){t.isWarning=!0,t.text=i.text;break}}return t}function h(e){var t=new CustomEvent(window.df.workgroup.Preset.eventType.ON_WARNING,{detail:{message:e}});document.dispatchEvent(t)}function _(e,t){for(var o={},n=0,r=e.length;n<r;++n){var a=e[n];a.name&&(o[a.name]=a.value)}var i={method:e.method,action:df.workgroup.Util.addParamUniq(e.action)};df.workgroup.Util.load_json(i.action,i.method,t,o)}return{init:function(){i(),d(),n.addEventListener("submit",l),r.addEventListener("submit",u),c(),m()},showStartBtn:function(){i(),d(),df.lab.Util.addClass(e,window.df.workgroup.Preset.class_name.showIn),f(),m()},hideStartBtn:function(){df.lab.Util.removeClass(e,window.df.workgroup.Preset.class_name.showIn),df.lab.Util.removeClass(e,"checked"),df.lab.Util.removeClass(e,"checkedout"),c(),m()},showStopBtn:function(){i(),d(),df.lab.Util.addClass(e,"checked"),c(),function(){for(var e=r.querySelectorAll("input"),t=0;t<e.length;t++)e[t].removeAttribute("disabled")}()},hideStopBtn:function(){i(),d(),df.lab.Util.removeClass(e,"checked"),m(),f()}}}},"./node_modules/date-fns/difference_in_calendar_days/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/date-fns/difference_in_calendar_days/index.js ***!
  \********************************************************************/
/*! no static exports found */function(e,t,o){var n=o(/*! ../start_of_day/index.js */"./node_modules/date-fns/start_of_day/index.js"),r=6e4,a=864e5;e.exports=function(e,t){var o=n(e),i=n(t),s=o.getTime()-o.getTimezoneOffset()*r,d=i.getTime()-i.getTimezoneOffset()*r;return Math.round((s-d)/a)}},"./node_modules/date-fns/format/index.js":
/*!***********************************************!*\
  !*** ./node_modules/date-fns/format/index.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,o){var n=o(/*! ../get_day_of_year/index.js */"./node_modules/date-fns/get_day_of_year/index.js"),r=o(/*! ../get_iso_week/index.js */"./node_modules/date-fns/get_iso_week/index.js"),a=o(/*! ../get_iso_year/index.js */"./node_modules/date-fns/get_iso_year/index.js"),i=o(/*! ../parse/index.js */"./node_modules/date-fns/parse/index.js"),s=o(/*! ../is_valid/index.js */"./node_modules/date-fns/is_valid/index.js"),d=o(/*! ../locale/en/index.js */"./node_modules/date-fns/locale/en/index.js");var l={M:function(e){return e.getMonth()+1},MM:function(e){return f(e.getMonth()+1,2)},Q:function(e){return Math.ceil((e.getMonth()+1)/3)},D:function(e){return e.getDate()},DD:function(e){return f(e.getDate(),2)},DDD:function(e){return n(e)},DDDD:function(e){return f(n(e),3)},d:function(e){return e.getDay()},E:function(e){return e.getDay()||7},W:function(e){return r(e)},WW:function(e){return f(r(e),2)},YY:function(e){return f(e.getFullYear(),4).substr(2)},YYYY:function(e){return f(e.getFullYear(),4)},GG:function(e){return String(a(e)).substr(2)},GGGG:function(e){return a(e)},H:function(e){return e.getHours()},HH:function(e){return f(e.getHours(),2)},h:function(e){var t=e.getHours();return 0===t?12:t>12?t%12:t},hh:function(e){return f(l.h(e),2)},m:function(e){return e.getMinutes()},mm:function(e){return f(e.getMinutes(),2)},s:function(e){return e.getSeconds()},ss:function(e){return f(e.getSeconds(),2)},S:function(e){return Math.floor(e.getMilliseconds()/100)},SS:function(e){return f(Math.floor(e.getMilliseconds()/10),2)},SSS:function(e){return f(e.getMilliseconds(),3)},Z:function(e){return c(e.getTimezoneOffset(),":")},ZZ:function(e){return c(e.getTimezoneOffset())},X:function(e){return Math.floor(e.getTime()/1e3)},x:function(e){return e.getTime()}};function u(e){return e.match(/\[[\s\S]/)?e.replace(/^\[|]$/g,""):e.replace(/\\/g,"")}function c(e,t){t=t||"";var o=e>0?"-":"+",n=Math.abs(e),r=n%60;return o+f(Math.floor(n/60),2)+t+f(r,2)}function f(e,t){for(var o=Math.abs(e).toString();o.length<t;)o="0"+o;return o}e.exports=function(e,t,o){var n=t?String(t):"YYYY-MM-DDTHH:mm:ss.SSSZ",r=(o||{}).locale,a=d.format.formatters,c=d.format.formattingTokensRegExp;r&&r.format&&r.format.formatters&&(a=r.format.formatters,r.format.formattingTokensRegExp&&(c=r.format.formattingTokensRegExp));var f=i(e);return s(f)?function(e,t,o){var n,r,a=e.match(o),i=a.length;for(n=0;n<i;n++)r=t[a[n]]||l[a[n]],a[n]=r||u(a[n]);return function(e){for(var t="",o=0;o<i;o++)a[o]instanceof Function?t+=a[o](e,l):t+=a[o];return t}}(n,a,c)(f):"Invalid Date"}},"./node_modules/date-fns/get_day_of_year/index.js":
/*!********************************************************!*\
  !*** ./node_modules/date-fns/get_day_of_year/index.js ***!
  \********************************************************/
/*! no static exports found */function(e,t,o){var n=o(/*! ../parse/index.js */"./node_modules/date-fns/parse/index.js"),r=o(/*! ../start_of_year/index.js */"./node_modules/date-fns/start_of_year/index.js"),a=o(/*! ../difference_in_calendar_days/index.js */"./node_modules/date-fns/difference_in_calendar_days/index.js");e.exports=function(e){var t=n(e);return a(t,r(t))+1}},"./node_modules/date-fns/get_iso_week/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/date-fns/get_iso_week/index.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,o){var n=o(/*! ../parse/index.js */"./node_modules/date-fns/parse/index.js"),r=o(/*! ../start_of_iso_week/index.js */"./node_modules/date-fns/start_of_iso_week/index.js"),a=o(/*! ../start_of_iso_year/index.js */"./node_modules/date-fns/start_of_iso_year/index.js"),i=6048e5;e.exports=function(e){var t=n(e),o=r(t).getTime()-a(t).getTime();return Math.round(o/i)+1}},"./node_modules/date-fns/get_iso_year/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/date-fns/get_iso_year/index.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,o){var n=o(/*! ../parse/index.js */"./node_modules/date-fns/parse/index.js"),r=o(/*! ../start_of_iso_week/index.js */"./node_modules/date-fns/start_of_iso_week/index.js");e.exports=function(e){var t=n(e),o=t.getFullYear(),a=new Date(0);a.setFullYear(o+1,0,4),a.setHours(0,0,0,0);var i=r(a),s=new Date(0);s.setFullYear(o,0,4),s.setHours(0,0,0,0);var d=r(s);return t.getTime()>=i.getTime()?o+1:t.getTime()>=d.getTime()?o:o-1}},"./node_modules/date-fns/is_date/index.js":
/*!************************************************!*\
  !*** ./node_modules/date-fns/is_date/index.js ***!
  \************************************************/
/*! no static exports found */function(e,t){e.exports=function(e){return e instanceof Date}},"./node_modules/date-fns/is_valid/index.js":
/*!*************************************************!*\
  !*** ./node_modules/date-fns/is_valid/index.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,o){var n=o(/*! ../is_date/index.js */"./node_modules/date-fns/is_date/index.js");e.exports=function(e){if(n(e))return!isNaN(e);throw new TypeError(toString.call(e)+" is not an instance of Date")}},"./node_modules/date-fns/locale/_lib/build_formatting_tokens_reg_exp/index.js":
/*!************************************************************************************!*\
  !*** ./node_modules/date-fns/locale/_lib/build_formatting_tokens_reg_exp/index.js ***!
  \************************************************************************************/
/*! no static exports found */function(e,t){var o=["M","MM","Q","D","DD","DDD","DDDD","d","E","W","WW","YY","YYYY","GG","GGGG","H","HH","h","hh","m","mm","s","ss","S","SS","SSS","Z","ZZ","X","x"];e.exports=function(e){var t=[];for(var n in e)e.hasOwnProperty(n)&&t.push(n);var r=o.concat(t).sort().reverse();return new RegExp("(\\[[^\\[]*\\])|(\\\\)?("+r.join("|")+"|.)","g")}},"./node_modules/date-fns/locale/en/build_distance_in_words_locale/index.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/date-fns/locale/en/build_distance_in_words_locale/index.js ***!
  \*********************************************************************************/
/*! no static exports found */function(e,t){e.exports=function(){var e={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};return{localize:function(t,o,n){var r;return n=n||{},r="string"==typeof e[t]?e[t]:1===o?e[t].one:e[t].other.replace("{{count}}",o),n.addSuffix?n.comparison>0?"in "+r:r+" ago":r}}}},"./node_modules/date-fns/locale/en/build_format_locale/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/date-fns/locale/en/build_format_locale/index.js ***!
  \**********************************************************************/
/*! no static exports found */function(e,t,o){var n=o(/*! ../../_lib/build_formatting_tokens_reg_exp/index.js */"./node_modules/date-fns/locale/_lib/build_formatting_tokens_reg_exp/index.js");e.exports=function(){var e=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],t=["January","February","March","April","May","June","July","August","September","October","November","December"],o=["Su","Mo","Tu","We","Th","Fr","Sa"],r=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],a=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],i=["AM","PM"],s=["am","pm"],d=["a.m.","p.m."],l={MMM:function(t){return e[t.getMonth()]},MMMM:function(e){return t[e.getMonth()]},dd:function(e){return o[e.getDay()]},ddd:function(e){return r[e.getDay()]},dddd:function(e){return a[e.getDay()]},A:function(e){return e.getHours()/12>=1?i[1]:i[0]},a:function(e){return e.getHours()/12>=1?s[1]:s[0]},aa:function(e){return e.getHours()/12>=1?d[1]:d[0]}};return["M","D","DDD","d","Q","W"].forEach(function(e){l[e+"o"]=function(t,o){return function(e){var t=e%100;if(t>20||t<10)switch(t%10){case 1:return e+"st";case 2:return e+"nd";case 3:return e+"rd"}return e+"th"}(o[e](t))}}),{formatters:l,formattingTokensRegExp:n(l)}}},"./node_modules/date-fns/locale/en/index.js":
/*!**************************************************!*\
  !*** ./node_modules/date-fns/locale/en/index.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,o){var n=o(/*! ./build_distance_in_words_locale/index.js */"./node_modules/date-fns/locale/en/build_distance_in_words_locale/index.js"),r=o(/*! ./build_format_locale/index.js */"./node_modules/date-fns/locale/en/build_format_locale/index.js");e.exports={distanceInWords:n(),format:r()}},"./node_modules/date-fns/parse/index.js":
/*!**********************************************!*\
  !*** ./node_modules/date-fns/parse/index.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,o){var n=o(/*! ../is_date/index.js */"./node_modules/date-fns/is_date/index.js"),r=36e5,a=6e4,i=2,s=/[T ]/,d=/:/,l=/^(\d{2})$/,u=[/^([+-]\d{2})$/,/^([+-]\d{3})$/,/^([+-]\d{4})$/],c=/^(\d{4})/,f=[/^([+-]\d{4})/,/^([+-]\d{5})/,/^([+-]\d{6})/],m=/^-(\d{2})$/,w=/^-?(\d{3})$/,g=/^-?(\d{2})-?(\d{2})$/,p=/^-?W(\d{2})$/,h=/^-?W(\d{2})-?(\d{1})$/,_=/^(\d{2}([.,]\d*)?)$/,v=/^(\d{2}):?(\d{2}([.,]\d*)?)$/,C=/^(\d{2}):?(\d{2}):?(\d{2}([.,]\d*)?)$/,b=/([Z+-].*)$/,k=/^(Z)$/,y=/^([+-])(\d{2})$/,x=/^([+-])(\d{2}):?(\d{2})$/;function I(e,t,o){t=t||0,o=o||0;var n=new Date(0);n.setUTCFullYear(e,0,4);var r=7*t+o+1-(n.getUTCDay()||7);return n.setUTCDate(n.getUTCDate()+r),n}e.exports=function(e,t){if(n(e))return new Date(e.getTime());if("string"!=typeof e)return new Date(e);var o=(t||{}).additionalDigits;o=null==o?i:Number(o);var T=function(e){var t,o={},n=e.split(s);if(d.test(n[0])?(o.date=null,t=n[0]):(o.date=n[0],t=n[1]),t){var r=b.exec(t);r?(o.time=t.replace(r[1],""),o.timezone=r[1]):o.time=t}return o}(e),E=function(e,t){var o,n=u[t],r=f[t];if(o=c.exec(e)||r.exec(e)){var a=o[1];return{year:parseInt(a,10),restDateString:e.slice(a.length)}}if(o=l.exec(e)||n.exec(e)){var i=o[1];return{year:100*parseInt(i,10),restDateString:e.slice(i.length)}}return{year:null}}(T.date,o),L=E.year,S=function(e,t){if(null===t)return null;var o,n,r,a;if(0===e.length)return(n=new Date(0)).setUTCFullYear(t),n;if(o=m.exec(e))return n=new Date(0),r=parseInt(o[1],10)-1,n.setUTCFullYear(t,r),n;if(o=w.exec(e)){n=new Date(0);var i=parseInt(o[1],10);return n.setUTCFullYear(t,0,i),n}if(o=g.exec(e)){n=new Date(0),r=parseInt(o[1],10)-1;var s=parseInt(o[2],10);return n.setUTCFullYear(t,r,s),n}if(o=p.exec(e))return a=parseInt(o[1],10)-1,I(t,a);if(o=h.exec(e)){a=parseInt(o[1],10)-1;var d=parseInt(o[2],10)-1;return I(t,a,d)}return null}(E.restDateString,L);if(S){var D,U=S.getTime(),M=0;return T.time&&(M=function(e){var t,o,n;if(t=_.exec(e))return(o=parseFloat(t[1].replace(",",".")))%24*r;if(t=v.exec(e))return o=parseInt(t[1],10),n=parseFloat(t[2].replace(",",".")),o%24*r+n*a;if(t=C.exec(e)){o=parseInt(t[1],10),n=parseInt(t[2],10);var i=parseFloat(t[3].replace(",","."));return o%24*r+n*a+1e3*i}return null}(T.time)),T.timezone?D=function(e){var t,o;return(t=k.exec(e))?0:(t=y.exec(e))?(o=60*parseInt(t[2],10),"+"===t[1]?-o:o):(t=x.exec(e))?(o=60*parseInt(t[2],10)+parseInt(t[3],10),"+"===t[1]?-o:o):0}(T.timezone):(D=new Date(U+M).getTimezoneOffset(),D=new Date(U+M+D*a).getTimezoneOffset()),new Date(U+M+D*a)}return new Date(e)}},"./node_modules/date-fns/start_of_day/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/date-fns/start_of_day/index.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,o){var n=o(/*! ../parse/index.js */"./node_modules/date-fns/parse/index.js");e.exports=function(e){var t=n(e);return t.setHours(0,0,0,0),t}},"./node_modules/date-fns/start_of_iso_week/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/date-fns/start_of_iso_week/index.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,o){var n=o(/*! ../start_of_week/index.js */"./node_modules/date-fns/start_of_week/index.js");e.exports=function(e){return n(e,{weekStartsOn:1})}},"./node_modules/date-fns/start_of_iso_year/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/date-fns/start_of_iso_year/index.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,o){var n=o(/*! ../get_iso_year/index.js */"./node_modules/date-fns/get_iso_year/index.js"),r=o(/*! ../start_of_iso_week/index.js */"./node_modules/date-fns/start_of_iso_week/index.js");e.exports=function(e){var t=n(e),o=new Date(0);return o.setFullYear(t,0,4),o.setHours(0,0,0,0),r(o)}},"./node_modules/date-fns/start_of_week/index.js":
/*!******************************************************!*\
  !*** ./node_modules/date-fns/start_of_week/index.js ***!
  \******************************************************/
/*! no static exports found */function(e,t,o){var n=o(/*! ../parse/index.js */"./node_modules/date-fns/parse/index.js");e.exports=function(e,t){var o=t&&Number(t.weekStartsOn)||0,r=n(e),a=r.getDay(),i=(a<o?7:0)+a-o;return r.setDate(r.getDate()-i),r.setHours(0,0,0,0),r}},"./node_modules/date-fns/start_of_year/index.js":
/*!******************************************************!*\
  !*** ./node_modules/date-fns/start_of_year/index.js ***!
  \******************************************************/
/*! no static exports found */function(e,t,o){var n=o(/*! ../parse/index.js */"./node_modules/date-fns/parse/index.js");e.exports=function(e){var t=n(e),o=new Date(0);return o.setFullYear(t.getFullYear(),0,1),o.setHours(0,0,0,0),o}},2:
/*!************************************************!*\
  !*** multi ../login/df.workgroup.login_new.js ***!
  \************************************************/
/*! no static exports found */function(e,t,o){e.exports=o(/*! ../login/df.workgroup.login_new.js */"../login/df.workgroup.login_new.js")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4uL2xvZ2luL2NoZWNraW5Db250cm9sbGVyLmpzIiwid2VicGFjazovLy8uLi9sb2dpbi9kZi53b3JrZ3JvdXAubG9naW5fbmV3LmpzIiwid2VicGFjazovLy8uLi9sb2dpbi9sb2dpbkJnQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi4vbG9naW4vbG9naW5DbG9jay5qcyIsIndlYnBhY2s6Ly8vLi4vbG9naW4vbG9naW5EYXRlLmpzIiwid2VicGFjazovLy8uLi9sb2dpbi9sb2dpbkZpZWxkQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi4vbG9naW4vbG9naW5JbmZvQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi4vbG9naW4vbG9naW5VdGlsQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi4vbG9naW4vbG9nb3V0Q29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi4vbG9naW4vbW9kYWxDb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uLi9sb2dpbi9zdGFydFN0b3BDb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9kaWZmZXJlbmNlX2luX2NhbGVuZGFyX2RheXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2Zvcm1hdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZ2V0X2RheV9vZl95ZWFyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9nZXRfaXNvX3dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2dldF9pc29feWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvaXNfZGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvaXNfdmFsaWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9fbGliL2J1aWxkX2Zvcm1hdHRpbmdfdG9rZW5zX3JlZ19leHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9lbi9idWlsZF9kaXN0YW5jZV9pbl93b3Jkc19sb2NhbGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9lbi9idWlsZF9mb3JtYXRfbG9jYWxlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvZW4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL3BhcnNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdGFydF9vZl9kYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL3N0YXJ0X29mX2lzb193ZWVrL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdGFydF9vZl9pc29feWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvc3RhcnRfb2Zfd2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvc3RhcnRfb2ZfeWVhci9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIl93cmFwcGVyIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiX2FyZWFfY2hlY2tpbiIsIl9hcmVhX2NoZWNrb3V0IiwiX2Zvcm0iLCJnZXRFbGVtZW50QnlJZCIsIl9mb3JtX291dCIsIl9idG5fY2hlY2tvdXQiLCJfSURfSU5URVJWQUxfQkFSIiwiX2pzb25fdXNlciIsIl9zZXRJbmZvIiwid2luZG93IiwiZGYiLCJ3b3JrZ3JvdXAiLCJHbG9iYWxWYXJzIiwiaW5mb0RhdGEiLCJ1c2VyIiwidGV4dENvbnRlbnQiLCJwb3NpdGlvbiIsImlzTG9nZ2VkSW4iLCJpc0NoZWNraW4iLCJ0eHRfY2hlY2tpbl90aW1lIiwiZGF0ZV9jaGVja2luIiwiRGF0ZSIsImNoZWNraW5fdGltZSIsImdldEhvdXJzIiwiVXRpbCIsImFkZFplcm9OdW1iZXIiLCJnZXRNaW51dGVzIiwidHh0X2NoZWNrb3V0X2FibGVfdGltZSIsImRhdGVfY2hlY2tvdXRfYWJsZSIsImNoZWNrb3V0X2FibGVfdGltZSIsImlzQ2hlY2tvdXQiLCJzdG9wU2V0VGltZUJhciIsInR4dF9jaGVja291dF90aW1lIiwiZGF0ZV9jaGVja291dCIsImNoZWNrb3V0X3RpbWUiLCJoaCIsImdldERhdGUiLCJzZXRUaW1lUGVyQmFyIiwic2V0SW50ZXJ2YWwiLCJkaXMiLCJwZXIiLCJ0aW1lX25vdyIsInBlcl9zdHIiLCJNYXRoIiwicm91bmQiLCJzdHlsZSIsIndpZHRoIiwiaXNBYmxlIiwibGFiIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsIl9jaGVja0FibGVUaW1lIiwiY2xlYXJJbnRlcnZhbCIsIl9zZXRVcmwiLCJqc29uX2RhdGEiLCJ1bmRlZmluZWQiLCJwcmVzZXQiLCJqc29uX3VybCIsImNoZWNraW4iLCJhY3Rpb24iLCJQcmVzZXQiLCJjaGVja291dCIsIl9vbkNsaWNrX2J0bl9jaGVja291dCIsIiRldnQiLCJwcmV2ZW50RGVmYXVsdCIsIl9zdWJtaXRfb3V0IiwiX29uU3VibWl0IiwibG9hZGluZyIsImNsYXNzX25hbWUiLCJzaG93SW4iLCJkaXNhYmxlX2lucHV0IiwiYWpheFBvc3QiLCJvbkNvbXBTdWJtaXQiLCJfb25TdWJtaXRfb3V0IiwiZGlzYWJsZV9pbnB1dF9vdXQiLCJsb2FkaW5nX291dCIsIm9uQ29tcFN1Ym1pdF9vdXQiLCJpbnB1dHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwibGVuZ3RoIiwic2V0QXR0cmlidXRlIiwicmVzcG9uc2UiLCJldmVudCIsIkN1c3RvbUV2ZW50IiwiZXZlbnRUeXBlIiwiT05fQ0hFQ0tJTiIsImRldGFpbCIsImRpc3BhdGNoRXZlbnQiLCJfZGlzcGF0Y2hPbkxvYWQiLCJzdGF0dXMiLCJnZXRTdGF0dXMiLCJpc1dhcm5pbmciLCJjb25zb2xlIiwibG9nIiwidGV4dCIsIl9kaXNwYXRjaE9uV2FybmluZyIsIk9OX0NIRUNLT1VUIiwiX2Rpc3BhdGNoT25Mb2FkX291dCIsImpzb24iLCJKU09OIiwicGFyc2UiLCJ0YXJnZXQiLCJyZXNwb25zZVRleHQiLCJ1c2VyX3N0YXR1c19jb2RlIiwidG9Mb3dlckNhc2UiLCJsaXN0Iiwic3RhdHVzX2xpc3QiLCJpdGVtIiwiY29kZSIsInR4dCIsIk9OX1dBUk5JTkciLCJtZXNzYWdlIiwiZm9ybSIsImNhbGxiYWNrIiwiZGF0YSIsImlpIiwiaW5wdXQiLCJwYXJhbXMiLCJtZXRob2QiLCJhZGRQYXJhbVVuaXEiLCJsb2FkX2pzb24iLCJpbml0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInNob3dDaGVja2luQnRuIiwicmVtb3ZlQXR0cmlidXRlIiwiYWJsZV9pbnB1dCIsInNob3dDaGVja291dEJ0biIsImFibGVfaW5wdXRfb3V0Iiwic2hvd0NoZWNrb3V0VGV4dCIsImhpZGVDaGVja2luQnRuIiwibG9naW4iLCJfZGF0ZV9ub3ciLCJfdGl0bGVfb3JpZ2luIiwiQ0xBU1NfTkFNRSIsImNvbnRhaW5lcl9pZnJhbWUiLCJjb250YWluZXJfY2xvY2siLCJjb250YWluZXJfZGF0ZSIsIl9qc29uX2RhdGEiLCJfb2Zmc2V0VGltZSIsIl9jbG9jayIsIl9sb2dpbkNsb2NrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsImEiLCJfZGF0ZUluZm8iLCJfbG9naW5EYXRlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCIsIl9iZ0NvbnRyb2xsIiwiX2xvZ2luQmdDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdCIsIl9sb2dpbkNvbnRyb2xsZXIiLCJfbG9naW5GaWVsZENvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX19kZWZhdWx0IiwiX2xvZ291dENvbnRyb2xsZXIiLCJfbG9nb3V0Q29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fX2RlZmF1bHQiLCJfY2hlY2tpbkNvbnRyb2xsZXIiLCJfY2hlY2tpbkNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX19kZWZhdWx0IiwiX3N0YXJ0U3RvcENvbnRyb2xsZXIiLCJfc3RhcnRTdG9wQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fX2RlZmF1bHQiLCJfbG9naW5JbmZvQ29udHJvbGxlciIsIl9sb2dpbkluZm9Db250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X19fZGVmYXVsdCIsIl9sb2dpblV0aWxDb250cm9sbGVyIiwiX2xvZ2luVXRpbENvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfX19kZWZhdWx0IiwiX21vZGFsQ29udHJvbGxlciIsIl9tb2RhbENvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfX19kZWZhdWx0IiwiX3NhdmVfREQiLCJfaXNDaGFuZ2VUb1RvbW9yb3ciLCJfSURfcmVmcmVzaCIsIl9zZXRPZmZzZXRUaW1lIiwiaW5mbyIsImRhdGUiLCJzZXJ2ZXJfdGltZSIsImdldFRpbWUiLCJfcmVzZXREYXRhIiwiYWN0dWFsX0pTT04iLCJfb25Mb2dpbiIsImV2dCIsIl91cGRhdGVTdGF0dXMiLCJfb25DaGVja2luIiwiX29uQ2hlY2tvdXQiLCJfb25TdGFydCIsIl9vblN0b3AiLCJfb25Mb2dvdXQiLCJfb25XYXJuaW5nIiwic2hvd01vZGFsIiwiX29uQ2hhbmdlX3N0YWdlX2luZm8iLCJjbGVhclRpbWVvdXQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib25Nb3VzZU1vdmVfY2hhbmdlRGF0ZSIsIl9yZXNldENoYW5nZURhdGVDaGVjayIsImVsX2h0bWwiLCJpc0Rlc2t0b3AiLCJoYXNDbGFzcyIsInJldFVybCIsImxvY2F0aW9uIiwiaHJlZiIsImRlY29kZVVSSUNvbXBvbmVudCIsIkRldGVjdGl6ciIsImRldmljZSIsInR5cGUiLCJpc0FkbWluQWNjb3VudCIsInRpdGxlIiwidGVzdCIsInJlc2V0RGF0YSIsIm5vdGljZSIsImJpcnRoZGF5IiwidG9kYXkiLCJzZWNfbG9naW4iLCJoaWRlTG9naW5Gcm9tIiwic2hvd0xvZ291dEJ0biIsInNob3dTdGFydEJ0biIsInNlY191dGlsIiwic2hvd05vdGljZSIsIl9zZXRMYXlvdXRfTG9naW4iLCJ3b3JrSW5mbyIsImlzV29ya2luZyIsInNob3dTdG9wQnRuIiwiaGlkZVN0b3BCdG4iLCJoaWRlTG9nb3V0QnRuIiwiaGlkZVN0YXJ0QnRuIiwic2hvd0xvZ2luRnJvbSIsIl9zZXRMYXlvdXRfTG9nb3V0IiwiX3VwZGF0ZVRpbWVyIiwiX3NldE5vdyIsIl9kZWxheUF1dG9SZWZyZXNoIiwic2V0VGltZW91dCIsIl9zZXRUaW1lciIsInVwZGF0ZVRvZGF5Iiwic2V0VGltZSIsInJlbG9hZCIsImRvY3VtZW50X3VybCIsIm1haW5fdXJsIiwiY29uX2hlYWRlciIsImNvbl9pbmZvIiwiY29uX2xvZ2luIiwiY29uX2Zvb3RlciIsInN0YXJ0TW90aW9uIiwiT05fTE9HSU4iLCJPTl9TVEFSVCIsIk9OX1NUT1AiLCJPTl9DSEFOR0VfU1RBR0VfSU5GTyIsIk9OX0xPR09VVCIsImNvbl9pZnJhbWUiLCJkaW0iLCJhcnJfYmdfbGlzdCIsImdldFJhbmRvbVNob3dBcnIiLCJpbmRleCIsImFycmF5IiwicmFuZG9tX3Nob3ciLCJqc29uX3Rlc3RfYmciLCJiZ19jb250ZW50cyIsImpzb25fdG9kYXlfYmciLCJqc29uX2JpcnRoZGF5IiwiY29uY2F0IiwicmFuZG9tX2FyciIsIndlYXRoZXIiLCJmaWx0ZXIiLCJhcnR3b3JrIiwiY3VzdG9tIiwiY3VzdG9tX2ltYWdlX3NsaWRlIiwiY3VzdG9tX3ZpZGVvX3BsYXllciIsInNldEFycl9iZ0xpc3QiLCJyYW5faW5kZXgiLCJmbG9vciIsInJhbmRvbSIsInVybCIsImlmcm0iLCJjcmVhdGVFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJzZXRfaWZyYW1lIiwiY29uIiwiX2NvbiIsIl9kZWZfb3B0cyIsIm9iamVjdE5hbWUiLCJjb250YWluZXIiLCJib2R5Iiwic3RhZ2VXaWR0aCIsInN0YWdlSGVpZ2h0IiwiX29wdHMiLCJfdmFycyIsImNvdW50Iiwib1ciLCJvSCIsImRhdGVfbm93IiwiX3BpeGkiLCJyZW5kZXIiLCJhcHAiLCJtYWluQ29udGFpbmVyIiwiY2xvY2tDb250YWluZXIiLCJjbG9ja0dyYXBoaWMiLCJiYXJfaGgiLCJiYXJfbW0iLCJiYXJfc3MiLCJ0eHRfaGgiLCJ0eHRfbW0iLCJ0eHRfc3MiLCJJRF90aW1lb3V0IiwiX3NldHRpbmciLCJhcmciLCJjb21iaW5lX29iamVjdF92YWx1ZSIsIl9zZXRQaXhpIiwiUElYSSIsIkNvbnRhaW5lciIsInN0YWdlIiwiYWRkQ2hpbGQiLCJ0aWNrZXIiLCJUaWNrZXIiLCJhdXRvU3RhcnQiLCJHcmFwaGljcyIsInJvdGF0aW9uIiwicmFkaWFucyIsImFscGhhIiwic2NhbGUiLCJ4IiwiX3NldHRpbmdUeHQiLCJfcmVzZXRTaXplIiwidmlldyIsIl9hZGRFdmVudCIsIm9ucmVzaXplIiwiY2hlY2tTaXplIiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJzdHlsZV9oaCIsIlRleHRTdHlsZSIsImZvbnRGYW1pbHkiLCJmb250U2l6ZSIsImZvbnRXZWlnaHQiLCJmaWxsIiwiVGV4dCIsInN0eWxlX21tIiwic3R5bGVfc3MiLCJ3IiwiaCIsImhlaWdodCIsImNlbnRlcl94IiwiY2VudGVyX3kiLCJ5IiwiaGFsZiIsIm1pbiIsImhhbGZfc3MiLCJoYWxmX21tIiwiaGFsZl9oaCIsImNsZWFyIiwiYmVnaW5GaWxsIiwiZHJhd1JvdW5kZWRSZWN0IiwiZW5kRmlsbCIsIl9kcmF3QmFyIiwicmVuZGVyZXIiLCJyZXNpemUiLCJzZXR0aW5ncyIsIlJFU09MVVRJT04iLCJkZXZpY2VQaXhlbFJhdGlvIiwiU0NBTEVfTU9ERSIsIlNDQUxFX01PREVTIiwiTkVBUkVTVCIsIkFwcGxpY2F0aW9uIiwidHJhbnNwYXJlbnQiLCJhbnRpYWxpYXMiLCJfc3RhcnQiLCJfZHJhd0NhbnZhcyIsIlR3ZWVuTWF4IiwidG8iLCJlYXNlIiwiRXhwbyIsImVhc2VPdXQiLCJkZWxheSIsInN0YXJ0X2RlbGF5IiwiZWFzZUluT3V0IiwiQ3ViaWMiLCJhZGQiLCJkbGV0YSIsIl91cGRhdGVWYWx1ZSIsIl91cGRhdGVUaW1lIiwiZ2V0RGF0ZV9mb3JtYXQiLCJtbSIsImRlZ3JlZV9zIiwiZ2V0U2Vjb25kcyIsImFuZ2xlX3NzIiwiZGVncmVlX20iLCJhbmdsZV9tbSIsImRlZ3JlZV9oIiwiYW5nbGVfaGgiLCJwb2ludF9oaCIsIlBvaW50IiwicG9pbnRfbW0iLCJwb2ludF9zcyIsImNvcyIsInNpbiIsIl91cGRhdGVUb2RheSIsIl9lbCIsInR4dF9NTSIsInR4dF9ERCIsInR4dF9EVyIsIl90b2RheSIsIk1NIiwiREQiLCJEVyIsIl9JRF9USU1FT1VUIiwiaW5wdXRfdXNlcl9pZCIsImlucHV0X3VzZXJfcHciLCJzdG9yYWdlSWQiLCJzdG9yYWdlUHciLCJLRVlCT0FSRF9FTlRFUiIsIktFWUJPQVJEX1RBQiIsInNldEZvY3VzX2lkIiwiZm9jdXMiLCJzZWxlY3QiLCJfb25Gb2N1c19QVyIsIl9rZXlwcmVzc0lkIiwid2hpY2giLCJ1c2VyX2lkIiwidXNlcl9wdyIsImJsdXIiLCJfbG9naW5DaGVjayIsIk9OX0NMT1NFX01PREFMIiwiX29uQ2xvc2VfbW9kYWxfZm9ySUQiLCJfb25DbG9zZV9tb2RhbF9mb3JQVyIsIl9qc29uX25vdGljZSIsIl9qc29uX2JpcnRoZGF5IiwiX0lEX2FkZEV2ZW50IiwiX0lEX2F1dG9TaG93IiwiX3N0YWdlX2Nsb2NrIiwiX3N0YWdlX25vdGljZSIsIl9zdGFnZV9iaXJ0aGRheSIsIl9zdGFnZV9jb24iLCJfaW5mb19jb24iLCJfaW5kaWNhdG9yIiwiX2N1ckluZGV4IiwiX3BvcyIsIm9YIiwib1kiLCJwYXNzWCIsInBhc3NZIiwiX2lzSGFzTm90aWNlIiwiX2lzSGFzQmlydGhkYXkiLCJfVElNRV9ST0xMSU5HIiwic3RhcnQiLCJqc29uX25vdGljZSIsInN0b3BBdXRvU2hvdyIsImRlYyIsInR4dF9jb24iLCJpbm5lciIsImlubmVySFRNTCIsInR4dF9jb25fc3ViIiwic2V0Tm90aWNlIiwic3RyX25vdGljZSIsInRvdCIsInNldEJpcnRoZGF5IiwiYWRkRXZlbnQiLCJyZW1vdmVFdmVudCIsIl9uZXh0U3RhZ2UiLCJfcmVtb3ZlRXZlbnRfaW5kaSIsImxpc3RzIiwiYnRuIiwiX29uQ2xpY2tfaW5kaSIsIl9hZGRFdmVudF9pbmRpIiwiX3NldEluZGlJbmRleCIsImN1cnJlbnRUYXJnZXQiLCJfY2hhbmdlU3RhZ2UiLCJwYXJzZUludCIsImdldEF0dHJpYnV0ZSIsIm9uVG91Y2hTdGFydF9zdGFnZSIsIm9uQ2xpY2tfc3RhZ2UiLCJfc2hvd0Nsb2NrIiwiX3Nob3dOb3RpY2UiLCJfc2hvd0JpcnRoZGF5Iiwic3RvcFByb3BhZ2F0aW9uIiwib25Ub3VjaE1vdmVfc3RhZ2UiLCJvblRvdWNoRW5kX3N0YWdlIiwicG9pbnRYIiwicG9pbnRZIiwiY2xpZW50WCIsImNsaWVudFkiLCJ0b3VjaGVzIiwicGFnZVgiLCJwYWdlWSIsImRpc1giLCJhYnMiLCJfcHJldlN0YWdlIiwic2V0SGlkZV9jbG9jayIsInNldEhpZGVfYmlydGhkYXkiLCJzZXRIaWRlX25vdGljZSIsImN1ckluZGV4IiwiX2Rpc3BhdGNoRXZlbnQiLCJpc1RvTGVmdCIsIl9zZXREb2NOdW0iLCJqc29uX3VzZXIiLCJudW1fZG9jX2FwcHJvdmFsIiwibnVtX2RvY19hcHByb3ZhbF9teSIsIm51bV9kb2NfYXBwcm92YWxfY2MiLCJkb2N1bWVudF9hcHByb3ZhbF9udW0iLCJkb2N1bWVudF9hcHByb3ZhbF9teV9udW0iLCJkb2N1bWVudF9hcHByb3ZhbF9jY19udW0iLCJqc29uX2RvY3VtZW50X3VybCIsImpzb25fbWFpbl91cmwiLCJsaW5rX2RvY19hcHByb3ZhbCIsImxpbmtfZG9jX2FwcHJvdmFsX215IiwibGlua19kb2NfYXBwcm92YWxfY2MiLCJsaW5rX21haW4iLCJhcHByb3ZhbCIsImFwcHJvdmFsX215IiwiYXBwcm92YWxfY2MiLCJsb2dvdXQiLCJvblN1Ym1pdCIsIl9vbkNsb3NlX21vZGFsIiwiYnRuX2xvZ291dCIsIl9tb2RhbCIsIl9tb2RhbF90eHQiLCJfYnRuX2Nsb3NlIiwiX2Nsb3NlTW9kYWwiLCJkaXNwbGF5Iiwib25jbGljayIsImNsb3NlTW9kYWwiLCJfYXJlYV9zdGFydCIsIl9hcmVhX3N0b3AiLCJfZm9ybV9zdG9wIiwidHh0X3RpbWUiLCJkYXRlX3N0YXJ0Iiwic3RhcnRlZFRpbWUiLCJ0eHRfd29ya2luZ3RpbWUiLCJ2YWx1ZV93b3JraW5ndGltZSIsImdldFdvcmtpbmdUaW1lRnJvbU1pY3JvU0VDIiwid29ya2luZ1RpbWVfZm9yVG9kYXkiLCJob3VycyIsIm1pbnV0ZXMiLCJ3b3JraW5nVGltZV9mb3JUaGlzV2VlayIsIndvcmtpbmdUaW1lX2ZvclRoaXNNb250aCIsIm1pY3JvU0VDIiwic2VjIiwic2Vjb25kcyIsInN0b3AiLCJfb25TdWJtaXRfc3RvcCIsImRpc2FibGVfaW5wdXRfc3RvcCIsImxvYWRpbmdfZm9yU3RvcCIsIm9uQ29tcFN1Ym1pdF9zdG9wIiwiX2Rpc3BhdGNoT25Mb2FkX3N0b3AiLCJhYmxlX2lucHV0X3N0b3AiLCJzdGFydE9mRGF5IiwiTUlMTElTRUNPTkRTX0lOX01JTlVURSIsIk1JTExJU0VDT05EU19JTl9EQVkiLCJkaXJ0eURhdGVMZWZ0IiwiZGlydHlEYXRlUmlnaHQiLCJzdGFydE9mRGF5TGVmdCIsInN0YXJ0T2ZEYXlSaWdodCIsInRpbWVzdGFtcExlZnQiLCJnZXRUaW1lem9uZU9mZnNldCIsInRpbWVzdGFtcFJpZ2h0IiwiZ2V0RGF5T2ZZZWFyIiwiZ2V0SVNPV2VlayIsImdldElTT1llYXIiLCJpc1ZhbGlkIiwiZW5Mb2NhbGUiLCJmb3JtYXR0ZXJzIiwiTSIsImdldE1vbnRoIiwiYWRkTGVhZGluZ1plcm9zIiwiUSIsImNlaWwiLCJEIiwiREREIiwiRERERCIsImdldERheSIsIkUiLCJXIiwiV1ciLCJZWSIsImdldEZ1bGxZZWFyIiwic3Vic3RyIiwiWVlZWSIsIkdHIiwiU3RyaW5nIiwiR0dHRyIsIkgiLCJISCIsInNzIiwiUyIsImdldE1pbGxpc2Vjb25kcyIsIlNTIiwiU1NTIiwiWiIsImZvcm1hdFRpbWV6b25lIiwiWloiLCJYIiwicmVtb3ZlRm9ybWF0dGluZ1Rva2VucyIsIm1hdGNoIiwicmVwbGFjZSIsIm9mZnNldCIsImRlbGltZXRlciIsInNpZ24iLCJhYnNPZmZzZXQiLCJudW1iZXIiLCJ0YXJnZXRMZW5ndGgiLCJvdXRwdXQiLCJ0b1N0cmluZyIsImRpcnR5RGF0ZSIsImRpcnR5Rm9ybWF0U3RyIiwiZGlydHlPcHRpb25zIiwiZm9ybWF0U3RyIiwibG9jYWxlIiwibG9jYWxlRm9ybWF0dGVycyIsImZvcm1hdCIsImZvcm1hdHRpbmdUb2tlbnNSZWdFeHAiLCJmb3JtYXR0ZXIiLCJGdW5jdGlvbiIsImJ1aWxkRm9ybWF0Rm4iLCJmb3JtYXRGbiIsInN0YXJ0T2ZZZWFyIiwiZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzIiwic3RhcnRPZklTT1dlZWsiLCJzdGFydE9mSVNPWWVhciIsIk1JTExJU0VDT05EU19JTl9XRUVLIiwiZGlmZiIsInllYXIiLCJmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyIiwic2V0RnVsbFllYXIiLCJzZXRIb3VycyIsInN0YXJ0T2ZOZXh0WWVhciIsImZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIiLCJzdGFydE9mVGhpc1llYXIiLCJhcmd1bWVudCIsImlzRGF0ZSIsImlzTmFOIiwiVHlwZUVycm9yIiwiY29tbW9uRm9ybWF0dGVyS2V5cyIsImZvcm1hdHRlcktleXMiLCJwdXNoIiwiZm9ybWF0dGluZ1Rva2VucyIsInNvcnQiLCJyZXZlcnNlIiwiUmVnRXhwIiwiam9pbiIsImRpc3RhbmNlSW5Xb3Jkc0xvY2FsZSIsImxlc3NUaGFuWFNlY29uZHMiLCJvbmUiLCJvdGhlciIsInhTZWNvbmRzIiwiaGFsZkFNaW51dGUiLCJsZXNzVGhhblhNaW51dGVzIiwieE1pbnV0ZXMiLCJhYm91dFhIb3VycyIsInhIb3VycyIsInhEYXlzIiwiYWJvdXRYTW9udGhzIiwieE1vbnRocyIsImFib3V0WFllYXJzIiwieFllYXJzIiwib3ZlclhZZWFycyIsImFsbW9zdFhZZWFycyIsImxvY2FsaXplIiwidG9rZW4iLCJvcHRpb25zIiwicmVzdWx0IiwiYWRkU3VmZml4IiwiY29tcGFyaXNvbiIsImJ1aWxkRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCIsIm1vbnRoczNjaGFyIiwibW9udGhzRnVsbCIsIndlZWtkYXlzMmNoYXIiLCJ3ZWVrZGF5czNjaGFyIiwid2Vla2RheXNGdWxsIiwibWVyaWRpZW1VcHBlcmNhc2UiLCJtZXJpZGllbUxvd2VyY2FzZSIsIm1lcmlkaWVtRnVsbCIsIk1NTSIsIk1NTU0iLCJkZCIsImRkZCIsImRkZGQiLCJBIiwiYWEiLCJmb3JFYWNoIiwiZm9ybWF0dGVyVG9rZW4iLCJyZW0xMDAiLCJvcmRpbmFsIiwiYnVpbGREaXN0YW5jZUluV29yZHNMb2NhbGUiLCJidWlsZEZvcm1hdExvY2FsZSIsImRpc3RhbmNlSW5Xb3JkcyIsIk1JTExJU0VDT05EU19JTl9IT1VSIiwiREVGQVVMVF9BRERJVElPTkFMX0RJR0lUUyIsInBhcnNlVG9rZW5EYXRlVGltZURlbGltZXRlciIsInBhcnNlVG9rZW5QbGFpblRpbWUiLCJwYXJzZVRva2VuWVkiLCJwYXJzZVRva2Vuc1lZWSIsInBhcnNlVG9rZW5ZWVlZIiwicGFyc2VUb2tlbnNZWVlZWSIsInBhcnNlVG9rZW5NTSIsInBhcnNlVG9rZW5EREQiLCJwYXJzZVRva2VuTU1ERCIsInBhcnNlVG9rZW5Xd3ciLCJwYXJzZVRva2VuV3d3RCIsInBhcnNlVG9rZW5ISCIsInBhcnNlVG9rZW5ISE1NIiwicGFyc2VUb2tlbkhITU1TUyIsInBhcnNlVG9rZW5UaW1lem9uZSIsInBhcnNlVG9rZW5UaW1lem9uZVoiLCJwYXJzZVRva2VuVGltZXpvbmVISCIsInBhcnNlVG9rZW5UaW1lem9uZUhITU0iLCJkYXlPZklTT1llYXIiLCJpc29ZZWFyIiwid2VlayIsImRheSIsInNldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDRGF5Iiwic2V0VVRDRGF0ZSIsImdldFVUQ0RhdGUiLCJhZGRpdGlvbmFsRGlnaXRzIiwiTnVtYmVyIiwiZGF0ZVN0cmluZ3MiLCJkYXRlU3RyaW5nIiwidGltZVN0cmluZyIsInNwbGl0IiwiZXhlYyIsInRpbWUiLCJ0aW1lem9uZSIsInNwbGl0RGF0ZVN0cmluZyIsInBhcnNlWWVhclJlc3VsdCIsInBhcnNlVG9rZW5ZWVkiLCJwYXJzZVRva2VuWVlZWVkiLCJ5ZWFyU3RyaW5nIiwicmVzdERhdGVTdHJpbmciLCJzbGljZSIsImNlbnR1cnlTdHJpbmciLCJwYXJzZVllYXIiLCJtb250aCIsImRheU9mWWVhciIsImRheU9mV2VlayIsInBhcnNlRGF0ZSIsInRpbWVzdGFtcCIsInBhcnNlRmxvYXQiLCJwYXJzZVRpbWUiLCJ0aW1lem9uZVN0cmluZyIsImFic29sdXRlT2Zmc2V0IiwicGFyc2VUaW1lem9uZSIsInN0YXJ0T2ZXZWVrIiwid2Vla1N0YXJ0c09uIiwiZm91cnRoT2ZKYW51YXJ5Iiwic2V0RGF0ZSIsImNsZWFuRGF0ZSJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEdBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDWixFQUFBa0IsRUFBQSxTQUFBaEIsR0FDQSxvQkFBQWlCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUFiLEVBQUFpQixPQUFBQyxhQUF3REMsTUFBQSxXQUV4RFAsT0FBQUMsZUFBQWIsRUFBQSxjQUFpRG1CLE9BQUEsS0FRakRyQixFQUFBc0IsRUFBQSxTQUFBRCxFQUFBRSxHQUVBLEdBREEsRUFBQUEsSUFBQUYsRUFBQXJCLEVBQUFxQixJQUNBLEVBQUFFLEVBQUEsT0FBQUYsRUFDQSxLQUFBRSxHQUFBLGlCQUFBRixRQUFBRyxXQUFBLE9BQUFILEVBQ0EsSUFBQUksRUFBQVgsT0FBQVksT0FBQSxNQUdBLEdBRkExQixFQUFBa0IsRUFBQU8sR0FDQVgsT0FBQUMsZUFBQVUsRUFBQSxXQUF5Q1QsWUFBQSxFQUFBSyxVQUN6QyxFQUFBRSxHQUFBLGlCQUFBRixFQUFBLFFBQUFNLEtBQUFOLEVBQUFyQixFQUFBVSxFQUFBZSxFQUFBRSxFQUFBLFNBQUFBLEdBQWdILE9BQUFOLEVBQUFNLElBQXFCQyxLQUFBLEtBQUFELElBQ3JJLE9BQUFG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LEVBQUFsb0Isc0NBQUEsc0RBOEJBRyxFQUFBRCxRQVRBLFNBQUFrbkIsR0FDQSxJQUFBa0IsRUFBQS9ELEVBQUE2QyxHQUNBNkksRUFBQSxJQUFBcnNCLEtBQUEsR0FJQSxPQUhBcXNCLEVBQUF6SCxZQUFBRixFQUFBLEtBQ0EySCxFQUFBeEgsU0FBQSxTQUNBUCxFQUFBK0g7Ozs7OENDM0JBLElBQUF0bkIsRUFBQTNJLDBCQUFBLDBDQXFDQUcsRUFBQUQsUUFaQSxTQUFBa25CLEVBQUFFLEdBQ0EsSUFBQTBJLEVBQUExSSxHQUFBOEcsT0FBQTlHLEVBQUEwSSxlQUFBLEVBRUFwakIsRUFBQWpFLEVBQUF5ZSxHQUNBMEcsRUFBQWxoQixFQUFBdVksU0FDQWtELEdBQUF5RixFQUFBa0MsRUFBQSxLQUFBbEMsRUFBQWtDLEVBSUEsT0FGQXBqQixFQUFBc2pCLFFBQUF0akIsRUFBQWpJLFVBQUEwakIsR0FDQXpiLEVBQUE2YixTQUFBLFNBQ0E3Yjs7Ozs4Q0NsQ0EsSUFBQWpFLEVBQUEzSSwwQkFBQSwwQ0EwQkFHLEVBQUFELFFBUkEsU0FBQWtuQixHQUNBLElBQUErSSxFQUFBeG5CLEVBQUF5ZSxHQUNBeGEsRUFBQSxJQUFBaEosS0FBQSxHQUdBLE9BRkFnSixFQUFBNGIsWUFBQTJILEVBQUEzSyxjQUFBLEtBQ0E1WSxFQUFBNmIsU0FBQSxTQUNBN2IiLCJmaWxlIjoiZGYud29ya2dyb3VwLmxvZ2luX25ldy5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMik7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHZhciBDTEFTU19OQU1FID0gXCJbIENoZWNraW5Db250cm9sbGVyIF1cIjtcblxuICAgIHZhciBfd3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZWMtbG9naW4gLndyYXBwZXItY2hlY2tpbicpO1xuICAgIHZhciBfYXJlYV9jaGVja2luID0gX3dyYXBwZXIucXVlcnlTZWxlY3RvcignLmFyZWEtY2hlY2staW5vdXQuYXJlYS1jaGVja2luJyk7XG4gICAgdmFyIF9hcmVhX2NoZWNrb3V0ID0gX3dyYXBwZXIucXVlcnlTZWxlY3RvcignLmFyZWEtY2hlY2staW5vdXQuYXJlYS1jaGVja291dCcpO1xuXG4gICAgdmFyIF9mb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lkX2NoZWNraW4nKTtcbiAgICB2YXIgX2Zvcm1fb3V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lkX2NoZWNrb3V0Jyk7XG4gICAgdmFyIF9idG5fY2hlY2tvdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaWRfYnRuX2NoZWNrb3V0X3JlJyk7XG5cbiAgICB2YXIgX2lzQ2hlY2tpbiA9IGZhbHNlO1xuICAgIHZhciBfSURfSU5URVJWQUxfQkFSID0gMDtcblxuICAgIHZhciBfanNvbl91c2VyID0gbnVsbDtcblxuICAgIGZ1bmN0aW9uIF9pbml0KCkge1xuICAgICAgICBfc2V0SW5mbygpO1xuICAgICAgICBfc2V0VXJsKCk7XG4gICAgICAgIF9mb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIF9vblN1Ym1pdCk7XG4gICAgICAgIF9mb3JtX291dC5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBfb25TdWJtaXRfb3V0KTtcbiAgICAgICAgX2J0bl9jaGVja291dC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIF9vbkNsaWNrX2J0bl9jaGVja291dCk7XG4gICAgICAgIGRpc2FibGVfaW5wdXQoKTtcbiAgICAgICAgZGlzYWJsZV9pbnB1dF9vdXQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfc2V0SW5mbygpIHtcbiAgICAgICAgX2pzb25fdXNlciA9IHdpbmRvdy5kZi53b3JrZ3JvdXAuR2xvYmFsVmFycy5pbmZvRGF0YS51c2VyO1xuXG5cbiAgICAgICAgdmFyIHR4dF9uYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpZF91c2VyX25hbWVcIik7XG4gICAgICAgIHR4dF9uYW1lLnRleHRDb250ZW50ID0gX2pzb25fdXNlci5uYW1lO1xuXG4gICAgICAgIHZhciB0eHRfcG9zaXRpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImlkX3VzZXJfcG9zaXRpb25cIik7XG4gICAgICAgIHR4dF9wb3NpdGlvbi50ZXh0Q29udGVudCA9IF9qc29uX3VzZXIucG9zaXRpb247XG5cbiAgICAgICAgaWYgKF9qc29uX3VzZXIuaXNMb2dnZWRJbikge1xuXG4gICAgICAgICAgICBpZiAoX2pzb25fdXNlci5pc0NoZWNraW4pIHtcbiAgICAgICAgICAgICAgICB2YXIgdHh0X2NoZWNraW5fdGltZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaWRfY2hlY2tpbl90aW1lXCIpO1xuICAgICAgICAgICAgICAgIHZhciBkYXRlX2NoZWNraW4gPSBuZXcgRGF0ZShfanNvbl91c2VyLmNoZWNraW5fdGltZSk7XG4gICAgICAgICAgICAgICAgdHh0X2NoZWNraW5fdGltZS50ZXh0Q29udGVudCA9IGRhdGVfY2hlY2tpbi5nZXRIb3VycygpICsgXCLsi5wgXCIgKyB3aW5kb3cuZGYud29ya2dyb3VwLlV0aWwuYWRkWmVyb051bWJlcihkYXRlX2NoZWNraW4uZ2V0TWludXRlcygpKSArIFwi67aEXCI7XG5cbiAgICAgICAgICAgICAgICAvLyBjaGVja291dCBhYmxlIHRpbWVcbiAgICAgICAgICAgICAgICB2YXIgdHh0X2NoZWNrb3V0X2FibGVfdGltZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaWRfY2hlY2tvdXRfYWJsZV90aW1lXCIpO1xuICAgICAgICAgICAgICAgIHZhciBkYXRlX2NoZWNrb3V0X2FibGUgPSBuZXcgRGF0ZShfanNvbl91c2VyLmNoZWNrb3V0X2FibGVfdGltZSk7XG5cbiAgICAgICAgICAgICAgICB0eHRfY2hlY2tvdXRfYWJsZV90aW1lLnRleHRDb250ZW50ID0gZGF0ZV9jaGVja291dF9hYmxlLmdldEhvdXJzKCkgKyBcIuyLnCBcIiArIHdpbmRvdy5kZi53b3JrZ3JvdXAuVXRpbC5hZGRaZXJvTnVtYmVyKGRhdGVfY2hlY2tvdXRfYWJsZS5nZXRNaW51dGVzKCkpICsgXCLrtoRcIjtcblxuICAgICAgICAgICAgICAgIF9pc0NoZWNraW4gPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFfanNvbl91c2VyLmlzQ2hlY2tvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRTZXRUaW1lQmFyKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3RvcFNldFRpbWVCYXIoKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgdHh0X2NoZWNrb3V0X3RpbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImlkX2NoZWNrb3V0X3RpbWVcIik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRlX2NoZWNrb3V0ID0gbmV3IERhdGUoX2pzb25fdXNlci5jaGVja291dF90aW1lKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgaGggPSBkYXRlX2NoZWNrb3V0LmdldEhvdXJzKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRlX2NoZWNrb3V0LmdldERhdGUoKSAtIGRhdGVfY2hlY2tpbi5nZXREYXRlKCkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoaCA9ICgoZGF0ZV9jaGVja291dC5nZXREYXRlKCkgLSBkYXRlX2NoZWNraW4uZ2V0RGF0ZSgpKSAqIDI0KSArIGRhdGVfY2hlY2tvdXQuZ2V0SG91cnMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHR4dF9jaGVja291dF90aW1lLnRleHRDb250ZW50ID0gaGggKyBcIuyLnCBcIiArIHdpbmRvdy5kZi53b3JrZ3JvdXAuVXRpbC5hZGRaZXJvTnVtYmVyKGRhdGVfY2hlY2tvdXQuZ2V0TWludXRlcygpKSArIFwi67aEXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdG9wU2V0VGltZUJhcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RvcFNldFRpbWVCYXIoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0YXJ0U2V0VGltZUJhcigpIHtcbiAgICAgICAgc3RvcFNldFRpbWVCYXIoKTtcbiAgICAgICAgc2V0VGltZVBlckJhcigpO1xuICAgICAgICAvL19JRF9JTlRFUlZBTF9CQVIgPSBzZXRJbnRlcnZhbChzZXRUaW1lUGVyQmFyLCAzMDAwMCk7XG4gICAgICAgIF9JRF9JTlRFUlZBTF9CQVIgPSBzZXRJbnRlcnZhbChzZXRUaW1lUGVyQmFyLCAxMDAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRUaW1lUGVyQmFyKCkge1xuXG4gICAgICAgIGlmIChfanNvbl91c2VyLmlzQ2hlY2tpbikge1xuXG4gICAgICAgICAgICB2YXIgZGlzID0gX2pzb25fdXNlci5jaGVja291dF9hYmxlX3RpbWUgLSBfanNvbl91c2VyLmNoZWNraW5fdGltZTtcbiAgICAgICAgICAgIHZhciBjdXIgPSB3aW5kb3cuZGYud29ya2dyb3VwLkdsb2JhbFZhcnMudGltZV9ub3cgLSBfanNvbl91c2VyLmNoZWNraW5fdGltZTtcblxuICAgICAgICAgICAgdmFyIHBlciA9IGN1ciAvIGRpcztcblxuICAgICAgICAgICAgaWYgKHBlciA8IDApIHBlciA9IDA7XG4gICAgICAgICAgICBpZiAocGVyID4gMSkgcGVyID0gMTtcblxuICAgICAgICAgICAgdmFyIHBlcl9zdHIgPSBNYXRoLnJvdW5kKHBlciAqIDEwMCkgKyBcIiVcIjtcbiAgICAgICAgICAgIHZhciBjdXJfYmFyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpZF9wZXJfdGltZVwiKTtcbiAgICAgICAgICAgIGN1cl9iYXIuc3R5bGUud2lkdGggPSBwZXJfc3RyO1xuXG4gICAgICAgICAgICBfY2hlY2tBYmxlVGltZShwZXIgPj0gMCk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0b3BTZXRUaW1lQmFyKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdG9wU2V0VGltZUJhcigpIHtcbiAgICAgICAgX2lzQ2hlY2tpbiA9IGZhbHNlO1xuICAgICAgICBjbGVhckludGVydmFsKF9JRF9JTlRFUlZBTF9CQVIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9zZXRVcmwoKSB7XG4gICAgICAgIHZhciBqc29uX2RhdGEgPSB3aW5kb3cuZGYud29ya2dyb3VwLkdsb2JhbFZhcnMuaW5mb0RhdGE7XG4gICAgICAgIGlmIChqc29uX2RhdGEucHJlc2V0ICE9IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAganNvbl9kYXRhLnByZXNldC5qc29uX3VybCAhPSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIGpzb25fZGF0YS5wcmVzZXQuanNvbl91cmwuY2hlY2tpbiAhPSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgX2Zvcm0uYWN0aW9uID0ganNvbl9kYXRhLnByZXNldC5qc29uX3VybC5jaGVja2luO1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhDTEFTU19OQU1FICsgXCIgYWN0aW9uKHNlcnZlcikgOiBcIiwgX2Zvcm0uYWN0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF9mb3JtLmFjdGlvbiA9IHdpbmRvdy5kZi53b3JrZ3JvdXAuUHJlc2V0Lmpzb25fdXJsLmNoZWNraW47XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKENMQVNTX05BTUUgKyBcIiBhY3Rpb24obG9jYWwpIDogXCIsIF9mb3JtLmFjdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoanNvbl9kYXRhLnByZXNldCAhPSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIGpzb25fZGF0YS5wcmVzZXQuanNvbl91cmwgIT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICBqc29uX2RhdGEucHJlc2V0Lmpzb25fdXJsLmNoZWNrb3V0ICE9IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICBfZm9ybV9vdXQuYWN0aW9uID0ganNvbl9kYXRhLnByZXNldC5qc29uX3VybC5jaGVja291dDtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coQ0xBU1NfTkFNRSArIFwiIGFjdGlvbihzZXJ2ZXIpIDogXCIsIF9mb3JtX291dC5hY3Rpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX2Zvcm1fb3V0LmFjdGlvbiA9IHdpbmRvdy5kZi53b3JrZ3JvdXAuUHJlc2V0Lmpzb25fdXJsLmNoZWNrb3V0O1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhDTEFTU19OQU1FICsgXCIgYWN0aW9uKGxvY2FsKSA6IFwiLCBfZm9ybV9vdXQuYWN0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9vbkNsaWNrX2J0bl9jaGVja291dCgkZXZ0KSB7XG4gICAgICAgICRldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgX3N1Ym1pdF9vdXRfcmUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfb25TdWJtaXQoJGV2dCkge1xuICAgICAgICAkZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIF9zdWJtaXQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfc3VibWl0KCkge1xuICAgICAgICBsb2FkaW5nKCk7XG4gICAgICAgIGFqYXhQb3N0KF9mb3JtLCBvbkNvbXBTdWJtaXQpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX29uU3VibWl0X291dCgkZXZ0KSB7XG4gICAgICAgICRldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgX3N1Ym1pdF9vdXQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfc3VibWl0X291dCgpIHtcbiAgICAgICAgbG9hZGluZ19vdXQoKTtcbiAgICAgICAgYWpheFBvc3QoX2Zvcm1fb3V0LCBvbkNvbXBTdWJtaXRfb3V0KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9zdWJtaXRfb3V0X3JlKCkge1xuICAgICAgICBfc3VibWl0X291dCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvYWRpbmcoKSB7XG5cbiAgICAgICAgdmFyIGxvYWRpbmcgPSBfYXJlYV9jaGVja2luLnF1ZXJ5U2VsZWN0b3IoJy51aS1sb2FkaW5nJyk7XG4gICAgICAgIGRmLmxhYi5VdGlsLmFkZENsYXNzKGxvYWRpbmcsIHdpbmRvdy5kZi53b3JrZ3JvdXAuUHJlc2V0LmNsYXNzX25hbWUuc2hvd0luKTtcblxuICAgICAgICBkaXNhYmxlX2lucHV0KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9hZGluZ19vdXQoKSB7XG5cbiAgICAgICAgdmFyIGxvYWRpbmcgPSBfYXJlYV9jaGVja291dC5xdWVyeVNlbGVjdG9yKCcudWktbG9hZGluZycpO1xuICAgICAgICBkZi5sYWIuVXRpbC5hZGRDbGFzcyhsb2FkaW5nLCB3aW5kb3cuZGYud29ya2dyb3VwLlByZXNldC5jbGFzc19uYW1lLnNob3dJbik7XG5cbiAgICAgICAgZGlzYWJsZV9pbnB1dF9vdXQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkaXNhYmxlX2lucHV0KCkge1xuXG4gICAgICAgIHZhciBpbnB1dHMgPSBfZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dCcpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlucHV0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaW5wdXRzW2ldLnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIFwiXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWJsZV9pbnB1dCgpIHtcbiAgICAgICAgdmFyIGlucHV0cyA9IF9mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0Jyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5wdXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpbnB1dHNbaV0ucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkaXNhYmxlX2lucHV0X291dCgpIHtcbiAgICAgICAgdmFyIGlucHV0cyA9IF9mb3JtX291dC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dCcpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlucHV0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaW5wdXRzW2ldLnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIFwiXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWJsZV9pbnB1dF9vdXQoKSB7XG4gICAgICAgIHZhciBpbnB1dHMgPSBfZm9ybV9vdXQucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQnKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnB1dHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlucHV0c1tpXS5yZW1vdmVBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uQ29tcFN1Ym1pdChyZXNwb25zZSkge1xuICAgICAgICB2YXIgbG9hZGluZyA9IF9hcmVhX2NoZWNraW4ucXVlcnlTZWxlY3RvcignLnVpLWxvYWRpbmcnKTtcbiAgICAgICAgZGYubGFiLlV0aWwucmVtb3ZlQ2xhc3MobG9hZGluZywgd2luZG93LmRmLndvcmtncm91cC5QcmVzZXQuY2xhc3NfbmFtZS5zaG93SW4pO1xuICAgICAgICBfZGlzcGF0Y2hPbkxvYWQocmVzcG9uc2UpO1xuXG4gICAgICAgIHZhciBzdGF0dXMgPSBnZXRTdGF0dXMocmVzcG9uc2UpO1xuXG4gICAgICAgIGlmIChzdGF0dXMuaXNXYXJuaW5nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInN0YXR1cy50ZXh0IDogXCIsIHN0YXR1cy50ZXh0KTtcbiAgICAgICAgICAgIF9kaXNwYXRjaE9uV2FybmluZyhzdGF0dXMudGV4dCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkNvbXBTdWJtaXRfb3V0KHJlc3BvbnNlKSB7XG4gICAgICAgIHZhciBsb2FkaW5nID0gX2FyZWFfY2hlY2tvdXQucXVlcnlTZWxlY3RvcignLnVpLWxvYWRpbmcnKTtcbiAgICAgICAgZGYubGFiLlV0aWwucmVtb3ZlQ2xhc3MobG9hZGluZywgd2luZG93LmRmLndvcmtncm91cC5QcmVzZXQuY2xhc3NfbmFtZS5zaG93SW4pO1xuICAgICAgICBfZGlzcGF0Y2hPbkxvYWRfb3V0KHJlc3BvbnNlKTtcblxuICAgICAgICB2YXIgc3RhdHVzID0gZ2V0U3RhdHVzKHJlc3BvbnNlKTtcblxuICAgICAgICBpZiAoc3RhdHVzLmlzV2FybmluZykge1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcInN0YXR1cy50ZXh0IDogXCIgLCBzdGF0dXMudGV4dCk7XG4gICAgICAgICAgICBfZGlzcGF0Y2hPbldhcm5pbmcoc3RhdHVzLnRleHQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U3RhdHVzKHJlc3BvbnNlKSB7XG5cbiAgICAgICAgdmFyIHN0YXR1cyA9IHtcbiAgICAgICAgICAgIGlzV2FybmluZzogZmFsc2UsXG4gICAgICAgICAgICB0ZXh0OiBcIu2RnOyLnO2VoCDrqZTshLjsp4DqsIAg7JeG7Iq164uI64ukLlwiXG4gICAgICAgIH07XG4gICAgICAgIHZhciBqc29uID0gSlNPTi5wYXJzZShyZXNwb25zZS50YXJnZXQucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgdmFyIHVzZXJfc3RhdHVzX2NvZGUgPSBqc29uLnVzZXIuc3RhdHVzO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICAvL3VzZXJfc3RhdHVzX2NvZGUudG9Mb3dlckNhc2UoKSA9PSAoXCJDMDBcIikudG9Mb3dlckNhc2UoKSB8fFxuICAgICAgICAgICAgdXNlcl9zdGF0dXNfY29kZS50b0xvd2VyQ2FzZSgpID09IChcIkwwMFwiKS50b0xvd2VyQ2FzZSgpIHx8XG5cbiAgICAgICAgICAgIHVzZXJfc3RhdHVzX2NvZGUudG9Mb3dlckNhc2UoKSA9PSAoXCJDMTBcIikudG9Mb3dlckNhc2UoKSB8fFxuXG4gICAgICAgICAgICB1c2VyX3N0YXR1c19jb2RlLnRvTG93ZXJDYXNlKCkgPT0gKFwiQzAxXCIpLnRvTG93ZXJDYXNlKCkgfHxcbiAgICAgICAgICAgIHVzZXJfc3RhdHVzX2NvZGUudG9Mb3dlckNhc2UoKSA9PSAoXCJDMDJcIikudG9Mb3dlckNhc2UoKSB8fFxuICAgICAgICAgICAgdXNlcl9zdGF0dXNfY29kZS50b0xvd2VyQ2FzZSgpID09IChcIkMwM1wiKS50b0xvd2VyQ2FzZSgpIHx8XG4gICAgICAgICAgICB1c2VyX3N0YXR1c19jb2RlLnRvTG93ZXJDYXNlKCkgPT0gKFwiQzA0XCIpLnRvTG93ZXJDYXNlKCkgfHxcbiAgICAgICAgICAgIHVzZXJfc3RhdHVzX2NvZGUudG9Mb3dlckNhc2UoKSA9PSAoXCJDMDVcIikudG9Mb3dlckNhc2UoKSB8fFxuXG4gICAgICAgICAgICB1c2VyX3N0YXR1c19jb2RlLnRvTG93ZXJDYXNlKCkgPT0gKFwiQzExXCIpLnRvTG93ZXJDYXNlKCkgfHxcbiAgICAgICAgICAgIHVzZXJfc3RhdHVzX2NvZGUudG9Mb3dlckNhc2UoKSA9PSAoXCJDMTJcIikudG9Mb3dlckNhc2UoKSB8fFxuICAgICAgICAgICAgdXNlcl9zdGF0dXNfY29kZS50b0xvd2VyQ2FzZSgpID09IChcIkMxM1wiKS50b0xvd2VyQ2FzZSgpIHx8XG4gICAgICAgICAgICB1c2VyX3N0YXR1c19jb2RlLnRvTG93ZXJDYXNlKCkgPT0gKFwiQzE0XCIpLnRvTG93ZXJDYXNlKCkgfHxcbiAgICAgICAgICAgIHVzZXJfc3RhdHVzX2NvZGUudG9Mb3dlckNhc2UoKSA9PSAoXCJDMTVcIikudG9Mb3dlckNhc2UoKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHZhciBsaXN0ID0ganNvbi5wcmVzZXQuc3RhdHVzX2xpc3Q7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgICAgICAgICAgICAgdmFyIGNvZGUgPSBpdGVtLmNvZGU7XG5cbiAgICAgICAgICAgICAgICBpZiAoY29kZS50b0xvd2VyQ2FzZSgpID09IHVzZXJfc3RhdHVzX2NvZGUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuaXNXYXJuaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLnRleHQgPSBpdGVtLnRleHQ7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhdHVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9kaXNwYXRjaE9uV2FybmluZyh0eHQpIHtcbiAgICAgICAgdmFyIGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KHdpbmRvdy5kZi53b3JrZ3JvdXAuUHJlc2V0LmV2ZW50VHlwZS5PTl9XQVJOSU5HLCB7XG4gICAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiB0eHRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9kaXNwYXRjaE9uTG9hZChyZXNwb25zZSkge1xuICAgICAgICB2YXIgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQod2luZG93LmRmLndvcmtncm91cC5QcmVzZXQuZXZlbnRUeXBlLk9OX0NIRUNLSU4sIHtcbiAgICAgICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlOiByZXNwb25zZVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX2Rpc3BhdGNoT25Mb2FkX291dChyZXNwb25zZSkge1xuICAgICAgICB2YXIgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQod2luZG93LmRmLndvcmtncm91cC5QcmVzZXQuZXZlbnRUeXBlLk9OX0NIRUNLT1VULCB7XG4gICAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgICAgICByZXNwb25zZTogcmVzcG9uc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9zaG93Q2hlY2tpbkJ0bigpIHtcblxuICAgICAgICBfc2V0SW5mbygpO1xuICAgICAgICBfc2V0VXJsKCk7XG5cbiAgICAgICAgZGYubGFiLlV0aWwuYWRkQ2xhc3MoX3dyYXBwZXIsIHdpbmRvdy5kZi53b3JrZ3JvdXAuUHJlc2V0LmNsYXNzX25hbWUuc2hvd0luKTtcbiAgICAgICAgYWJsZV9pbnB1dCgpO1xuICAgICAgICBkaXNhYmxlX2lucHV0X291dCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9zaG93Q2hlY2tvdXRCdG4oKSB7XG5cbiAgICAgICAgX3NldEluZm8oKTtcbiAgICAgICAgX3NldFVybCgpO1xuXG4gICAgICAgIGRmLmxhYi5VdGlsLmFkZENsYXNzKF93cmFwcGVyLCAnY2hlY2tlZCcpO1xuICAgICAgICBkaXNhYmxlX2lucHV0KCk7XG4gICAgICAgIGFibGVfaW5wdXRfb3V0KCk7XG4gICAgICAgIC8vX2NoZWNrQWJsZVRpbWUoKTtcbiAgICAgICAgLy9zZXRUaW1lb3V0KHNldFRpbWVCYXIsIDEwMDApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9zaG93Q2hlY2tvdXRUZXh0KCkge1xuXG4gICAgICAgIF9zZXRJbmZvKCk7XG4gICAgICAgIF9zZXRVcmwoKTtcblxuICAgICAgICBkZi5sYWIuVXRpbC5hZGRDbGFzcyhfd3JhcHBlciwgJ2NoZWNrZWRvdXQnKTtcbiAgICAgICAgZGlzYWJsZV9pbnB1dCgpO1xuICAgICAgICBkaXNhYmxlX2lucHV0X291dCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9oaWRlQ2hlY2tpbkJ0bigpIHtcbiAgICAgICAgX3Jlc2V0TGF5b3V0KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX3Jlc2V0TGF5b3V0KCkge1xuICAgICAgICBkZi5sYWIuVXRpbC5yZW1vdmVDbGFzcyhfd3JhcHBlciwgd2luZG93LmRmLndvcmtncm91cC5QcmVzZXQuY2xhc3NfbmFtZS5zaG93SW4pO1xuICAgICAgICBkZi5sYWIuVXRpbC5yZW1vdmVDbGFzcyhfd3JhcHBlciwgJ2NoZWNrZWQnKTtcbiAgICAgICAgZGYubGFiLlV0aWwucmVtb3ZlQ2xhc3MoX3dyYXBwZXIsICdjaGVja2Vkb3V0Jyk7XG5cbiAgICAgICAgZGlzYWJsZV9pbnB1dCgpO1xuICAgICAgICBkaXNhYmxlX2lucHV0X291dCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9jaGVja0FibGVUaW1lKGlzQWJsZSkge1xuICAgICAgICBpZiAoaXNBYmxlKSB7XG4gICAgICAgICAgICAvL1wiY2hlY2tvdXQtYWJsZVwiXG4gICAgICAgICAgICBkZi5sYWIuVXRpbC5hZGRDbGFzcyhfYXJlYV9jaGVja291dCwgXCJjaGVja291dC1hYmxlXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGYubGFiLlV0aWwucmVtb3ZlQ2xhc3MoX2FyZWFfY2hlY2tvdXQsIFwiY2hlY2tvdXQtYWJsZVwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFqYXhQb3N0KGZvcm0sIGNhbGxiYWNrKSB7XG4gICAgICAgIC8vIENvbGxlY3QgdGhlIGZvcm0gZGF0YSB3aGlsZSBpdGVyYXRpbmcgb3ZlciB0aGUgaW5wdXRzXG4gICAgICAgIHZhciBkYXRhID0ge307XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGZvcm0ubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICAgICAgdmFyIGlucHV0ID0gZm9ybVtpXTtcbiAgICAgICAgICAgIGlmIChpbnB1dC5uYW1lKSB7XG4gICAgICAgICAgICAgICAgZGF0YVtpbnB1dC5uYW1lXSA9IGlucHV0LnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgICAgIG1ldGhvZDogZm9ybS5tZXRob2QsXG4gICAgICAgICAgICBhY3Rpb246IGRmLndvcmtncm91cC5VdGlsLmFkZFBhcmFtVW5pcShmb3JtLmFjdGlvbilcbiAgICAgICAgfTtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gaWYoaXNUZXN0X3JlKSB7XG4gICAgICAgIC8vICAgICBwYXJhbXMuYWN0aW9uID0gXCJhc3NldHNfbG9naW4vdGVtcC9kZl9pbmZvX2RhdGFfMDNfY2hlY2tvdXRfcmUuanNvblwiO1xuICAgICAgICAvLyB9XG5cbiAgICAgICAgZGYud29ya2dyb3VwLlV0aWwubG9hZF9qc29uKHBhcmFtcy5hY3Rpb24sIHBhcmFtcy5tZXRob2QsIGNhbGxiYWNrLCBkYXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBpbml0OiBfaW5pdCxcbiAgICAgICAgc2hvd0NoZWNraW5CdG46IF9zaG93Q2hlY2tpbkJ0bixcbiAgICAgICAgc2hvd0NoZWNrb3V0QnRuOiBfc2hvd0NoZWNrb3V0QnRuLFxuICAgICAgICBzaG93Q2hlY2tvdXRUZXh0OiBfc2hvd0NoZWNrb3V0VGV4dCxcbiAgICAgICAgaGlkZUNoZWNraW5CdG46IF9oaWRlQ2hlY2tpbkJ0blxuICAgIH1cbn07XG4iLCJpbXBvcnQgTG9naW5DbG9jayBmcm9tICcuL2xvZ2luQ2xvY2snO1xuaW1wb3J0IExvZ2luRGF0ZSBmcm9tICcuL2xvZ2luRGF0ZSc7XG5pbXBvcnQgTG9naW5CZ0NvbnRyb2xsZXIgZnJvbSAnLi9sb2dpbkJnQ29udHJvbGxlcic7XG5pbXBvcnQgTG9naW5GaWVsZENvbnRyb2xsZXIgZnJvbSAnLi9sb2dpbkZpZWxkQ29udHJvbGxlcic7XG5pbXBvcnQgTG9nb3V0Q29udHJvbGxlciBmcm9tICcuL2xvZ291dENvbnRyb2xsZXInO1xuaW1wb3J0IENoZWNraW5Db250cm9sbGVyIGZyb20gJy4vY2hlY2tpbkNvbnRyb2xsZXInO1xuaW1wb3J0IFN0YXJ0U3RvcENvbnRyb2xsZXIgZnJvbSAnLi9zdGFydFN0b3BDb250cm9sbGVyJztcbmltcG9ydCBMb2dpbkluZm9Db250cm9sbGVyIGZyb20gJy4vbG9naW5JbmZvQ29udHJvbGxlcic7XG5pbXBvcnQgTG9naW5VdGlsQ29udHJvbGxlciBmcm9tICcuL2xvZ2luVXRpbENvbnRyb2xsZXInO1xuaW1wb3J0IE1vZGFsQ29udHJvbGxlciBmcm9tICcuL21vZGFsQ29udHJvbGxlcic7XG5cbndpbmRvdy5kZiA9IHdpbmRvdy5kZiB8fCB7fTtcbndpbmRvdy5kZi53b3JrZ3JvdXAgPSB3aW5kb3cuZGYud29ya2dyb3VwIHx8IHt9O1xuXG53aW5kb3cuZGYud29ya2dyb3VwLmxvZ2luID0gZnVuY3Rpb24gKGpzb25fZGF0YSkge1xuXG4gICAgdmFyIENMQVNTX05BTUUgPSBcIlsgbG9naW4gXVwiO1xuXG4gICAgdmFyIGNvbnRhaW5lcl9pZnJhbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImlkX2JnX2ZyYW1lXCIpO1xuICAgIHZhciBjb250YWluZXJfY2xvY2sgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImlkX2NvbnRhaW5lcl9jbG9ja1wiKTtcbiAgICB2YXIgY29udGFpbmVyX2RhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNlYy1kYXRlIC53cmFwcGVyLWRhdGVcIik7XG5cbiAgICB2YXIgX2pzb25fZGF0YSA9IGpzb25fZGF0YTtcbiAgICB2YXIgX29mZnNldFRpbWUgPSAwO1xuXG4gICAgdmFyIF9jbG9jayA9IG5ldyBMb2dpbkNsb2NrKGNvbnRhaW5lcl9jbG9jaywgX2pzb25fZGF0YSk7XG4gICAgdmFyIF9kYXRlSW5mbyA9IG5ldyBMb2dpbkRhdGUoY29udGFpbmVyX2RhdGUsIF9qc29uX2RhdGEpO1xuXG4gICAgdmFyIF9iZ0NvbnRyb2xsID0gbmV3IExvZ2luQmdDb250cm9sbGVyKGNvbnRhaW5lcl9pZnJhbWUsIF9qc29uX2RhdGEpO1xuXG4gICAgdmFyIF9sb2dpbkNvbnRyb2xsZXIgPSBuZXcgTG9naW5GaWVsZENvbnRyb2xsZXIoKTtcbiAgICB2YXIgX2xvZ291dENvbnRyb2xsZXIgPSBuZXcgTG9nb3V0Q29udHJvbGxlcigpO1xuICAgIHZhciBfY2hlY2tpbkNvbnRyb2xsZXIgPSBuZXcgQ2hlY2tpbkNvbnRyb2xsZXIoKTtcbiAgICB2YXIgX3N0YXJ0U3RvcENvbnRyb2xsZXIgPSBuZXcgU3RhcnRTdG9wQ29udHJvbGxlcigpO1xuICAgIHZhciBfbG9naW5JbmZvQ29udHJvbGxlciA9IG5ldyBMb2dpbkluZm9Db250cm9sbGVyKCk7XG5cbiAgICB2YXIgX2xvZ2luVXRpbENvbnRyb2xsZXIgPSBuZXcgTG9naW5VdGlsQ29udHJvbGxlcigpO1xuICAgIHZhciBfbW9kYWxDb250cm9sbGVyID0gbmV3IE1vZGFsQ29udHJvbGxlcigpO1xuXG4gICAgdmFyIF9zYXZlX0REID0gbnVsbDtcbiAgICB2YXIgX2lzQ2hhbmdlVG9Ub21vcm93ID0gZmFsc2U7XG5cbiAgICB2YXIgX2RhdGVfbm93O1xuICAgIHZhciBfSURfY2xvY2sgPSAwO1xuICAgIHZhciBfSURfcmVmcmVzaCA9IDA7XG5cbiAgICB2YXIgX3RpdGxlX29yaWdpbjtcblxuICAgIGZ1bmN0aW9uIF9pbml0KCkge1xuXG5cbiAgICAgICAgY29uc29sZS5sb2coXCJORVcgTkVXIE5FVyBORVcgTkVXIE5FVyBORVcgTkVXIE5FVyBORVcgTkVXIE5FVyBORVcgTkVXIE5FVyBORVcgTkVXXCIpO1xuXG4gICAgICAgIF90aXRsZV9vcmlnaW4gPSBkb2N1bWVudC50aXRsZTtcblxuICAgICAgICBfc2V0T2Zmc2V0VGltZSgpO1xuICAgICAgICBfc2V0Tm93KCk7XG5cbiAgICAgICAgX2JnQ29udHJvbGwuaW5pdCgpO1xuICAgICAgICBfY2xvY2suaW5pdChfZGF0ZV9ub3cpO1xuICAgICAgICBfZGF0ZUluZm8uaW5pdChfZGF0ZV9ub3cpO1xuXG4gICAgICAgIF9sb2dpbkNvbnRyb2xsZXIuaW5pdCgpO1xuICAgICAgICBfbG9nb3V0Q29udHJvbGxlci5pbml0KCk7XG4gICAgICAgIF9jaGVja2luQ29udHJvbGxlci5pbml0KCk7XG4gICAgICAgIF9zdGFydFN0b3BDb250cm9sbGVyLmluaXQoKTtcbiAgICAgICAgX2xvZ2luSW5mb0NvbnRyb2xsZXIuaW5pdChfanNvbl9kYXRhLmluZm8udG9kYXkubm90aWNlLCBfanNvbl9kYXRhLmluZm8uYmlydGhkYXkpO1xuXG4gICAgICAgIF9sb2dpblV0aWxDb250cm9sbGVyLmluaXQoX2pzb25fZGF0YS5wcmVzZXQuZG9jdW1lbnRfdXJsLCBfanNvbl9kYXRhLnByZXNldC5tYWluX3VybCwgX2pzb25fZGF0YS51c2VyKTtcblxuICAgICAgICBfbW9kYWxDb250cm9sbGVyLmluaXQoKTtcblxuICAgICAgICBzdGFydE1vdGlvbigpO1xuICAgICAgICBfc3RhcnRUaW1lcigpO1xuXG4gICAgICAgIGFkZEV2ZW50KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX3NldE9mZnNldFRpbWUoKSB7XG4gICAgICAgIGlmIChfanNvbl9kYXRhLmluZm8gIT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICBfanNvbl9kYXRhLmluZm8uZGF0ZSAhPSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIF9qc29uX2RhdGEuaW5mby5kYXRlLnNlcnZlcl90aW1lICE9IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICBfb2Zmc2V0VGltZSA9IF9qc29uX2RhdGEuaW5mby5kYXRlLnNlcnZlcl90aW1lIC0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKENMQVNTX05BTUUgKyBcIiBbc2VydmVyIHRpbWVdIDogXCIsIF9qc29uX2RhdGEuaW5mby5kYXRlLnNlcnZlcl90aW1lLCBcIiBbY2xpZW50IHRpbWVdIDogXCIsIG5ldyBEYXRlKCkuZ2V0VGltZSgpLCBcIiBbX29mZnNldFRpbWVdIDogXCIsIF9vZmZzZXRUaW1lKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZEV2ZW50KCkge1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHdpbmRvdy5kZi53b3JrZ3JvdXAuUHJlc2V0LmV2ZW50VHlwZS5PTl9MT0dJTiwgX29uTG9naW4pO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHdpbmRvdy5kZi53b3JrZ3JvdXAuUHJlc2V0LmV2ZW50VHlwZS5PTl9DSEVDS0lOLCBfb25DaGVja2luKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3cuZGYud29ya2dyb3VwLlByZXNldC5ldmVudFR5cGUuT05fQ0hFQ0tPVVQsIF9vbkNoZWNrb3V0KTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3cuZGYud29ya2dyb3VwLlByZXNldC5ldmVudFR5cGUuT05fU1RBUlQsIF9vblN0YXJ0KTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3cuZGYud29ya2dyb3VwLlByZXNldC5ldmVudFR5cGUuT05fU1RPUCwgX29uU3RvcCk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIod2luZG93LmRmLndvcmtncm91cC5QcmVzZXQuZXZlbnRUeXBlLk9OX0NIQU5HRV9TVEFHRV9JTkZPLCBfb25DaGFuZ2Vfc3RhZ2VfaW5mbyk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIod2luZG93LmRmLndvcmtncm91cC5QcmVzZXQuZXZlbnRUeXBlLk9OX0xPR09VVCwgX29uTG9nb3V0KTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3cuZGYud29ya2dyb3VwLlByZXNldC5ldmVudFR5cGUuT05fV0FSTklORywgX29uV2FybmluZyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX3Jlc2V0RGF0YShyZXNwb25zZSkge1xuXG4gICAgICAgIHZhciBhY3R1YWxfSlNPTiA9IEpTT04ucGFyc2UocmVzcG9uc2UudGFyZ2V0LnJlc3BvbnNlVGV4dCk7XG4gICAgICAgIGNvbnNvbGUubG9nKENMQVNTX05BTUUgKyBcIiA8PCBfcmVzZXREYXRhPj4gXCIsIGFjdHVhbF9KU09OKTtcbiAgICAgICAgd2luZG93LmRmLndvcmtncm91cC5HbG9iYWxWYXJzLmluZm9EYXRhID0gYWN0dWFsX0pTT047XG4gICAgICAgIF9qc29uX2RhdGEgPSB3aW5kb3cuZGYud29ya2dyb3VwLkdsb2JhbFZhcnMuaW5mb0RhdGE7XG5cbiAgICAgICAgX3NldE9mZnNldFRpbWUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfb25Mb2dpbihldnQpIHtcbiAgICAgICAgX3Jlc2V0RGF0YShldnQuZGV0YWlsLnJlc3BvbnNlKTtcbiAgICAgICAgX3VwZGF0ZVN0YXR1cygpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9vbkNoZWNraW4oZXZ0KSB7XG4gICAgICAgIF9yZXNldERhdGEoZXZ0LmRldGFpbC5yZXNwb25zZSk7XG4gICAgICAgIF91cGRhdGVTdGF0dXMoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfb25DaGVja291dChldnQpIHtcbiAgICAgICAgX3Jlc2V0RGF0YShldnQuZGV0YWlsLnJlc3BvbnNlKTtcbiAgICAgICAgX3VwZGF0ZVN0YXR1cygpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9vblN0YXJ0KGV2dCkge1xuICAgICAgICBfcmVzZXREYXRhKGV2dC5kZXRhaWwucmVzcG9uc2UpO1xuICAgICAgICBfdXBkYXRlU3RhdHVzKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX29uU3RvcChldnQpIHtcbiAgICAgICAgX3Jlc2V0RGF0YShldnQuZGV0YWlsLnJlc3BvbnNlKTtcbiAgICAgICAgX3VwZGF0ZVN0YXR1cygpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9vbkxvZ291dChldnQpIHtcbiAgICAgICAgX3Jlc2V0RGF0YShldnQuZGV0YWlsLnJlc3BvbnNlKTtcbiAgICAgICAgX3VwZGF0ZVN0YXR1cygpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9vbldhcm5pbmcoZXZ0KSB7XG4gICAgICAgIC8vY29uc29sZS5sb2coZXZ0LmRldGFpbC5tZXNzYWdlKTtcbiAgICAgICAgX21vZGFsQ29udHJvbGxlci5zaG93TW9kYWwoZXZ0LmRldGFpbC5tZXNzYWdlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfb25DaGFuZ2Vfc3RhZ2VfaW5mbyhldmVudCkge1xuICAgICAgICAvL2NvbnNvbGUubG9nKFwiX29uQ2hhbmdlX3N0YWdlX2luZm8gOiBzdGFnZV9pbmRleCAtIFwiLCBldmVudC5kZXRhaWwuY3VySW5kZXgpO1xuICAgIH1cblxuICAgIC8vIHNldCBsYXlvdXRcbiAgICBmdW5jdGlvbiBfc2V0TGF5b3V0X0xvZ291dCgpIHtcblxuICAgICAgICB2YXIgc2VjX3V0aWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2VjLXV0aWwnKTtcbiAgICAgICAgZGYubGFiLlV0aWwucmVtb3ZlQ2xhc3Moc2VjX3V0aWwsIHdpbmRvdy5kZi53b3JrZ3JvdXAuUHJlc2V0LmNsYXNzX25hbWUuc2hvd0luKTtcblxuICAgICAgICB2YXIgc2VjX2xvZ2luID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlYy1sb2dpbicpO1xuICAgICAgICBkZi5sYWIuVXRpbC5yZW1vdmVDbGFzcyhzZWNfbG9naW4sICdsb2dnZWQnKTtcblxuICAgICAgICBfbG9nb3V0Q29udHJvbGxlci5oaWRlTG9nb3V0QnRuKCk7XG4gICAgICAgIF9jaGVja2luQ29udHJvbGxlci5oaWRlQ2hlY2tpbkJ0bigpO1xuICAgICAgICBfc3RhcnRTdG9wQ29udHJvbGxlci5oaWRlU3RhcnRCdG4oKTtcbiAgICAgICAgX2xvZ2luQ29udHJvbGxlci5zaG93TG9naW5Gcm9tKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX3NldExheW91dF9Mb2dpbigpIHtcbiAgICAgICAgX2xvZ2luQ29udHJvbGxlci5oaWRlTG9naW5Gcm9tKCk7XG5cbiAgICAgICAgX2xvZ291dENvbnRyb2xsZXIuc2hvd0xvZ291dEJ0bigpO1xuICAgICAgICAvL19jaGVja2luQ29udHJvbGxlci5zaG93Q2hlY2tpbkJ0bigpO1xuICAgICAgICBfc3RhcnRTdG9wQ29udHJvbGxlci5zaG93U3RhcnRCdG4oKTtcblxuICAgICAgICB2YXIgc2VjX3V0aWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2VjLXV0aWwnKTtcbiAgICAgICAgZGYubGFiLlV0aWwuYWRkQ2xhc3Moc2VjX3V0aWwsIHdpbmRvdy5kZi53b3JrZ3JvdXAuUHJlc2V0LmNsYXNzX25hbWUuc2hvd0luKTtcblxuICAgICAgICBfbG9naW5JbmZvQ29udHJvbGxlci5zaG93Tm90aWNlKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX3NldExheW91dF9DaGVja2luKCkge1xuICAgICAgICBfY2hlY2tpbkNvbnRyb2xsZXIuc2hvd0NoZWNrb3V0QnRuKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX3NldExheW91dF9DaGVja291dCgpIHtcbiAgICAgICAgX2NoZWNraW5Db250cm9sbGVyLnNob3dDaGVja291dFRleHQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfc2V0TGF5b3V0X3N0YXJ0ZWQoKSB7XG4gICAgICAgIF9zdGFydFN0b3BDb250cm9sbGVyLnNob3dTdG9wQnRuKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX3NldExheW91dF9zdG9wKCkge1xuICAgICAgICBfc3RhcnRTdG9wQ29udHJvbGxlci5oaWRlU3RvcEJ0bigpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0YXJ0TW90aW9uKCkge1xuXG4gICAgICAgIF91cGRhdGVTdGF0dXMoKTtcblxuICAgICAgICB2YXIgY29uX2hlYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWRlcicpO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGRmLmxhYi5VdGlsLmFkZENsYXNzKGNvbl9oZWFkZXIsIHdpbmRvdy5kZi53b3JrZ3JvdXAuUHJlc2V0LmNsYXNzX25hbWUuc2hvd0luKTtcbiAgICAgICAgfSwgMTApO1xuXG4gICAgICAgIHZhciBjb25faW5mbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZWMtaW5mbycpO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGRmLmxhYi5VdGlsLmFkZENsYXNzKGNvbl9pbmZvLCB3aW5kb3cuZGYud29ya2dyb3VwLlByZXNldC5jbGFzc19uYW1lLnNob3dJbik7XG4gICAgICAgIH0sIDApO1xuXG4gICAgICAgIHZhciBjb25fbG9naW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2VjLWxvZ2luJyk7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZGYubGFiLlV0aWwuYWRkQ2xhc3MoY29uX2xvZ2luLCB3aW5kb3cuZGYud29ya2dyb3VwLlByZXNldC5jbGFzc19uYW1lLnNob3dJbik7XG4gICAgICAgIH0sIDEwKTtcblxuICAgICAgICB2YXIgY29uX2Zvb3RlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Zvb3RlcicpO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGRmLmxhYi5VdGlsLmFkZENsYXNzKGNvbl9mb290ZXIsIHdpbmRvdy5kZi53b3JrZ3JvdXAuUHJlc2V0LmNsYXNzX25hbWUuc2hvd0luKTtcbiAgICAgICAgfSwgMTUwMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX3VwZGF0ZVN0YXR1cygpIHtcblxuICAgICAgICB2YXIgcGFyYW1zID0gd2luZG93LmRmLndvcmtncm91cC5HbG9iYWxWYXJzLnBhcmFtczsgLy8gYnJvd3NlciBwYXJhbXNcblxuICAgICAgICBjb25zb2xlLmxvZyhDTEFTU19OQU1FLCBcIiB1c2VyIDogaXNMb2dnZWRJbiAtIFwiLCBfanNvbl9kYXRhLnVzZXIuaXNMb2dnZWRJbiwgXCIgLyBpc0NoZWNraW4gLSBcIiwgX2pzb25fZGF0YS51c2VyLmlzQ2hlY2tpbiwgXCIgLyBpc0NoZWNrb3V0XCIsIF9qc29uX2RhdGEudXNlci5pc0NoZWNrb3V0KTtcblxuICAgICAgICBfcmVzZXRDaGFuZ2VEYXRlQ2hlY2soKTtcblxuICAgICAgICB2YXIgZWxfaHRtbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2h0bWwnKTtcbiAgICAgICAgdmFyIGlzRGVza3RvcCA9IHdpbmRvdy5kZi5sYWIuVXRpbC5oYXNDbGFzcyhlbF9odG1sLCAnZGVza3RvcCcpO1xuXG4gICAgICAgIC8vIHJlZGlyZWN0XG4gICAgICAgIGlmKF9qc29uX2RhdGEudXNlci5pc0xvZ2dlZEluICYmIHBhcmFtcy5yZXRVcmwgIT0gdW5kZWZpbmVkICYmIHBhcmFtcy5yZXRVcmwgIT1cIlwiICYmIHBhcmFtcy5yZXRVcmwubGVuZ3RoID4gMCl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBnbyByZWRpcmVjdCA6IFwiLCBwYXJhbXMucmV0VXJsWzBdKTtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhcmFtcy5yZXRVcmxbMF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF9qc29uX2RhdGEudXNlci5pc0xvZ2dlZEluKSB7XG5cbiAgICAgICAgICAgIGlmIChpc0Rlc2t0b3AgJiYgRGV0ZWN0aXpyLmRldmljZS50eXBlID09IFwiZGVza3RvcFwiKSB7XG4gICAgICAgICAgICAgICAgLy9yZWRpcmVjdFRvTWFpbigpO1xuICAgICAgICAgICAgICAgIC8vcmV0dXJuO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGpzb25fZGF0YS51c2VyLmlzQWRtaW5BY2NvdW50KSB7XG4gICAgICAgICAgICAgICAgLy9yZWRpcmVjdFRvTWFpbigpO1xuICAgICAgICAgICAgICAgIC8vcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZWxzZSAtXG5cbiAgICAgICAgX3Jlc2V0QnJvd3NlclRpdGxlKCk7XG5cbiAgICAgICAgaWYgKHBhcmFtcy50ZXN0ID09IFwidHJ1ZVwiKSB7XG4gICAgICAgICAgICBfbG9naW5JbmZvQ29udHJvbGxlci5yZXNldERhdGEoX2pzb25fZGF0YS5pbmZvLnRlc3Qubm90aWNlLCBfanNvbl9kYXRhLmluZm8uYmlydGhkYXkpO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIF9sb2dpbkluZm9Db250cm9sbGVyLnJlc2V0RGF0YShfanNvbl9kYXRhLmluZm8udG9kYXkubm90aWNlLCBfanNvbl9kYXRhLmluZm8uYmlydGhkYXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgX2xvZ2luVXRpbENvbnRyb2xsZXIucmVzZXREYXRhKF9qc29uX2RhdGEudXNlcik7XG5cbiAgICAgICAgdmFyIHNlY19sb2dpbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZWMtbG9naW4nKTtcblxuICAgICAgICBpZiAoX2pzb25fZGF0YS51c2VyLmlzTG9nZ2VkSW4pIHtcblxuICAgICAgICAgICAgZGYubGFiLlV0aWwuYWRkQ2xhc3Moc2VjX2xvZ2luLCAnbG9nZ2VkJyk7XG5cbiAgICAgICAgICAgIF9zZXRMYXlvdXRfTG9naW4oKTtcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBpZiAoX2pzb25fZGF0YS51c2VyLmlzQ2hlY2tpbikge1xuICAgICAgICAgICAgLy8gICAgIF9zZXRMYXlvdXRfQ2hlY2tpbigpO1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vICAgICBpZiAoX2pzb25fZGF0YS51c2VyLmlzQ2hlY2tvdXQpIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgX3NldExheW91dF9DaGVja291dCgpO1xuICAgICAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAgIC8vIH1cblxuICAgICAgICAgICAgaWYgKF9qc29uX2RhdGEudXNlci53b3JrSW5mby5pc1dvcmtpbmcpIHtcbiAgICAgICAgICAgICAgICBfc2V0TGF5b3V0X3N0YXJ0ZWQoKTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIF9zZXRMYXlvdXRfc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGYubGFiLlV0aWwucmVtb3ZlQ2xhc3Moc2VjX2xvZ2luLCAnbG9nZ2VkJyk7XG4gICAgICAgICAgICBfc2V0TGF5b3V0X0xvZ291dCgpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWRpcmVjdFRvTWFpbigpIHtcblxuICAgICAgICB2YXIgdXJsID0gXCJcIjtcbiAgICAgICAgaWYgKF9qc29uX2RhdGEucHJlc2V0ICE9IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgX2pzb25fZGF0YS5wcmVzZXQubWFpbl91cmwgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgIHVybCA9IF9qc29uX2RhdGEucHJlc2V0Lm1haW5fdXJsO1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhDTEFTU19OQU1FICsgXCIgZ28gdG8gbWFpbiB1cmwgKGdldCBzZXJ2ZXIpIDogXCIsIHVybCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1cmwgPSB3aW5kb3cuZGYud29ya2dyb3VwLlByZXNldC5tYWluX3VybDtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coQ0xBU1NfTkFNRSArIFwiIGdvIHRvIG1haW4gdXJsIChnZXQgbG9jYWwpIDogXCIsIHVybCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coQ0xBU1NfTkFNRSArIFwiIGdvIHRvIG1haW4gdXJsIDogXCIsIHVybCk7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gZGVjb2RlVVJJQ29tcG9uZW50KHVybCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfcmVzZXRCcm93c2VyVGl0bGUoKSB7XG5cbiAgICAgICAgaWYgKF9qc29uX2RhdGEudXNlci5pc0xvZ2dlZEluKSB7XG4gICAgICAgICAgICAvL2RvY3VtZW50LnRpdGxlID0gX2pzb25fZGF0YS51c2VyLm5hbWUgKyBcIiBcIiArIF9qc29uX2RhdGEudXNlci5wb3NpdGlvbitcIuuLmC5cIjtcbiAgICAgICAgICAgIGRvY3VtZW50LnRpdGxlID0gX3RpdGxlX29yaWdpbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRvY3VtZW50LnRpdGxlID0gX3RpdGxlX29yaWdpbjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9zdGFydFRpbWVyKCkge1xuICAgICAgICBfdXBkYXRlVGltZXIoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfdXBkYXRlVGltZXIoKSB7XG4gICAgICAgIF9zZXRUaW1lcigpO1xuICAgICAgICBfY2xvY2sudXBkYXRlVG9kYXkoX2RhdGVfbm93KTtcbiAgICAgICAgX2RhdGVJbmZvLnVwZGF0ZVRvZGF5KF9kYXRlX25vdyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX3NldE5vdygpe1xuICAgICAgICBfZGF0ZV9ub3cgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBfZGF0ZV9ub3cuc2V0VGltZShfZGF0ZV9ub3cuZ2V0VGltZSgpICsgX29mZnNldFRpbWUpO1xuICAgICAgICB3aW5kb3cuZGYud29ya2dyb3VwLkdsb2JhbFZhcnMudGltZV9ub3cgPSBfZGF0ZV9ub3cuZ2V0VGltZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9zZXRUaW1lcigpIHtcbiAgICAgICAgX3NldE5vdygpO1xuICAgICAgICBpZiAoX2lzQ2hhbmdlVG9Ub21vcm93ICE9IHRydWUgJiYgX3NhdmVfREQgIT0gX2RhdGVfbm93LmdldERhdGUoKSAmJiBfc2F2ZV9ERCAhPSBudWxsKSB7XG4gICAgICAgICAgICBfc3RhcnRDaGFuZ2VEYXRlQ2hlY2soKTtcbiAgICAgICAgfVxuICAgICAgICBfc2F2ZV9ERCA9IF9kYXRlX25vdy5nZXREYXRlKCk7XG4gICAgICAgIF9JRF9jbG9jayA9IHNldFRpbWVvdXQoX3VwZGF0ZVRpbWVyLCA1MDApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9zdGFydENoYW5nZURhdGVDaGVjaygpIHtcblxuICAgICAgICBjb25zb2xlLmxvZyhcIj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PiBDaGFuZ2UgRGF0ZSBcIik7XG5cbiAgICAgICAgX2lzQ2hhbmdlVG9Ub21vcm93ID0gdHJ1ZTtcblxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIG9uTW91c2VNb3ZlX2NoYW5nZURhdGUpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIG9uTW91c2VNb3ZlX2NoYW5nZURhdGUpO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCBvbk1vdXNlTW92ZV9jaGFuZ2VEYXRlKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgb25Nb3VzZU1vdmVfY2hhbmdlRGF0ZSk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgb25Nb3VzZU1vdmVfY2hhbmdlRGF0ZSk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgb25Nb3VzZU1vdmVfY2hhbmdlRGF0ZSk7XG5cbiAgICAgICAgX2RlbGF5QXV0b1JlZnJlc2goKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfZGVsYXlBdXRvUmVmcmVzaCgpIHtcblxuICAgICAgICB2YXIgREVMQVlfVElNRSA9IDEwMDAwO1xuICAgICAgICBjb25zb2xlLmxvZyhcIj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4gX2RlbGF5QXV0b1JlZnJlc2ggOiBcIiwgREVMQVlfVElNRSk7XG5cbiAgICAgICAgY2xlYXJUaW1lb3V0KF9JRF9yZWZyZXNoKTtcbiAgICAgICAgX0lEX3JlZnJlc2ggPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiX1JlZnJlc2hcIik7XG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkICh0cnVlKTtcbiAgICAgICAgfSwgREVMQVlfVElNRSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX3Jlc2V0Q2hhbmdlRGF0ZUNoZWNrKCkge1xuXG4gICAgICAgIGlmIChfaXNDaGFuZ2VUb1RvbW9yb3cpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PiBfcmVzZXRDaGFuZ2VEYXRlQ2hlY2tcIik7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoX0lEX3JlZnJlc2gpO1xuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBvbk1vdXNlTW92ZV9jaGFuZ2VEYXRlKTtcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIG9uTW91c2VNb3ZlX2NoYW5nZURhdGUpO1xuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCBvbk1vdXNlTW92ZV9jaGFuZ2VEYXRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9pc0NoYW5nZVRvVG9tb3JvdyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uTW91c2VNb3ZlX2NoYW5nZURhdGUoZXZ0KSB7XG4gICAgICAgIF9kZWxheUF1dG9SZWZyZXNoKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5pdDogX2luaXRcbiAgICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY29uX2lmcmFtZSwganNvbl9kYXRhKSB7XHJcblxyXG4gICAgdmFyIENMQVNTX05BTUUgPSBcIlsgTG9naW5CZ0NvbnRyb2xsZXIgXVwiO1xyXG5cclxuICAgIHZhciBjb25faWZyYW1lID0gY29uX2lmcmFtZTtcclxuICAgIHZhciBhcnJfYmdfbGlzdCA9IFtdO1xyXG4gICAgdmFyIGRpbTtcclxuXHJcbiAgICBmdW5jdGlvbiBpbml0KCkge1xyXG5cclxuICAgICAgICBzZXRBcnJfYmdMaXN0KGpzb25fZGF0YSk7XHJcblxyXG4gICAgICAgIGlmIChjb25faWZyYW1lKSB7XHJcbiAgICAgICAgICAgIGRpbSA9IGNvbl9pZnJhbWUucXVlcnlTZWxlY3RvcignLmRpbScpO1xyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiWyBsb2FkQmdDb250cm9sbGVyLmpzIF0gOiBpbml0IC0gZGltIDogXCIsIGRpbSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL2NvbnNvbGUubG9nKFwiWyBsb2FkQmdDb250cm9sbGVyLmpzIF0gOiBpbml0IC0gaWZyYW1lIDogXCIsIGNvbl9pZnJhbWUpO1xyXG4gICAgICAgIC8vY29uc29sZS5sb2coXCJbIGxvYWRCZ0NvbnRyb2xsZXIuanMgXSA6IGluaXQgLSBqc29uX2RhdGEgOiBcIiwganNvbl9kYXRhKTtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKFwiWyBsb2FkQmdDb250cm9sbGVyLmpzIF0gOiBhcnJfYmdfbGlzdDogXCIsIGFycl9iZ19saXN0KTtcclxuXHJcbiAgICAgICAgaWYgKGFycl9iZ19saXN0Lmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgICAgICAgIHZhciByYW5faW5kZXggPSBNYXRoLmZsb29yKGFycl9iZ19saXN0Lmxlbmd0aCAqIE1hdGgucmFuZG9tKCkpO1xyXG4gICAgICAgICAgICB2YXIgdXJsID0gYXJyX2JnX2xpc3RbcmFuX2luZGV4XS51cmw7XHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhDTEFTU19OQU1FICsgXCIgOiBcIiwgXCJpZnJhbWUgdXJsIDogXCIsIHJhbl9pbmRleCwgXCIgLyBcIiwgdXJsKTtcclxuXHJcbiAgICAgICAgICAgIHNldF9pZnJhbWUodXJsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc2V0QXJyX2JnTGlzdChqc29uKSB7XHJcblxyXG4gICAgICAgIHZhciBwYXJhbXMgPSB3aW5kb3cuZGYud29ya2dyb3VwLkdsb2JhbFZhcnMucGFyYW1zOyAvLyBicm93c2VyIHBhcmFtc1xyXG5cclxuICAgICAgICBpZiAoanNvbl9kYXRhKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIganNvbl90ZXN0X2JnID0ganNvbi5pbmZvLnRlc3QuYmdfY29udGVudHM7XHJcbiAgICAgICAgICAgIHZhciBqc29uX3RvZGF5X2JnID0ganNvbi5pbmZvLnRvZGF5LmJnX2NvbnRlbnRzO1xyXG4gICAgICAgICAgICB2YXIganNvbl9iaXJ0aGRheSA9IGpzb24uaW5mby5iaXJ0aGRheTtcclxuXHJcbiAgICAgICAgICAgIGlmIChqc29uX3Rlc3RfYmcgIT0gdW5kZWZpbmVkICYmIGpzb25fdGVzdF9iZyAhPSBudWxsICYmIGpzb25fdGVzdF9iZy5sZW5ndGggPiAwICYmIHBhcmFtcy50ZXN0ID09IFwidHJ1ZVwiKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhDTEFTU19OQU1FICsgXCIgOiBcIiwgXCJ0eXBlIDogXCIsIFwidGVzdCBiZ1wiKTtcclxuICAgICAgICAgICAgICAgIGFycl9iZ19saXN0ID0gYXJyX2JnX2xpc3QuY29uY2F0KGpzb25fdGVzdF9iZyk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGpzb25fdG9kYXlfYmcgIT0gdW5kZWZpbmVkICYmIGpzb25fdG9kYXlfYmcgIT0gbnVsbCAmJiBqc29uX3RvZGF5X2JnLmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhDTEFTU19OQU1FICsgXCIgOiBcIiwgXCJ0eXBlIDogXCIsIFwiY3VzdG9tIGJnXCIpO1xyXG4gICAgICAgICAgICAgICAgYXJyX2JnX2xpc3QgPSBhcnJfYmdfbGlzdC5jb25jYXQoanNvbl90b2RheV9iZyk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGpzb25fYmlydGhkYXkgIT0gdW5kZWZpbmVkICYmIGpzb25fYmlydGhkYXkgIT0gbnVsbCAmJiBqc29uX2JpcnRoZGF5Lmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhDTEFTU19OQU1FICsgXCIgOiBcIiwgXCJ0eXBlIDogXCIsIFwiQmlydGhkYXkgYmdcIik7XHJcbiAgICAgICAgICAgICAgICBhcnJfYmdfbGlzdCA9IGFycl9iZ19saXN0LmNvbmNhdChqc29uLnByZXNldC5iZ19jb250ZW50cy5iaXJ0aGRheS5saXN0KTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coQ0xBU1NfTkFNRSArIFwiIDogXCIsIFwidHlwZSA6IFwiLCBcInJhbmRvbSBiZ1wiKTtcclxuICAgICAgICAgICAgICAgIC8vIGFycl9iZ19saXN0ID0gYXJyX2JnX2xpc3QuY29uY2F0KGpzb24ucHJlc2V0LmJnX2NvbnRlbnRzLndlYXRoZXIubGlzdCk7XHJcbiAgICAgICAgICAgICAgICAvLyBhcnJfYmdfbGlzdCA9IGFycl9iZ19saXN0LmNvbmNhdChqc29uLnByZXNldC5iZ19jb250ZW50cy5hcnR3b3JrLmxpc3QpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciByYW5kb21fYXJyO1xyXG4gICAgICAgICAgICAgICAgcmFuZG9tX2FyciA9IGpzb24ucHJlc2V0LmJnX2NvbnRlbnRzLndlYXRoZXIubGlzdC5maWx0ZXIoZ2V0UmFuZG9tU2hvd0Fycik7XHJcbiAgICAgICAgICAgICAgICBhcnJfYmdfbGlzdCA9IGFycl9iZ19saXN0LmNvbmNhdChyYW5kb21fYXJyKTtcclxuICAgICAgICAgICAgICAgIHJhbmRvbV9hcnIgPSBqc29uLnByZXNldC5iZ19jb250ZW50cy5iaXJ0aGRheS5saXN0LmZpbHRlcihnZXRSYW5kb21TaG93QXJyKTtcclxuICAgICAgICAgICAgICAgIGFycl9iZ19saXN0ID0gYXJyX2JnX2xpc3QuY29uY2F0KHJhbmRvbV9hcnIpO1xyXG4gICAgICAgICAgICAgICAgcmFuZG9tX2FyciA9IGpzb24ucHJlc2V0LmJnX2NvbnRlbnRzLmFydHdvcmsubGlzdC5maWx0ZXIoZ2V0UmFuZG9tU2hvd0Fycik7XHJcbiAgICAgICAgICAgICAgICBhcnJfYmdfbGlzdCA9IGFycl9iZ19saXN0LmNvbmNhdChyYW5kb21fYXJyKTtcclxuICAgICAgICAgICAgICAgIHJhbmRvbV9hcnIgPSBqc29uLnByZXNldC5iZ19jb250ZW50cy5jdXN0b20ubGlzdC5maWx0ZXIoZ2V0UmFuZG9tU2hvd0Fycik7XHJcbiAgICAgICAgICAgICAgICBhcnJfYmdfbGlzdCA9IGFycl9iZ19saXN0LmNvbmNhdChyYW5kb21fYXJyKTtcclxuICAgICAgICAgICAgICAgIHJhbmRvbV9hcnIgPSBqc29uLnByZXNldC5iZ19jb250ZW50cy5jdXN0b21faW1hZ2Vfc2xpZGUubGlzdC5maWx0ZXIoZ2V0UmFuZG9tU2hvd0Fycik7XHJcbiAgICAgICAgICAgICAgICBhcnJfYmdfbGlzdCA9IGFycl9iZ19saXN0LmNvbmNhdChyYW5kb21fYXJyKTtcclxuICAgICAgICAgICAgICAgIHJhbmRvbV9hcnIgPSBqc29uLnByZXNldC5iZ19jb250ZW50cy5jdXN0b21fdmlkZW9fcGxheWVyLmxpc3QuZmlsdGVyKGdldFJhbmRvbVNob3dBcnIpO1xyXG4gICAgICAgICAgICAgICAgYXJyX2JnX2xpc3QgPSBhcnJfYmdfbGlzdC5jb25jYXQocmFuZG9tX2Fycik7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhDTEFTU19OQU1FICsgXCIgOiBcIiwgXCJhcnJfYmdfbGlzdCA6IFwiLCBhcnJfYmdfbGlzdCk7XHJcblxyXG4gICAgICAgICAgICAvL2Fycl9iZ19saXN0ID0gYXJyX2JnX2xpc3QuY29uY2F0KGpzb24ucHJlc2V0LmJnX2NvbnRlbnRzLndlYXRoZXIubGlzdCk7XHJcbiAgICAgICAgICAgIC8vYXJyX2JnX2xpc3QgPSBhcnJfYmdfbGlzdC5jb25jYXQoanNvbi5wcmVzZXQuYmdfY29udGVudHMuYmlydGhkYXkubGlzdCk7XHJcbiAgICAgICAgICAgIC8vYXJyX2JnX2xpc3QgPSBhcnJfYmdfbGlzdC5jb25jYXQoanNvbi5wcmVzZXQuYmdfY29udGVudHMuYXJ0d29yay5saXN0KTtcclxuICAgICAgICAgICAgLy9hcnJfYmdfbGlzdCA9IGFycl9iZ19saXN0LmNvbmNhdChqc29uLnByZXNldC5iZ19jb250ZW50cy5jdXN0b20ubGlzdCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldFJhbmRvbVNob3dBcnIoaXRlbSwgaW5kZXgsIGFycmF5KSB7XHJcbiAgICAgICAgcmV0dXJuIGl0ZW0ucmFuZG9tX3Nob3cgPT0gdHJ1ZSB8fCBpdGVtLnJhbmRvbV9zaG93ID09IFwidHJ1ZVwiO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNldF9pZnJhbWUodXJsKSB7XHJcblxyXG4gICAgICAgIGlmIChjb25faWZyYW1lKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgaWZybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIik7XHJcbiAgICAgICAgICAgIGlmcm0uc2V0QXR0cmlidXRlKFwic3JjXCIsIHVybCk7XHJcbiAgICAgICAgICAgIGlmcm0uc2V0QXR0cmlidXRlKFwibmFtZVwiLCBcImlmcmFtZS1iZ1wiKTtcclxuICAgICAgICAgICAgY29uX2lmcmFtZS5hcHBlbmRDaGlsZChpZnJtKTtcclxuXHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRpbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRmLmxhYi5VdGlsLmFkZENsYXNzKGRpbSwgd2luZG93LmRmLndvcmtncm91cC5QcmVzZXQuY2xhc3NfbmFtZS5zaG93SW4pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCAyMDAwKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGluaXQ6IGluaXRcclxuICAgIH1cclxuXHJcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY29uLCBqc29uX2RhdGEpIHtcblxuICAgIHZhciBDTEFTU19OQU1FID0gXCJbIExvZ2luQ2xvY2sgXVwiO1xuXG4gICAgdmFyIF9jb24gPSBjb247XG5cbiAgICB2YXIgX2RlZl9vcHRzID0ge1xuICAgICAgICBvYmplY3ROYW1lOiBcIkNvbmVjdGVkTGluZXNfXCIgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKSxcbiAgICAgICAgY29udGFpbmVyOiBkb2N1bWVudC5ib2R5LFxuICAgICAgICBzdGFnZVdpZHRoOiAxOTIwLFxuICAgICAgICBzdGFnZUhlaWdodDogMTA4MCxcbiAgICB9O1xuXG4gICAgdmFyIF9vcHRzID0ge307XG5cbiAgICB2YXIgX3ByZXNldCA9IHt9O1xuXG4gICAgdmFyIF92YXJzID0ge1xuICAgICAgICBjb3VudDogMCxcbiAgICAgICAgb1c6IDAsXG4gICAgICAgIG9IOiAwLFxuICAgICAgICBkYXRlX25vdzogbnVsbFxuICAgIH07XG5cbiAgICB2YXIgX3BpeGkgPSB7XG4gICAgICAgIHJlbmRlcjoge30sXG4gICAgICAgIGFwcDoge30sXG4gICAgICAgIG1haW5Db250YWluZXI6IHt9LFxuICAgICAgICBjbG9ja0NvbnRhaW5lcjoge30sXG4gICAgICAgIGNsb2NrR3JhcGhpYzoge1xuICAgICAgICAgICAgYmFyX2hoOiB7fSxcbiAgICAgICAgICAgIGJhcl9tbToge30sXG4gICAgICAgICAgICBiYXJfc3M6IHt9XG4gICAgICAgIH0sXG5cbiAgICAgICAgdHh0X2hoOiB7fSxcbiAgICAgICAgdHh0X21tOiB7fSxcbiAgICAgICAgdHh0X3NzOiB7fVxuICAgIH07XG5cbiAgICB2YXIgSURfdGltZW91dCA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiBpbml0KGRhdGUpIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhDTEFTU19OQU1FICsgXCIgY29udGFpbmVyIDogXCIsIF9jb24pO1xuICAgICAgICBfc2V0dGluZyh7XG4gICAgICAgICAgICBjb250YWluZXI6IF9jb24sXG4gICAgICAgICAgICBzdGFnZVdpZHRoOiBfY29uLm9mZnNldFdpZHRoLFxuICAgICAgICAgICAgc3RhZ2VIZWlnaHQ6IF9jb24ub2Zmc2V0SGVpZ2h0XG4gICAgICAgIH0pO1xuICAgICAgICBfdXBkYXRlVG9kYXkoZGF0ZSk7XG4gICAgICAgIF9hZGRFdmVudCgpO1xuICAgICAgICBfc3RhcnQoKTtcbiAgICB9XG5cbiAgICB2YXIgX3NldHRpbmcgPSBmdW5jdGlvbiAoYXJnKSB7XG5cbiAgICAgICAgX29wdHMgPSBkZi5sYWIuVXRpbC5jb21iaW5lX29iamVjdF92YWx1ZShhcmcsIF9kZWZfb3B0cyk7XG5cbiAgICAgICAgX3ZhcnMub1cgPSBfb3B0cy5zdGFnZVdpZHRoO1xuICAgICAgICBfdmFycy5vSCA9IF9vcHRzLnN0YWdlSGVpZ2h0O1xuXG4gICAgICAgIF9zZXRQaXhpKCk7XG5cbiAgICAgICAgX3BpeGkubWFpbkNvbnRhaW5lciA9IG5ldyBQSVhJLkNvbnRhaW5lcigpO1xuICAgICAgICBfcGl4aS5jbG9ja0NvbnRhaW5lciA9IG5ldyBQSVhJLkNvbnRhaW5lcigpO1xuICAgICAgICAvL19waXhpLmNsb2NrQ29udGFpbmVyLmFscGhhID0gMDtcblxuICAgICAgICBfcGl4aS5hcHAuc3RhZ2UuYWRkQ2hpbGQoX3BpeGkubWFpbkNvbnRhaW5lcik7XG5cbiAgICAgICAgX3BpeGkucmVuZGVyID0gbmV3IFBJWEkudGlja2VyLlRpY2tlcigpO1xuICAgICAgICBfcGl4aS5yZW5kZXIuYXV0b1N0YXJ0ID0gdHJ1ZTtcblxuICAgICAgICBfcGl4aS5jbG9ja0dyYXBoaWMuYmFyX2hoID0gbmV3IFBJWEkuR3JhcGhpY3MoKTtcbiAgICAgICAgX3BpeGkuY2xvY2tHcmFwaGljLmJhcl9tbSA9IG5ldyBQSVhJLkdyYXBoaWNzKCk7XG4gICAgICAgIF9waXhpLmNsb2NrR3JhcGhpYy5iYXJfc3MgPSBuZXcgUElYSS5HcmFwaGljcygpO1xuXG4gICAgICAgIF9waXhpLmNsb2NrQ29udGFpbmVyLnJvdGF0aW9uID0gTWF0aC5yYWRpYW5zKC0zNjApO1xuICAgICAgICBfcGl4aS5jbG9ja0dyYXBoaWMuYmFyX2hoLmFscGhhID0gMDtcbiAgICAgICAgX3BpeGkuY2xvY2tHcmFwaGljLmJhcl9tbS5hbHBoYSA9IDA7XG4gICAgICAgIF9waXhpLmNsb2NrR3JhcGhpYy5iYXJfc3MuYWxwaGEgPSAwO1xuXG4gICAgICAgIF9waXhpLmNsb2NrR3JhcGhpYy5iYXJfaGguc2NhbGUueCA9IDAuMTtcbiAgICAgICAgX3BpeGkuY2xvY2tHcmFwaGljLmJhcl9tbS5zY2FsZS54ID0gMC4xO1xuICAgICAgICBfcGl4aS5jbG9ja0dyYXBoaWMuYmFyX3NzLnNjYWxlLnggPSAwLjE7XG5cbiAgICAgICAgX3NldHRpbmdUeHQoKTtcblxuICAgICAgICBfcmVzZXRTaXplKF9vcHRzLnN0YWdlV2lkdGgsIF9vcHRzLnN0YWdlSGVpZ2h0KTtcblxuICAgICAgICBfb3B0cy5jb250YWluZXIuYXBwZW5kQ2hpbGQoX3BpeGkuYXBwLnZpZXcpO1xuICAgIH07XG5cbiAgICB2YXIgX2RyYXdCYXIgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIGNlbnRlcl94ID0gX29wdHMuc3RhZ2VXaWR0aCAvIDI7XG4gICAgICAgIHZhciBjZW50ZXJfeSA9IF9vcHRzLnN0YWdlSGVpZ2h0IC8gMjtcblxuICAgICAgICBfcGl4aS5jbG9ja0NvbnRhaW5lci54ID0gY2VudGVyX3g7XG4gICAgICAgIF9waXhpLmNsb2NrQ29udGFpbmVyLnkgPSBjZW50ZXJfeTtcblxuICAgICAgICB2YXIgaGFsZiA9IE1hdGgubWluKGNlbnRlcl94LCBjZW50ZXJfeSk7XG5cblxuICAgICAgICB2YXIgaGFsZl9zcyA9IGhhbGYgLSA1ODtcbiAgICAgICAgdmFyIGhhbGZfbW0gPSBoYWxmIC0gNTg7XG4gICAgICAgIHZhciBoYWxmX2hoID0gTWF0aC5yb3VuZChoYWxmX21tICogMC43NCk7XG5cbiAgICAgICAgX3BpeGkuY2xvY2tHcmFwaGljLmJhcl9oaC5jbGVhcigpO1xuICAgICAgICBfcGl4aS5jbG9ja0dyYXBoaWMuYmFyX2hoLmJlZ2luRmlsbCgweEZGRkZGRik7XG4gICAgICAgIF9waXhpLmNsb2NrR3JhcGhpYy5iYXJfaGguZHJhd1JvdW5kZWRSZWN0KC0zLCAtMywgaGFsZl9oaCArIDMsIDYsIDMpO1xuICAgICAgICBfcGl4aS5jbG9ja0dyYXBoaWMuYmFyX2hoLmVuZEZpbGwoKTtcblxuICAgICAgICBfcGl4aS5jbG9ja0dyYXBoaWMuYmFyX21tLmNsZWFyKCk7XG4gICAgICAgIF9waXhpLmNsb2NrR3JhcGhpYy5iYXJfbW0uYmVnaW5GaWxsKDB4RkZGRkZGKTtcbiAgICAgICAgX3BpeGkuY2xvY2tHcmFwaGljLmJhcl9tbS5kcmF3Um91bmRlZFJlY3QoLTMsIC0zLCBoYWxmX21tICsgMywgNiwgMyk7XG4gICAgICAgIF9waXhpLmNsb2NrR3JhcGhpYy5iYXJfbW0uZW5kRmlsbCgpO1xuXG4gICAgICAgIF9waXhpLmNsb2NrR3JhcGhpYy5iYXJfc3MuY2xlYXIoKTtcbiAgICAgICAgX3BpeGkuY2xvY2tHcmFwaGljLmJhcl9zcy5iZWdpbkZpbGwoMHhGRjAwMDApO1xuICAgICAgICBfcGl4aS5jbG9ja0dyYXBoaWMuYmFyX3NzLmRyYXdSb3VuZGVkUmVjdCgtMSwgLTEsIGhhbGZfc3MgKyAxLCAyLCAxKTtcbiAgICAgICAgX3BpeGkuY2xvY2tHcmFwaGljLmJhcl9zcy5lbmRGaWxsKCk7XG5cbiAgICB9O1xuXG4gICAgdmFyIF9hZGRFdmVudCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB3aW5kb3cub25yZXNpemUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGNoZWNrU2l6ZSgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwib3JpZW50YXRpb25jaGFuZ2VcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KElEX3RpbWVvdXQpO1xuICAgICAgICAgICAgSURfdGltZW91dCA9IHNldFRpbWVvdXQoY2hlY2tTaXplLCAxMDAwKTtcbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH07XG5cblxuICAgIGZ1bmN0aW9uIGNoZWNrU2l6ZSgpIHtcblxuICAgICAgICBpZiAoX3ZhcnMub1cgIT0gX29wdHMuY29udGFpbmVyLm9mZnNldFdpZHRoIHx8IF92YXJzLm9IICE9IF9vcHRzLmNvbnRhaW5lci5vZmZzZXRIZWlnaHQpIHtcbiAgICAgICAgICAgIF92YXJzLm9XID0gX29wdHMuY29udGFpbmVyLm9mZnNldFdpZHRoO1xuICAgICAgICAgICAgX3ZhcnMub0ggPSBfb3B0cy5jb250YWluZXIub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgX3Jlc2V0U2l6ZShfdmFycy5vVywgX3ZhcnMub0gpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIF9zZXR0aW5nVHh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3R5bGVfaGggPSBuZXcgUElYSS5UZXh0U3R5bGUoe1xuICAgICAgICAgICAgZm9udEZhbWlseTogJ05hbnVtU3F1YXJlUm91bmQnLFxuICAgICAgICAgICAgLy9mb250RmFtaWx5OiAnQXJpYWwnLFxuICAgICAgICAgICAgZm9udFNpemU6IDIwLFxuICAgICAgICAgICAgLy9mb250U3R5bGU6ICdpdGFsaWMnLFxuICAgICAgICAgICAgZm9udFdlaWdodDogJzcwMCcsXG4gICAgICAgICAgICBmaWxsOiBbJyNmZmZmZmYnXSxcbiAgICAgICAgICAgIC8vZmlsbDogWycjZmZmZmZmJywgJyMwMGZmOTknXSwgLy8gZ3JhZGllbnRcbiAgICAgICAgICAgIC8vc3Ryb2tlOiAnIzRhMTg1MCcsXG4gICAgICAgICAgICAvL3N0cm9rZVRoaWNrbmVzczogNSxcbiAgICAgICAgICAgIC8vIGRyb3BTaGFkb3c6IHRydWUsXG4gICAgICAgICAgICAvLyBkcm9wU2hhZG93Q29sb3I6ICcjMDAwMDAwJyxcbiAgICAgICAgICAgIC8vIGRyb3BTaGFkb3dCbHVyOiA0LFxuICAgICAgICAgICAgLy8gZHJvcFNoYWRvd0FuZ2xlOiBNYXRoLlBJIC8gNixcbiAgICAgICAgICAgIC8vIGRyb3BTaGFkb3dEaXN0YW5jZTogNixcbiAgICAgICAgICAgIC8vIHdvcmRXcmFwOiB0cnVlLFxuICAgICAgICAgICAgLy8gd29yZFdyYXBXaWR0aDogNDQwXG4gICAgICAgIH0pO1xuXG4gICAgICAgIF9waXhpLnR4dF9oaCA9IG5ldyBQSVhJLlRleHQoJzAwJywgc3R5bGVfaGgpO1xuXG4gICAgICAgIHZhciBzdHlsZV9tbSA9IG5ldyBQSVhJLlRleHRTdHlsZSh7XG4gICAgICAgICAgICBmb250RmFtaWx5OiAnTmFudW1TcXVhcmVSb3VuZCcsXG4gICAgICAgICAgICBmb250U2l6ZTogMTQsXG4gICAgICAgICAgICBmb250V2VpZ2h0OiAnNzAwJyxcbiAgICAgICAgICAgIGZpbGw6IFsnI2ZmZmZmZiddLFxuICAgICAgICB9KTtcblxuICAgICAgICBfcGl4aS50eHRfbW0gPSBuZXcgUElYSS5UZXh0KCcwMCcsIHN0eWxlX21tKTtcblxuICAgICAgICB2YXIgc3R5bGVfc3MgPSBuZXcgUElYSS5UZXh0U3R5bGUoe1xuICAgICAgICAgICAgZm9udEZhbWlseTogJ05hbnVtU3F1YXJlUm91bmQnLFxuICAgICAgICAgICAgZm9udFNpemU6IDE0LFxuICAgICAgICAgICAgZm9udFdlaWdodDogJzcwMCcsXG4gICAgICAgICAgICBmaWxsOiBbJyNmZjAwMDAnXSxcbiAgICAgICAgfSk7XG4gICAgICAgIF9waXhpLnR4dF9zcyA9IG5ldyBQSVhJLlRleHQoJzAwJywgc3R5bGVfc3MpO1xuXG4gICAgICAgIF9waXhpLnR4dF9oaC5hbHBoYSA9IDA7XG4gICAgICAgIF9waXhpLnR4dF9tbS5hbHBoYSA9IDA7XG4gICAgICAgIF9waXhpLnR4dF9zcy5hbHBoYSA9IDA7XG4gICAgfTtcblxuICAgIHZhciBfcmVzZXRTaXplID0gZnVuY3Rpb24gKHcsIGgpIHtcbiAgICAgICAgX29wdHMuc3RhZ2VXaWR0aCA9IHcgfHwgX29wdHMuc3RhZ2VXaWR0aDtcbiAgICAgICAgX29wdHMuc3RhZ2VIZWlnaHQgPSBoIHx8IF9vcHRzLnN0YWdlSGVpZ2h0O1xuXG4gICAgICAgIF9waXhpLmFwcC52aWV3LnN0eWxlLndpZHRoID0gX29wdHMuc3RhZ2VXaWR0aCArIFwicHhcIjtcbiAgICAgICAgX3BpeGkuYXBwLnZpZXcuc3R5bGUuaGVpZ2h0ID0gX29wdHMuc3RhZ2VIZWlnaHQgKyBcInB4XCI7XG5cbiAgICAgICAgX2RyYXdCYXIoKTtcblxuICAgICAgICBfcGl4aS5hcHAucmVuZGVyZXIucmVzaXplKF9vcHRzLnN0YWdlV2lkdGgsIF9vcHRzLnN0YWdlSGVpZ2h0KTsgICAvLyAqIFBJWEkuc2V0dGluZ3MuUkVTT0xVVElPTilcbiAgICB9O1xuXG4gICAgdmFyIF9zZXRQaXhpID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIC8vIOuEpOydtO2LsOu4jCDsnIjrj4TsmrAg7ZW07IOB64+E66W8IOq4sOuzuCDtlbTsg4Hrj4TroZwg7IKs7JqpXG4gICAgICAgIC8vIOugjOuNlOungSDtlaAg65WMIOqzoOuwgOuPhCDrlJTsiqTtlIzroIjsnbTrpbwg7KeA7JuQ7ZWp64uI64ukLlxuICAgICAgICBQSVhJLnNldHRpbmdzLlJFU09MVVRJT04gPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcblxuICAgICAgICAvLyDtgazquLDrpbwg7KGw7KCV7ZWgIOuVjCDrs7TqsITsnYQg7IKs7Jqp7ZWY7KeAIOyViuqzoCDthY3siqTsspjrpbwg7ZS97IWAIO2ZlO2VqeuLiOuLpC5cbiAgICAgICAgUElYSS5zZXR0aW5ncy5TQ0FMRV9NT0RFID0gUElYSS5TQ0FMRV9NT0RFUy5ORUFSRVNUO1xuXG4gICAgICAgIF9waXhpLmFwcCA9IG5ldyBQSVhJLkFwcGxpY2F0aW9uKFxuICAgICAgICAgICAgX29wdHMuc3RhZ2VXaWR0aCxcbiAgICAgICAgICAgIF9vcHRzLnN0YWdlSGVpZ2h0LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRyYW5zcGFyZW50OiB0cnVlLFxuICAgICAgICAgICAgICAgIGFudGlhbGlhczogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHZhciBfc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgX3BpeGkubWFpbkNvbnRhaW5lci5hZGRDaGlsZChfcGl4aS5jbG9ja0NvbnRhaW5lcik7XG4gICAgICAgIF9waXhpLmNsb2NrQ29udGFpbmVyLmFkZENoaWxkKF9waXhpLmNsb2NrR3JhcGhpYy5iYXJfc3MpO1xuICAgICAgICBfcGl4aS5jbG9ja0NvbnRhaW5lci5hZGRDaGlsZChfcGl4aS5jbG9ja0dyYXBoaWMuYmFyX21tKTtcbiAgICAgICAgX3BpeGkuY2xvY2tDb250YWluZXIuYWRkQ2hpbGQoX3BpeGkuY2xvY2tHcmFwaGljLmJhcl9oaCk7XG5cbiAgICAgICAgX3BpeGkubWFpbkNvbnRhaW5lci5hZGRDaGlsZChfcGl4aS50eHRfaGgpO1xuICAgICAgICBfcGl4aS5tYWluQ29udGFpbmVyLmFkZENoaWxkKF9waXhpLnR4dF9tbSk7XG4gICAgICAgIC8vX3BpeGkubWFpbkNvbnRhaW5lci5hZGRDaGlsZChfcGl4aS50eHRfc3MpO1xuXG4gICAgICAgIF9kcmF3Q2FudmFzKCk7XG5cbiAgICAgICAgdmFyIHN0YXJ0X2RlbGF5ID0gMDtcblxuICAgICAgICBUd2Vlbk1heC50byhfcGl4aS5jbG9ja0NvbnRhaW5lciwgNSwge3JvdGF0aW9uOiAwLCBlYXNlOiBFeHBvLmVhc2VPdXQsIGRlbGF5OiBzdGFydF9kZWxheSArIDB9KTtcbiAgICAgICAgVHdlZW5NYXgudG8oX3BpeGkuY2xvY2tHcmFwaGljLmJhcl9oaCwgMi4yLCB7YWxwaGE6IDEsIGVhc2U6IEV4cG8uZWFzZUluT3V0LCBkZWxheTogc3RhcnRfZGVsYXkgKyAwfSk7XG4gICAgICAgIFR3ZWVuTWF4LnRvKF9waXhpLmNsb2NrR3JhcGhpYy5iYXJfbW0sIDIuMiwge2FscGhhOiAxLCBlYXNlOiBFeHBvLmVhc2VJbk91dCwgZGVsYXk6IHN0YXJ0X2RlbGF5ICsgMC41fSk7XG4gICAgICAgIFR3ZWVuTWF4LnRvKF9waXhpLmNsb2NrR3JhcGhpYy5iYXJfc3MsIDIuMiwge2FscGhhOiAxLCBlYXNlOiBFeHBvLmVhc2VJbk91dCwgZGVsYXk6IHN0YXJ0X2RlbGF5ICsgMX0pO1xuXG4gICAgICAgIFR3ZWVuTWF4LnRvKF9waXhpLmNsb2NrR3JhcGhpYy5iYXJfaGguc2NhbGUsIDIuMiwge3g6IDEsIGVhc2U6IEV4cG8uZWFzZUluT3V0LCBkZWxheTogc3RhcnRfZGVsYXkgKyAwfSk7XG4gICAgICAgIFR3ZWVuTWF4LnRvKF9waXhpLmNsb2NrR3JhcGhpYy5iYXJfbW0uc2NhbGUsIDIuMiwge3g6IDEsIGVhc2U6IEV4cG8uZWFzZUluT3V0LCBkZWxheTogc3RhcnRfZGVsYXkgKyAwLjV9KTtcbiAgICAgICAgVHdlZW5NYXgudG8oX3BpeGkuY2xvY2tHcmFwaGljLmJhcl9zcy5zY2FsZSwgMi4yLCB7eDogMSwgZWFzZTogRXhwby5lYXNlSW5PdXQsIGRlbGF5OiBzdGFydF9kZWxheSArIDAuNX0pO1xuXG4gICAgICAgIFR3ZWVuTWF4LnRvKF9waXhpLnR4dF9oaCwgMS4yLCB7YWxwaGE6IDEsIGVhc2U6IEN1YmljLmVhc2VPdXQsIGRlbGF5OiBzdGFydF9kZWxheSArIDJ9KTtcbiAgICAgICAgVHdlZW5NYXgudG8oX3BpeGkudHh0X21tLCAxLjIsIHthbHBoYTogMSwgZWFzZTogQ3ViaWMuZWFzZU91dCwgZGVsYXk6IHN0YXJ0X2RlbGF5ICsgMi41fSk7XG4gICAgICAgIFR3ZWVuTWF4LnRvKF9waXhpLnR4dF9zcywgMS4yLCB7YWxwaGE6IDEsIGVhc2U6IEN1YmljLmVhc2VPdXQsIGRlbGF5OiBzdGFydF9kZWxheSArIDN9KTtcbiAgICB9O1xuXG4gICAgdmFyIF9kcmF3Q2FudmFzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfcGl4aS5yZW5kZXIuYWRkKGZ1bmN0aW9uIChkbGV0YSkge1xuICAgICAgICAgICAgX3VwZGF0ZVZhbHVlKCk7XG4gICAgICAgICAgICBfdXBkYXRlVGltZSgpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgdmFyIF91cGRhdGVWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3ZhcnMuY291bnQgPSBfdmFycy5jb3VudCArIDE7XG4gICAgfTtcblxuICAgIHZhciBfdXBkYXRlVGltZV90eHQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgLy8gdHh0XG4gICAgICAgIF9waXhpLnR4dF9oaC50ZXh0ID0gd2luZG93LmRmLndvcmtncm91cC5VdGlsLmdldERhdGVfZm9ybWF0KF92YXJzLmRhdGVfbm93LCBcImhcIik7XG4gICAgICAgIF9waXhpLnR4dF9tbS50ZXh0ID0gd2luZG93LmRmLndvcmtncm91cC5VdGlsLmdldERhdGVfZm9ybWF0KF92YXJzLmRhdGVfbm93LCBcIm1tXCIpO1xuICAgICAgICBfcGl4aS50eHRfc3MudGV4dCA9IHdpbmRvdy5kZi53b3JrZ3JvdXAuVXRpbC5nZXREYXRlX2Zvcm1hdChfdmFycy5kYXRlX25vdywgXCJzc1wiKTtcbiAgICB9O1xuXG4gICAgdmFyIF91cGRhdGVUaW1lID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIF91cGRhdGVUaW1lX3R4dCgpO1xuXG4gICAgICAgIHZhciBoaCA9IF92YXJzLmRhdGVfbm93LmdldEhvdXJzKCk7XG4gICAgICAgIHZhciBtbSA9IF92YXJzLmRhdGVfbm93LmdldE1pbnV0ZXMoKTtcbiAgICAgICAgdmFyIHNzID0gX3ZhcnMuZGF0ZV9ub3cuZ2V0U2Vjb25kcygpO1xuXG4gICAgICAgIHZhciBkZWdyZWVfcyA9IChzcyAvIDYwKSAqIDM2MDtcbiAgICAgICAgdmFyIGFuZ2xlX3NzID0gTWF0aC5yYWRpYW5zKChkZWdyZWVfcyAtIDkwKSAlIDM2MCk7XG5cbiAgICAgICAgdmFyIGRlZ3JlZV9tID0gKG1tIC8gNjApICogMzYwO1xuICAgICAgICB2YXIgYW5nbGVfbW0gPSBNYXRoLnJhZGlhbnMoKGRlZ3JlZV9tIC0gOTApICUgMzYwKTtcblxuICAgICAgICB2YXIgZGVncmVlX2ggPSAoKGhoICUgMTIpIC8gMTIpICogMzYwICsgKChtbSAvIDYwKSAqICgzNjAgLyAxMikpO1xuICAgICAgICB2YXIgYW5nbGVfaGggPSBNYXRoLnJhZGlhbnMoKGRlZ3JlZV9oIC0gOTApICUgMzYwKTtcblxuICAgICAgICBfcGl4aS5jbG9ja0dyYXBoaWMuYmFyX2hoLnJvdGF0aW9uID0gYW5nbGVfaGg7XG4gICAgICAgIF9waXhpLmNsb2NrR3JhcGhpYy5iYXJfbW0ucm90YXRpb24gPSBhbmdsZV9tbTtcbiAgICAgICAgX3BpeGkuY2xvY2tHcmFwaGljLmJhcl9zcy5yb3RhdGlvbiA9IGFuZ2xlX3NzO1xuXG4gICAgICAgIHZhciBjZW50ZXJfeCA9IF9vcHRzLnN0YWdlV2lkdGggLyAyO1xuICAgICAgICB2YXIgY2VudGVyX3kgPSBfb3B0cy5zdGFnZUhlaWdodCAvIDI7XG5cbiAgICAgICAgdmFyIGhhbGYgPSBNYXRoLm1pbihjZW50ZXJfeCwgY2VudGVyX3kpO1xuXG4gICAgICAgIC8vdmFyIGhhbGZfaGggPSBoYWxmIC0gOTI7XG4gICAgICAgIHZhciBoYWxmX21tID0gaGFsZiAtIDU4O1xuICAgICAgICB2YXIgaGFsZl9zcyA9IGhhbGYgLSA1ODtcblxuICAgICAgICB2YXIgcG9pbnRfaGggPSBuZXcgUElYSS5Qb2ludCgpO1xuICAgICAgICB2YXIgcG9pbnRfbW0gPSBuZXcgUElYSS5Qb2ludCgpO1xuICAgICAgICB2YXIgcG9pbnRfc3MgPSBuZXcgUElYSS5Qb2ludCgpO1xuXG4gICAgICAgIHBvaW50X2hoLnggPSBjZW50ZXJfeCArIE1hdGguY29zKGFuZ2xlX2hoKSAqIChoYWxmX21tICsgMjApIC0gKF9waXhpLnR4dF9oaC53aWR0aCAvIDIpO1xuICAgICAgICBwb2ludF9oaC55ID0gY2VudGVyX3kgKyBNYXRoLnNpbihhbmdsZV9oaCkgKiAoaGFsZl9tbSArIDIwKSAtIChfcGl4aS50eHRfaGguaGVpZ2h0IC8gMik7XG5cbiAgICAgICAgX3BpeGkudHh0X2hoLnggPSBwb2ludF9oaC54O1xuICAgICAgICBfcGl4aS50eHRfaGgueSA9IHBvaW50X2hoLnk7XG5cbiAgICAgICAgcG9pbnRfbW0ueCA9IGNlbnRlcl94ICsgTWF0aC5jb3MoYW5nbGVfbW0pICogKGhhbGZfbW0gKyA0NCkgLSAoX3BpeGkudHh0X21tLndpZHRoIC8gMik7XG4gICAgICAgIHBvaW50X21tLnkgPSBjZW50ZXJfeSArIE1hdGguc2luKGFuZ2xlX21tKSAqIChoYWxmX21tICsgNDQpIC0gKF9waXhpLnR4dF9tbS5oZWlnaHQgLyAyKTtcblxuICAgICAgICBfcGl4aS50eHRfbW0ueCA9IHBvaW50X21tLng7XG4gICAgICAgIF9waXhpLnR4dF9tbS55ID0gcG9pbnRfbW0ueTtcblxuICAgICAgICBwb2ludF9zcy54ID0gY2VudGVyX3ggKyBNYXRoLmNvcyhhbmdsZV9zcykgKiAoaGFsZl9zcyArIDQ0KSAtIChfcGl4aS50eHRfc3Mud2lkdGggLyAyKTtcbiAgICAgICAgcG9pbnRfc3MueSA9IGNlbnRlcl95ICsgTWF0aC5zaW4oYW5nbGVfc3MpICogKGhhbGZfc3MgKyA0NCkgLSAoX3BpeGkudHh0X3NzLmhlaWdodCAvIDIpO1xuXG4gICAgICAgIF9waXhpLnR4dF9zcy54ID0gcG9pbnRfc3MueDtcbiAgICAgICAgX3BpeGkudHh0X3NzLnkgPSBwb2ludF9zcy55O1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBfdXBkYXRlVG9kYXkoZGF0ZSkge1xuICAgICAgICBfdmFycy5kYXRlX25vdyA9IGRhdGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5pdDogaW5pdCxcbiAgICAgICAgdXBkYXRlVG9kYXk6IF91cGRhdGVUb2RheVxuICAgIH1cbn07IiwidmFyIGRhdGVfZm9ybWF0ID0gcmVxdWlyZSggJy4uL2J1bmRsZXIvbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2Zvcm1hdCcpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY29uLCBqc29uX2RhdGEpIHtcclxuXHJcbiAgICB2YXIgQ0xBU1NfTkFNRSA9IFwiWyBMb2dpbkRhdGUgXVwiO1xyXG5cclxuICAgIHZhciBfY29uID0gY29uO1xyXG5cclxuICAgIHZhciBfZWwgPSB7XHJcbiAgICAgICAgdHh0X01NOiBcIlwiLFxyXG4gICAgICAgIHR4dF9ERDogXCJcIixcclxuICAgICAgICB0eHRfRFc6IFwiXCJcclxuICAgIH07XHJcblxyXG4gICAgdmFyIF90b2RheSA9IHtcclxuICAgICAgICBNTTogXCJcIixcclxuICAgICAgICBERDogXCJcIixcclxuICAgICAgICBEVzogXCJcIlxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgX0lEX1RJTUVPVVQgPSAnJztcclxuXHJcbiAgICBmdW5jdGlvbiBpbml0KGRhdGUpIHtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKENMQVNTX05BTUUgKyBcIiBjb250YWluZXIgOiBcIiwgX2Nvbik7XHJcblxyXG4gICAgICAgIF9lbC50eHRfTU0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImlkX3R4dF9NTVwiKTtcclxuICAgICAgICBfZWwudHh0X0REID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpZF90eHRfRERcIik7XHJcbiAgICAgICAgX2VsLnR4dF9EVyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaWRfdHh0X0RXXCIpO1xyXG5cclxuICAgICAgICBfdXBkYXRlVG9kYXkoZGF0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc2hvdygpIHtcclxuXHJcbiAgICAgICAgZGYubGFiLlV0aWwucmVtb3ZlQ2xhc3MoX2Nvbiwgd2luZG93LmRmLndvcmtncm91cC5QcmVzZXQuY2xhc3NfbmFtZS5zaG93SW4pO1xyXG5cclxuICAgICAgICBjbGVhclRpbWVvdXQoX0lEX1RJTUVPVVQpO1xyXG4gICAgICAgIF9JRF9USU1FT1VUID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGRmLmxhYi5VdGlsLmFkZENsYXNzKF9jb24sIHdpbmRvdy5kZi53b3JrZ3JvdXAuUHJlc2V0LmNsYXNzX25hbWUuc2hvd0luKTtcclxuICAgICAgICB9LCAxMDAwKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfdXBkYXRlVG9kYXkoZGF0ZSkge1xyXG5cclxuICAgICAgICB2YXIgTU0gPSB3aW5kb3cuZGYud29ya2dyb3VwLlV0aWwuZ2V0RGF0ZV9mb3JtYXQoZGF0ZSwnTU1NTScpO1xyXG4gICAgICAgIHZhciBERCA9IHdpbmRvdy5kZi53b3JrZ3JvdXAuVXRpbC5nZXREYXRlX2Zvcm1hdChkYXRlLCdERCcpO1xyXG4gICAgICAgIHZhciBEVyA9IHdpbmRvdy5kZi53b3JrZ3JvdXAuVXRpbC5nZXREYXRlX2Zvcm1hdChkYXRlLCdkZGRkJyk7XHJcblxyXG4gICAgICAgIGlmIChfdG9kYXkuTU0gIT0gTU0gfHwgX3RvZGF5LkREICE9IEREIHx8IF90b2RheS5EVyAhPSBEVykge1xyXG5cclxuICAgICAgICAgICAgX3RvZGF5Lk1NID0gTU07XHJcbiAgICAgICAgICAgIF90b2RheS5ERCA9IEREO1xyXG4gICAgICAgICAgICBfdG9kYXkuRFcgPSBEVztcclxuXHJcbiAgICAgICAgICAgIHNob3coKTtcclxuICAgICAgICAgICAgc2V0RGF0ZVR4dCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzZXREYXRlVHh0KCkge1xyXG5cclxuICAgICAgICBfZWwudHh0X01NLnRleHRDb250ZW50ID0gX3RvZGF5Lk1NO1xyXG4gICAgICAgIF9lbC50eHRfREQudGV4dENvbnRlbnQgPSBfdG9kYXkuREQ7XHJcbiAgICAgICAgX2VsLnR4dF9EVy50ZXh0Q29udGVudCA9IF90b2RheS5EVztcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGluaXQ6IGluaXQsXHJcbiAgICAgICAgdXBkYXRlVG9kYXk6IF91cGRhdGVUb2RheVxyXG4gICAgfVxyXG59OyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgdmFyIEtFWUJPQVJEX0VOVEVSID0gMTM7XG4gICAgdmFyIEtFWUJPQVJEX1RBQiA9IDk7XG4gICAgdmFyIGlucHV0X3VzZXJfaWQsIGlucHV0X3VzZXJfcHc7XG4gICAgdmFyIHN0b3JhZ2VJZCwgc3RvcmFnZVB3O1xuXG4gICAgdmFyIENMQVNTX05BTUUgPSBcIlsgTG9naW5GaWVsZENvbnRyb2xsZXIgXVwiO1xuICAgIHZhciBfZm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpZF9sb2dpbicpO1xuXG4gICAgdmFyIF9JRF9USU1FT1VUID0gMDtcblxuICAgIGZ1bmN0aW9uIF9pbml0KCkge1xuXG4gICAgICAgIGlucHV0X3VzZXJfaWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndXNlcl9pZCcpO1xuICAgICAgICBpbnB1dF91c2VyX3B3ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3VzZXJfcHcnKTtcblxuICAgICAgICBfc2V0VXJsKCk7XG4gICAgICAgIF9hZGRFdmVudCgpO1xuXG4gICAgICAgIHZhciBlbF9odG1sID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaHRtbCcpO1xuICAgICAgICB2YXIgaXNEZXNrdG9wID0gd2luZG93LmRmLmxhYi5VdGlsLmhhc0NsYXNzKGVsX2h0bWwsICdkZXNrdG9wJyk7XG4gICAgICAgIGlmIChpc0Rlc2t0b3ApIF9JRF9USU1FT1VUID0gc2V0VGltZW91dChzZXRGb2N1c19pZCwgMTAwMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX3NldFVybCgpIHtcbiAgICAgICAgdmFyIGpzb25fZGF0YSA9IHdpbmRvdy5kZi53b3JrZ3JvdXAuR2xvYmFsVmFycy5pbmZvRGF0YTtcbiAgICAgICAgaWYgKGpzb25fZGF0YS5wcmVzZXQgIT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICBqc29uX2RhdGEucHJlc2V0Lmpzb25fdXJsICE9IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAganNvbl9kYXRhLnByZXNldC5qc29uX3VybC5sb2dpbiAhPSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgX2Zvcm0uYWN0aW9uID0ganNvbl9kYXRhLnByZXNldC5qc29uX3VybC5sb2dpbjtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coQ0xBU1NfTkFNRSArIFwiIGFjdGlvbihzZXJ2ZXIpIDogXCIsIF9mb3JtLmFjdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfZm9ybS5hY3Rpb24gPSB3aW5kb3cuZGYud29ya2dyb3VwLlByZXNldC5qc29uX3VybC5sb2dpbjtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coQ0xBU1NfTkFNRSArIFwiIGFjdGlvbihsb2NhbCkgOiBcIiwgX2Zvcm0uYWN0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9hZGRFdmVudCgpIHtcbiAgICAgICAgaW5wdXRfdXNlcl9pZC5hZGRFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIF9rZXlwcmVzc0lkKTtcbiAgICAgICAgLy9pbnB1dF91c2VyX3B3LmFkZEV2ZW50TGlzdGVuZXIoICdrZXlwcmVzcycsIF9rZXlwcmVzc1B3ZCApO1xuXG4gICAgICAgIF9mb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIF9vblN1Ym1pdCk7XG5cbiAgICAgICAgaW5wdXRfdXNlcl9wdy5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNpblwiLCBfb25Gb2N1c19QVyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0Rm9jdXNfaWQoKSB7XG5cbiAgICAgICAgaWYgKHN0b3JhZ2VJZCA9PSB1bmRlZmluZWQgfHwgc3RvcmFnZUlkID09IG51bGwpIHtcbiAgICAgICAgICAgIGlucHV0X3VzZXJfaWQuZm9jdXMoKTtcbiAgICAgICAgICAgIGlucHV0X3VzZXJfaWQuc2VsZWN0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRGb2N1c19wdygpIHtcbiAgICAgICAgaWYgKHN0b3JhZ2VQdyA9PSB1bmRlZmluZWQgfHwgc3RvcmFnZVB3ID09IG51bGwpIHtcbiAgICAgICAgICAgIGlucHV0X3VzZXJfcHcuZm9jdXMoKTtcbiAgICAgICAgICAgIGlucHV0X3VzZXJfcHcuc2VsZWN0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfb25Gb2N1c19QVygpIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcIl9vbkZvY3VzX1BXXCIpO1xuICAgICAgICBjbGVhclRpbWVvdXQoX0lEX1RJTUVPVVQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9rZXlwcmVzc0lkKCRldnQpIHtcbiAgICAgICAgc3dpdGNoICgkZXZ0LndoaWNoKSB7XG4gICAgICAgICAgICBjYXNlIEtFWUJPQVJEX0VOVEVSIDpcbiAgICAgICAgICAgICAgICBpbnB1dF91c2VyX3B3LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEtFWUJPQVJEX1RBQiA6XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJJRFwiKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9rZXlwcmVzc1B3ZCgkZXZ0KSB7XG4gICAgICAgIHN3aXRjaCAoJGV2dC53aGljaCkge1xuICAgICAgICAgICAgY2FzZSBLRVlCT0FSRF9FTlRFUiA6XG4gICAgICAgICAgICAgICAgLy9fbG9naW5DaGVjaygpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBLRVlCT0FSRF9UQUIgOlxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUFdcIik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfb25TdWJtaXQoJGV2dCkge1xuICAgICAgICAkZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIF9sb2dpbkNoZWNrKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX2xvZ2luQ2hlY2soKSB7XG5cbiAgICAgICAgaWYgKF9mb3JtLnVzZXJfaWQudmFsdWUubGVuZ3RoIDwgMiB8fCBfZm9ybS51c2VyX2lkLnZhbHVlLmxlbmd0aCA+IDE1KSB7XG4gICAgICAgICAgICAvL2FsZXJ0KFwi7JWE7J2065SU6rCAIOyhtOyerO2VmOyngCDslYrsirXri4jri6QuXCIpO1xuICAgICAgICAgICAgX2Zvcm0udXNlcl9pZC5mb2N1cygpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF9mb3JtLnVzZXJfcHcudmFsdWUubGVuZ3RoIDwgNCB8fCBfZm9ybS51c2VyX3B3LnZhbHVlLmxlbmd0aCA+IDE1KSB7XG4gICAgICAgICAgICAvL2FsZXJ0KFwi7J6Y66q765CcIO2MqOyKpOybjOuTnOyeheuLiOuLpC4gKDQtMTbsnpDrpqwg6rCA64qlKVwiKTtcbiAgICAgICAgICAgIF9mb3JtLnVzZXJfcHcuZm9jdXMoKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9zdWJtaXQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfc3VibWl0KCkge1xuXG4gICAgICAgIGNvbnNvbGUubG9nKENMQVNTX05BTUUsIFwiIGxvYWQganNvblwiKTtcblxuICAgICAgICB2YXIgYnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3VzZXJfcHcnKTtcbiAgICAgICAgYnRuLmJsdXIoKTtcblxuICAgICAgICAvL19mb3JtLnN1Ym1pdCgpO1xuICAgICAgICBsb2FkaW5nKCk7XG4gICAgICAgIGFqYXhQb3N0KF9mb3JtLCBvbkNvbXBTdWJtaXQpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9hZGluZygpIHtcbiAgICAgICAgZGlzYWJsZV9pbnB1dCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpc2FibGVfaW5wdXQoKSB7XG4gICAgICAgIHZhciBzZWNfbG9naW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2VjLWxvZ2luJyk7XG4gICAgICAgIGRmLmxhYi5VdGlsLmFkZENsYXNzKHNlY19sb2dpbiwgJ2xvYWRpbmcnKTtcblxuICAgICAgICB2YXIgaW5wdXRzID0gX2Zvcm0ucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQnKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnB1dHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlucHV0c1tpXS5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCBcIlwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFibGVfaW5wdXQoKSB7XG4gICAgICAgIHZhciBzZWNfbG9naW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2VjLWxvZ2luJyk7XG4gICAgICAgIGRmLmxhYi5VdGlsLnJlbW92ZUNsYXNzKHNlY19sb2dpbiwgJ2xvYWRpbmcnKTtcblxuICAgICAgICB2YXIgaW5wdXRzID0gX2Zvcm0ucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQnKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnB1dHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlucHV0c1tpXS5yZW1vdmVBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uQ29tcFN1Ym1pdChyZXNwb25zZSkge1xuICAgICAgICBhYmxlX2lucHV0KCk7XG4gICAgICAgIF9kaXNwYXRjaE9uTG9hZChyZXNwb25zZSk7XG5cbiAgICAgICAgdmFyIHN0YXR1cyA9IGdldFN0YXR1cyhyZXNwb25zZSk7XG5cbiAgICAgICAgaWYgKHN0YXR1cy5pc1dhcm5pbmcpIHtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJzdGF0dXMudGV4dCA6IFwiICwgc3RhdHVzLnRleHQpO1xuICAgICAgICAgICAgX2Rpc3BhdGNoT25XYXJuaW5nKHN0YXR1cy50ZXh0KTtcblxuICAgICAgICAgICAgaWYgKHN0YXR1cy5jb2RlID09IFwiTDAxXCIgfHwgc3RhdHVzLmNvZGUgPT0gXCJMMDNcIikge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIod2luZG93LmRmLndvcmtncm91cC5QcmVzZXQuZXZlbnRUeXBlLk9OX0NMT1NFX01PREFMLCBfb25DbG9zZV9tb2RhbF9mb3JJRCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cy5jb2RlID09IFwiTDAyXCIpIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHdpbmRvdy5kZi53b3JrZ3JvdXAuUHJlc2V0LmV2ZW50VHlwZS5PTl9DTE9TRV9NT0RBTCwgX29uQ2xvc2VfbW9kYWxfZm9yUFcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U3RhdHVzKHJlc3BvbnNlKSB7XG5cbiAgICAgICAgdmFyIHN0YXR1cyA9IHtcbiAgICAgICAgICAgIGlzV2FybmluZzogZmFsc2UsXG4gICAgICAgICAgICB0ZXh0OiBcIu2RnOyLnO2VoCDrqZTshLjsp4DqsIAg7JeG7Iq164uI64ukLlwiLFxuICAgICAgICAgICAgY29kZTogbnVsbFxuICAgICAgICB9O1xuICAgICAgICB2YXIganNvbiA9IEpTT04ucGFyc2UocmVzcG9uc2UudGFyZ2V0LnJlc3BvbnNlVGV4dCk7XG4gICAgICAgIHZhciB1c2VyX3N0YXR1c19jb2RlID0ganNvbi51c2VyLnN0YXR1cztcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdXNlcl9zdGF0dXNfY29kZS50b0xvd2VyQ2FzZSgpID09IChcIkwwMVwiKS50b0xvd2VyQ2FzZSgpIHx8XG4gICAgICAgICAgICB1c2VyX3N0YXR1c19jb2RlLnRvTG93ZXJDYXNlKCkgPT0gKFwiTDAyXCIpLnRvTG93ZXJDYXNlKCkgfHxcbiAgICAgICAgICAgIHVzZXJfc3RhdHVzX2NvZGUudG9Mb3dlckNhc2UoKSA9PSAoXCJMMDNcIikudG9Mb3dlckNhc2UoKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHZhciBsaXN0ID0ganNvbi5wcmVzZXQuc3RhdHVzX2xpc3Q7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgICAgICAgICAgICAgdmFyIGNvZGUgPSBpdGVtLmNvZGU7XG5cbiAgICAgICAgICAgICAgICBpZiAoY29kZS50b0xvd2VyQ2FzZSgpID09IHVzZXJfc3RhdHVzX2NvZGUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuaXNXYXJuaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLnRleHQgPSBpdGVtLnRleHQ7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5jb2RlID0gaXRlbS5jb2RlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0YXR1cztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfb25DbG9zZV9tb2RhbF9mb3JJRCgpIHtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih3aW5kb3cuZGYud29ya2dyb3VwLlByZXNldC5ldmVudFR5cGUuT05fQ0xPU0VfTU9EQUwsIF9vbkNsb3NlX21vZGFsX2ZvcklEKTtcbiAgICAgICAgc2V0Rm9jdXNfaWQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfb25DbG9zZV9tb2RhbF9mb3JQVygpIHtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih3aW5kb3cuZGYud29ya2dyb3VwLlByZXNldC5ldmVudFR5cGUuT05fQ0xPU0VfTU9EQUwsIF9vbkNsb3NlX21vZGFsX2ZvclBXKTtcbiAgICAgICAgc2V0Rm9jdXNfcHcoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfZGlzcGF0Y2hPbldhcm5pbmcodHh0KSB7XG4gICAgICAgIHZhciBldmVudCA9IG5ldyBDdXN0b21FdmVudCh3aW5kb3cuZGYud29ya2dyb3VwLlByZXNldC5ldmVudFR5cGUuT05fV0FSTklORywge1xuICAgICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogdHh0XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIF9kaXNwYXRjaE9uTG9hZChyZXNwb25zZSkge1xuICAgICAgICB2YXIgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQod2luZG93LmRmLndvcmtncm91cC5QcmVzZXQuZXZlbnRUeXBlLk9OX0xPR0lOLCB7XG4gICAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgICAgICByZXNwb25zZTogcmVzcG9uc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9oaWRlTG9naW5Gcm9tKCkge1xuICAgICAgICBkaXNhYmxlX2lucHV0KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX3Nob3dMb2dpbkZyb20oKSB7XG4gICAgICAgIGFibGVfaW5wdXQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhamF4UG9zdChmb3JtLCBjYWxsYmFjaykge1xuXG4gICAgICAgIC8vIENvbGxlY3QgdGhlIGZvcm0gZGF0YSB3aGlsZSBpdGVyYXRpbmcgb3ZlciB0aGUgaW5wdXRzXG4gICAgICAgIHZhciBkYXRhID0ge307XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGZvcm0ubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICAgICAgdmFyIGlucHV0ID0gZm9ybVtpXTtcbiAgICAgICAgICAgIGlmIChpbnB1dC5uYW1lKSB7XG4gICAgICAgICAgICAgICAgZGF0YVtpbnB1dC5uYW1lXSA9IGlucHV0LnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgICAgIG1ldGhvZDogZm9ybS5tZXRob2QsXG4gICAgICAgICAgICBhY3Rpb246IGRmLndvcmtncm91cC5VdGlsLmFkZFBhcmFtVW5pcShmb3JtLmFjdGlvbilcbiAgICAgICAgfTtcblxuICAgICAgICBkZi53b3JrZ3JvdXAuVXRpbC5sb2FkX2pzb24ocGFyYW1zLmFjdGlvbiwgcGFyYW1zLm1ldGhvZCwgY2FsbGJhY2ssIGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGluaXQ6IF9pbml0LFxuICAgICAgICBoaWRlTG9naW5Gcm9tOiBfaGlkZUxvZ2luRnJvbSxcbiAgICAgICAgc2hvd0xvZ2luRnJvbTogX3Nob3dMb2dpbkZyb21cbiAgICB9XG59OyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgdmFyIENMQVNTX05BTUUgPSBcIlsgTG9naW5JbmZvQ29udHJvbGxlciBdXCI7XG5cbiAgICB2YXIgX3N0YWdlX2Nsb2NrID0gXCJcIjtcbiAgICB2YXIgX3N0YWdlX25vdGljZSA9IFwiXCI7XG4gICAgdmFyIF9zdGFnZV9iaXJ0aGRheSA9IFwiXCI7XG5cbiAgICB2YXIgX3N0YWdlX2NvbiA9IFwiXCI7XG4gICAgdmFyIF9pbmZvX2NvbiA9IFwiXCI7XG4gICAgdmFyIF9pbmRpY2F0b3IgPSBcIlwiO1xuXG4gICAgdmFyIF9jdXJJbmRleCA9IDA7XG4gICAgdmFyIF9wb3MgPSB7XG4gICAgICAgIG9YOiAwLFxuICAgICAgICBvWTogMCxcbiAgICAgICAgcGFzc1g6IDAsXG4gICAgICAgIHBhc3NZOiAwLFxuICAgIH07XG5cbiAgICB2YXIgX2lzSGFzTm90aWNlID0gZmFsc2U7XG4gICAgdmFyIF9pc0hhc0JpcnRoZGF5ID0gZmFsc2U7XG5cbiAgICB2YXIgX2pzb25fbm90aWNlO1xuICAgIHZhciBfanNvbl9iaXJ0aGRheTtcblxuICAgIHZhciBfSURfYWRkRXZlbnQ7XG4gICAgdmFyIF9JRF9hdXRvU2hvdztcblxuICAgIHZhciBfVElNRV9ST0xMSU5HID0gMTAwMCAqIDE1O1xuXG4gICAgZnVuY3Rpb24gX2luaXQoanNvbl9ub3RpY2UsIGpzb25fYmlydGhkYXkpIHtcblxuICAgICAgICBfc3RhZ2VfY2xvY2sgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaWRfc3RhZ2VfY2xvY2snKTtcbiAgICAgICAgX3N0YWdlX25vdGljZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpZF9zdGFnZV9ub3RpY2UnKTtcbiAgICAgICAgX3N0YWdlX2JpcnRoZGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lkX3N0YWdlX2JpcnRoZGF5Jyk7XG4gICAgICAgIF9zdGFnZV9jb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdzZWN0aW9uLnNlYy1pbmZvJyk7XG4gICAgICAgIF9pbmZvX2NvbiA9IF9zdGFnZV9jb24ucXVlcnlTZWxlY3RvcigndWwuY29udGVudHNfY29uJyk7XG4gICAgICAgIF9pbmRpY2F0b3IgPSBfc3RhZ2VfY29uLnF1ZXJ5U2VsZWN0b3IoJy5hcmVhLWluZGljYXRvciB1bC5pbmRpY2F0b3InKTtcblxuICAgICAgICBzdGFydChqc29uX25vdGljZSwganNvbl9iaXJ0aGRheSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3RhcnQoanNvbl9ub3RpY2UsIGpzb25fYmlydGhkYXkpIHtcbiAgICAgICAgc3RvcEF1dG9TaG93KCk7XG4gICAgICAgIGNsZWFyVGltZW91dChfSURfYWRkRXZlbnQpO1xuXG4gICAgICAgIHNldE5vdGljZShqc29uX25vdGljZSk7XG4gICAgICAgIHNldEJpcnRoZGF5KGpzb25fYmlydGhkYXkpO1xuXG4gICAgICAgIGlmIChfaXNIYXNCaXJ0aGRheSB8fCBfaXNIYXNOb3RpY2UpIF9JRF9hZGRFdmVudCA9IHNldFRpbWVvdXQoYWRkRXZlbnQsIDE1MDApO1xuICAgICAgICBlbHNlIHJlbW92ZUV2ZW50KCk7XG5cbiAgICAgICAgX0lEX2F1dG9TaG93ID0gc2V0VGltZW91dChfbmV4dFN0YWdlLCBfVElNRV9ST0xMSU5HKTtcblxuICAgICAgICBfc2V0SW5kaWNhdG9yKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX3NldEluZGljYXRvcigpIHtcbiAgICAgICAgaWYgKF9pc0hhc0JpcnRoZGF5IHx8IF9pc0hhc05vdGljZSkge1xuICAgICAgICAgICAgZGYubGFiLlV0aWwuYWRkQ2xhc3MoX2luZGljYXRvciwgd2luZG93LmRmLndvcmtncm91cC5QcmVzZXQuY2xhc3NfbmFtZS5zaG93SW4pO1xuICAgICAgICAgICAgX2FkZEV2ZW50X2luZGkoKTtcbiAgICAgICAgICAgIF9zZXRJbmRpSW5kZXgoX2N1ckluZGV4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRmLmxhYi5VdGlsLnJlbW92ZUNsYXNzKF9pbmRpY2F0b3IsIHdpbmRvdy5kZi53b3JrZ3JvdXAuUHJlc2V0LmNsYXNzX25hbWUuc2hvd0luKTtcbiAgICAgICAgICAgIF9yZW1vdmVFdmVudF9pbmRpKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfYWRkRXZlbnRfaW5kaSgpIHtcbiAgICAgICAgX3JlbW92ZUV2ZW50X2luZGkoKTtcbiAgICAgICAgdmFyIGxpc3RzID0gX2luZGljYXRvci5xdWVyeVNlbGVjdG9yQWxsKFwibGkuaXRlbS1saXN0XCIpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RzLmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgICAgIHZhciBpdGVtID0gbGlzdHNbaV07XG4gICAgICAgICAgICBpZiAoaSA9PSAxICYmICFfaXNIYXNOb3RpY2UpIGRmLmxhYi5VdGlsLmFkZENsYXNzKGl0ZW0sIFwiaGlkZVwiKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGkgPT0gMiAmJiAhX2lzSGFzQmlydGhkYXkpIGRmLmxhYi5VdGlsLmFkZENsYXNzKGl0ZW0sIFwiaGlkZVwiKTtcbiAgICAgICAgICAgIGVsc2UgZGYubGFiLlV0aWwucmVtb3ZlQ2xhc3MoaXRlbSwgXCJoaWRlXCIpO1xuXG4gICAgICAgICAgICB2YXIgYnRuID0gaXRlbS5xdWVyeVNlbGVjdG9yKFwiYnV0dG9uLmJ0bi1pbmRpXCIpO1xuICAgICAgICAgICAgYnRuLnNldEF0dHJpYnV0ZShcImRhdGEtaW5kZXhcIiwgaSk7XG4gICAgICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIF9vbkNsaWNrX2luZGkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX3JlbW92ZUV2ZW50X2luZGkoKSB7XG4gICAgICAgIHZhciBsaXN0cyA9IF9pbmRpY2F0b3IucXVlcnlTZWxlY3RvckFsbChcImxpLml0ZW0tbGlzdFwiKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0cy5sZW5ndGg7IGkrKykge1xuXG4gICAgICAgICAgICB2YXIgaXRlbSA9IGxpc3RzW2ldO1xuICAgICAgICAgICAgZGYubGFiLlV0aWwuYWRkQ2xhc3MoaXRlbSwgXCJoaWRlXCIpO1xuXG4gICAgICAgICAgICB2YXIgYnRuID0gaXRlbS5xdWVyeVNlbGVjdG9yKFwiYnV0dG9uLmJ0bi1pbmRpXCIpO1xuICAgICAgICAgICAgYnRuLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBfb25DbGlja19pbmRpKTtcblxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX3NldEluZGlJbmRleChpbmRleCkge1xuICAgICAgICB2YXIgbGlzdHMgPSBfaW5kaWNhdG9yLnF1ZXJ5U2VsZWN0b3JBbGwoXCJsaS5pdGVtLWxpc3RcIik7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gbGlzdHNbaV07XG4gICAgICAgICAgICBpZiAoaW5kZXggPT0gaSkgZGYubGFiLlV0aWwuYWRkQ2xhc3MoaXRlbSwgXCJhY3RpdmVcIik7XG4gICAgICAgICAgICBlbHNlIGRmLmxhYi5VdGlsLnJlbW92ZUNsYXNzKGl0ZW0sIFwiYWN0aXZlXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX29uQ2xpY2tfaW5kaShldnQpIHtcblxuICAgICAgICB2YXIgYnRuID0gZXZ0LmN1cnJlbnRUYXJnZXQ7XG4gICAgICAgIHZhciBpbmRleCA9IHBhcnNlSW50KGJ0bi5nZXRBdHRyaWJ1dGUoXCJkYXRhLWluZGV4XCIpKTtcbiAgICAgICAgX2NoYW5nZVN0YWdlKGluZGV4KTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGFkZEV2ZW50KCkge1xuICAgICAgICByZW1vdmVFdmVudCgpO1xuICAgICAgICBpZiAoRGV0ZWN0aXpyLmRldmljZS50eXBlICE9IFwiZGVza3RvcFwiKSB7XG4gICAgICAgICAgICBfaW5mb19jb24uYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9uVG91Y2hTdGFydF9zdGFnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfaW5mb19jb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNsaWNrX3N0YWdlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUV2ZW50KCkge1xuICAgICAgICBjbGVhclRpbWVvdXQoX0lEX2FkZEV2ZW50KTtcbiAgICAgICAgX2luZm9fY29uLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBvblRvdWNoU3RhcnRfc3RhZ2UpO1xuICAgICAgICBfaW5mb19jb24ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNsaWNrX3N0YWdlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXROb3RpY2UoanNvbl9ub3RpY2UpIHtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBqc29uX25vdGljZSAhPSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIGpzb25fbm90aWNlICE9IG51bGwgJiZcbiAgICAgICAgICAgIGpzb25fbm90aWNlLnRpdGxlICE9IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAganNvbl9ub3RpY2UudGl0bGUgIT0gbnVsbCAmJlxuICAgICAgICAgICAganNvbl9ub3RpY2UuZGVjICE9IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAganNvbl9ub3RpY2UuZGVjICE9IG51bGwpIHtcblxuICAgICAgICAgICAgX2pzb25fbm90aWNlID0ganNvbl9ub3RpY2U7XG4gICAgICAgICAgICBfaXNIYXNOb3RpY2UgPSBmYWxzZTtcblxuICAgICAgICAgICAgdmFyIHR4dF9jb24gPSBfc3RhZ2Vfbm90aWNlLnF1ZXJ5U2VsZWN0b3IoXCIudHh0LW5vdGljZVwiKTtcbiAgICAgICAgICAgIHZhciBpbm5lciA9IFwiXCI7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IF9qc29uX25vdGljZS50aXRsZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChfanNvbl9ub3RpY2UudGl0bGVbaV0gIT0gbnVsbCAmJiBfanNvbl9ub3RpY2UudGl0bGVbaV0gIT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICBpbm5lciA9IGlubmVyICsgXCI8c3Bhbj5cIiArIF9qc29uX25vdGljZS50aXRsZVtpXSArIFwiPC9zcGFuPlwiO1xuICAgICAgICAgICAgICAgICAgICBfaXNIYXNOb3RpY2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHR4dF9jb24uaW5uZXJIVE1MID0gaW5uZXI7XG5cbiAgICAgICAgICAgIHZhciB0eHRfY29uX3N1YiA9IF9zdGFnZV9ub3RpY2UucXVlcnlTZWxlY3RvcihcIi50eHQtc3ViXCIpO1xuICAgICAgICAgICAgaW5uZXIgPSBcIlwiO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfanNvbl9ub3RpY2UuZGVjLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKF9qc29uX25vdGljZS5kZWNbaV0gIT0gbnVsbCAmJiBfanNvbl9ub3RpY2UuZGVjW2ldICE9IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5uZXIgPSBpbm5lciArIFwiPHNwYW4+XCIgKyBfanNvbl9ub3RpY2UuZGVjW2ldICsgXCI8L3NwYW4+XCI7XG4gICAgICAgICAgICAgICAgICAgIF9pc0hhc05vdGljZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoX2lzSGFzTm90aWNlKSB7XG4gICAgICAgICAgICAgICAgdHh0X2Nvbl9zdWIuaW5uZXJIVE1MID0gaW5uZXI7XG4gICAgICAgICAgICAgICAgZGYubGFiLlV0aWwucmVtb3ZlQ2xhc3MoX3N0YWdlX25vdGljZSwgXCJoaWRlXCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZi5sYWIuVXRpbC5hZGRDbGFzcyhfc3RhZ2Vfbm90aWNlLCBcImhpZGVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZi5sYWIuVXRpbC5hZGRDbGFzcyhfc3RhZ2Vfbm90aWNlLCBcImhpZGVcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRCaXJ0aGRheShqc29uX2JpcnRoZGF5KSB7XG5cbiAgICAgICAgaWYgKGpzb25fYmlydGhkYXkgIT0gdW5kZWZpbmVkICYmIGpzb25fYmlydGhkYXkgIT0gbnVsbCAmJiBqc29uX2JpcnRoZGF5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIF9qc29uX2JpcnRoZGF5ID0ganNvbl9iaXJ0aGRheTtcbiAgICAgICAgICAgIF9pc0hhc0JpcnRoZGF5ID0gdHJ1ZTtcblxuICAgICAgICAgICAgdmFyIHN0cl9ub3RpY2UgPSBbXCLsmKTriphcIiwgXCLsg53snbzsnYRcIiwgXCLstpXtlZgg65Oc66Ck7JqULlwiXTtcblxuICAgICAgICAgICAgdmFyIGlubmVyID0gXCJcIjtcblxuICAgICAgICAgICAgdmFyIHR4dF9jb24gPSBfc3RhZ2VfYmlydGhkYXkucXVlcnlTZWxlY3RvcihcIi50eHQtbm90aWNlXCIpO1xuICAgICAgICAgICAgdmFyIHRvdCA9IHN0cl9ub3RpY2UubGVuZ3RoO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b3Q7IGkrKykge1xuICAgICAgICAgICAgICAgIGlubmVyID0gaW5uZXIgKyBcIjxzcGFuPlwiICsgc3RyX25vdGljZVtpXSArIFwiPC9zcGFuPlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHh0X2Nvbi5pbm5lckhUTUwgPSBpbm5lcjtcblxuXG4gICAgICAgICAgICB2YXIgdHh0X2Nvbl9zdWIgPSBfc3RhZ2VfYmlydGhkYXkucXVlcnlTZWxlY3RvcihcIi50eHQtc3ViXCIpO1xuICAgICAgICAgICAgdG90ID0gX2pzb25fYmlydGhkYXkubGVuZ3RoO1xuICAgICAgICAgICAgaW5uZXIgPSBcIlwiO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b3Q7IGkrKykge1xuXG4gICAgICAgICAgICAgICAgaWYgKGkgPT0gMCkgaW5uZXIgPSBpbm5lciArIFwiPHNwYW4+XCI7XG5cbiAgICAgICAgICAgICAgICBpZiAoaSA9PSAwKSBpbm5lciA9IGlubmVyICsgX2pzb25fYmlydGhkYXlbaV0ubmFtZSArIFwiIFwiICsgX2pzb25fYmlydGhkYXlbaV0ucG9zaXRpb24gKyBcIuuLmFwiO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGkgPiAwKSBpbm5lciA9IGlubmVyICsgXCIsIFwiICsgX2pzb25fYmlydGhkYXlbaV0ubmFtZSArIFwiIFwiICsgX2pzb25fYmlydGhkYXlbaV0ucG9zaXRpb24gKyBcIuuLmFwiO1xuXG4gICAgICAgICAgICAgICAgaWYgKGkgPT0gdG90IC0gMSkgaW5uZXIgPSBpbm5lciArIFwiPC9zcGFuPlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHh0X2Nvbl9zdWIuaW5uZXJIVE1MID0gaW5uZXI7XG5cbiAgICAgICAgICAgIGRmLmxhYi5VdGlsLnJlbW92ZUNsYXNzKF9zdGFnZV9iaXJ0aGRheSwgXCJoaWRlXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGYubGFiLlV0aWwuYWRkQ2xhc3MoX3N0YWdlX2JpcnRoZGF5LCBcImhpZGVcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkNsaWNrX3N0YWdlKCRldnQpIHtcbiAgICAgICAgJGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGlmIChfaXNIYXNOb3RpY2UgJiYgX2lzSGFzQmlydGhkYXkpIHtcbiAgICAgICAgICAgIGlmIChfY3VySW5kZXggPT0gMikgX3Nob3dDbG9jaygpO1xuICAgICAgICAgICAgZWxzZSBfbmV4dFN0YWdlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoX2N1ckluZGV4ID4gMCkgX3Nob3dDbG9jaygpO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKF9pc0hhc05vdGljZSkgX3Nob3dOb3RpY2UoKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChfaXNIYXNCaXJ0aGRheSkgX3Nob3dCaXJ0aGRheSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25Ub3VjaFN0YXJ0X3N0YWdlKCRldnQpIHtcblxuICAgICAgICAvL2NvbnNvbGUubG9nKFwib25Ub3VjaFN0YXJ0X3N0YWdlXCIpO1xuXG4gICAgICAgIC8vJGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAkZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIF9pbmZvX2Nvbi5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBvblRvdWNoTW92ZV9zdGFnZSk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb25Ub3VjaEVuZF9zdGFnZSk7XG5cbiAgICAgICAgdmFyIHBvaW50WCA9IDA7XG4gICAgICAgIHZhciBwb2ludFkgPSAwO1xuXG4gICAgICAgIGlmICgkZXZ0LnR5cGUgPT0gJ21vdXNlZG93bicpIHtcbiAgICAgICAgICAgIHBvaW50WCA9ICRldnQuY2xpZW50WDtcbiAgICAgICAgICAgIHBvaW50WSA9ICRldnQuY2xpZW50WTtcbiAgICAgICAgfSBlbHNlIGlmICgkZXZ0LnR5cGUgPT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgICAgICAgICBpZiAoJGV2dC50b3VjaGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHBvaW50WCA9ICRldnQudG91Y2hlc1swXS5wYWdlWDtcbiAgICAgICAgICAgICAgICBwb2ludFkgPSAkZXZ0LnRvdWNoZXNbMF0ucGFnZVk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfcG9zLm9YID0gcG9pbnRYO1xuICAgICAgICBfcG9zLm9ZID0gcG9pbnRZO1xuICAgICAgICBfcG9zLnBhc3NYID0gcG9pbnRYO1xuICAgICAgICBfcG9zLnBhc3NZID0gcG9pbnRZO1xuXG4gICAgICAgIC8vY29uc29sZS5sb2cocG9pbnRYKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvblRvdWNoRW5kX3N0YWdlKCRldnQpIHtcblxuICAgICAgICAvL2NvbnNvbGUubG9nKFwib25Ub3VjaEVuZF9zdGFnZSAoZG9jdW1lbnQpXCIpO1xuXG4gICAgICAgIC8vJGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAkZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIF9pbmZvX2Nvbi5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBvblRvdWNoTW92ZV9zdGFnZSk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb25Ub3VjaEVuZF9zdGFnZSk7XG5cbiAgICAgICAgdmFyIG9XID0gX3N0YWdlX2Nvbi5vZmZzZXRXaWR0aDtcblxuICAgICAgICB2YXIgZGlzWCA9IF9wb3MucGFzc1ggLSBfcG9zLm9YO1xuICAgICAgICB2YXIgcGVyID0gTWF0aC5hYnMoZGlzWCkgLyBvVztcblxuICAgICAgICBpZiAocGVyID4gMC4xKSB7XG4gICAgICAgICAgICBpZiAoZGlzWCA8IDApIF9uZXh0U3RhZ2UoKTtcbiAgICAgICAgICAgIGVsc2UgX3ByZXZTdGFnZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9jb25zb2xlLmxvZyhfcG9zLnBhc3NYKTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhvVywgZGlzWCwgcGVyLCBkaXNYID4gMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25Ub3VjaE1vdmVfc3RhZ2UoJGV2dCkge1xuICAgICAgICAvLyRldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgJGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcIm9uVG91Y2hNb3ZlX3N0YWdlXCIpO1xuXG4gICAgICAgIHZhciBwb2ludFgsIHBvaW50WTtcblxuICAgICAgICBpZiAoJGV2dC50eXBlID09ICdtb3VzZW1vdmUnKSB7XG4gICAgICAgICAgICBwb2ludFggPSAkZXZ0LmNsaWVudFg7XG4gICAgICAgICAgICBwb2ludFkgPSAkZXZ0LmNsaWVudFk7XG4gICAgICAgIH0gZWxzZSBpZiAoJGV2dC50eXBlID09ICd0b3VjaG1vdmUnKSB7XG4gICAgICAgICAgICBpZiAoJGV2dC50b3VjaGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHBvaW50WCA9ICRldnQudG91Y2hlc1swXS5wYWdlWDtcbiAgICAgICAgICAgICAgICBwb2ludFkgPSAkZXZ0LnRvdWNoZXNbMF0ucGFnZVk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfcG9zLnBhc3NYID0gcG9pbnRYO1xuICAgICAgICBfcG9zLnBhc3NZID0gcG9pbnRZO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9zaG93Q2xvY2soKSB7XG4gICAgICAgIF9jaGFuZ2VTdGFnZSgwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfc2hvd05vdGljZSgpIHtcblxuICAgICAgICBpZiAoX2lzSGFzTm90aWNlKSBfY2hhbmdlU3RhZ2UoMSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX3Nob3dCaXJ0aGRheSgpIHtcblxuICAgICAgICBpZiAoX2lzSGFzQmlydGhkYXkpIF9jaGFuZ2VTdGFnZSgyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfbmV4dFN0YWdlKCkge1xuXG4gICAgICAgIC8vY29uc29sZS5sb2coQ0xBU1NfTkFNRSArIFwiIG5leHRTdGFnZSA6IFwiLF9jdXJJbmRleCxfaXNIYXNOb3RpY2UsX2lzSGFzQmlydGhkYXkpO1xuXG4gICAgICAgIHZhciBpbmRleCA9IChfY3VySW5kZXggKyAxKTtcbiAgICAgICAgaWYgKCFfaXNIYXNOb3RpY2UgJiYgIV9pc0hhc0JpcnRoZGF5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoX2lzSGFzTm90aWNlICYmIF9pc0hhc0JpcnRoZGF5KSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPCAzKSBfY2hhbmdlU3RhZ2UoaW5kZXgpO1xuICAgICAgICAgICAgZWxzZSByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGlmIChfY3VySW5kZXggPT0gMCAmJiBfaXNIYXNOb3RpY2UpIF9zaG93Tm90aWNlKCk7XG4gICAgICAgICAgICBlbHNlIGlmIChfY3VySW5kZXggPT0gMCAmJiBfaXNIYXNCaXJ0aGRheSkgX3Nob3dCaXJ0aGRheSgpO1xuICAgICAgICAgICAgZWxzZSByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfcHJldlN0YWdlKCkge1xuXG4gICAgICAgIC8vY29uc29sZS5sb2coQ0xBU1NfTkFNRSArIFwiIHByZXZTdGFnZSA6IFwiLF9jdXJJbmRleCxfaXNIYXNOb3RpY2UsX2lzSGFzQmlydGhkYXkpO1xuXG4gICAgICAgIHZhciBpbmRleCA9IChfY3VySW5kZXggLSAxKTtcbiAgICAgICAgaWYgKCFfaXNIYXNOb3RpY2UgJiYgIV9pc0hhc0JpcnRoZGF5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoX2lzSGFzTm90aWNlICYmIF9pc0hhc0JpcnRoZGF5KSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkgX2NoYW5nZVN0YWdlKGluZGV4KTtcbiAgICAgICAgICAgIGVsc2UgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3Nob3dDbG9jaygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX2NoYW5nZVN0YWdlKGluZGV4KSB7XG5cbiAgICAgICAgaWYgKF9jdXJJbmRleCAhPSBpbmRleCkge1xuICAgICAgICAgICAgc3RvcEF1dG9TaG93KCk7XG4gICAgICAgICAgICBfY3VySW5kZXggPSBpbmRleDtcblxuICAgICAgICAgICAgc3dpdGNoIChfY3VySW5kZXgpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDEgOlxuICAgICAgICAgICAgICAgICAgICBzZXRIaWRlX2Nsb2NrKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBzZXRTaG93X25vdGljZSgpO1xuICAgICAgICAgICAgICAgICAgICBzZXRIaWRlX2JpcnRoZGF5KGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyIDpcbiAgICAgICAgICAgICAgICAgICAgc2V0SGlkZV9jbG9jayh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0SGlkZV9ub3RpY2UodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHNldFNob3dfYmlydGhkYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdCA6XG4gICAgICAgICAgICAgICAgICAgIHNldFNob3dfY2xvY2soKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0SGlkZV9ub3RpY2UoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBzZXRIaWRlX2JpcnRoZGF5KGZhbHNlKTtcblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX3NldEluZGlJbmRleChfY3VySW5kZXgpO1xuXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKENMQVNTX05BTUUgKyBcIiBjaGFuZ2VTdGFnZSA6IFwiLF9jdXJJbmRleCwgXCIgLyBfaXNIYXNOb3RpY2UgOiBcIiwgX2lzSGFzTm90aWNlLCBcIiAvIF9pc0hhc0JpcnRoZGF5IDogXCIsIF9pc0hhc0JpcnRoZGF5KTtcbiAgICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KCk7XG5cbiAgICAgICAgICAgIGlmICghX2lzSGFzTm90aWNlICYmICFfaXNIYXNCaXJ0aGRheSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoX2lzSGFzTm90aWNlICYmIF9pc0hhc0JpcnRoZGF5KSB7XG4gICAgICAgICAgICAgICAgaWYgKF9jdXJJbmRleCA8IDIpIF9JRF9hdXRvU2hvdyA9IHNldFRpbWVvdXQoX25leHRTdGFnZSwgX1RJTUVfUk9MTElORyk7XG4gICAgICAgICAgICAgICAgZWxzZSBfSURfYXV0b1Nob3cgPSBzZXRUaW1lb3V0KF9zaG93Q2xvY2ssIF9USU1FX1JPTExJTkcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoX2N1ckluZGV4ID09IDApIF9JRF9hdXRvU2hvdyA9IHNldFRpbWVvdXQoX25leHRTdGFnZSwgX1RJTUVfUk9MTElORyk7XG4gICAgICAgICAgICAgICAgZWxzZSBfSURfYXV0b1Nob3cgPSBzZXRUaW1lb3V0KF9zaG93Q2xvY2ssIF9USU1FX1JPTExJTkcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0U2hvd19jbG9jaygpIHtcbiAgICAgICAgZGYubGFiLlV0aWwucmVtb3ZlQ2xhc3MoX3N0YWdlX2Nsb2NrLCBcIm91dC1sZWZ0XCIpO1xuICAgICAgICBkZi5sYWIuVXRpbC5yZW1vdmVDbGFzcyhfc3RhZ2VfY2xvY2ssIFwib3V0LXJpZ2h0XCIpO1xuICAgICAgICBkZi5sYWIuVXRpbC5hZGRDbGFzcyhfc3RhZ2VfY2xvY2ssIHdpbmRvdy5kZi53b3JrZ3JvdXAuUHJlc2V0LmNsYXNzX25hbWUuc2hvd0luKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRIaWRlX2Nsb2NrKGlzVG9MZWZ0KSB7XG5cbiAgICAgICAgZGYubGFiLlV0aWwucmVtb3ZlQ2xhc3MoX3N0YWdlX2Nsb2NrLCB3aW5kb3cuZGYud29ya2dyb3VwLlByZXNldC5jbGFzc19uYW1lLnNob3dJbik7XG4gICAgICAgIGlmIChpc1RvTGVmdCkge1xuICAgICAgICAgICAgZGYubGFiLlV0aWwucmVtb3ZlQ2xhc3MoX3N0YWdlX2Nsb2NrLCBcIm91dC1yaWdodFwiKTtcbiAgICAgICAgICAgIGRmLmxhYi5VdGlsLmFkZENsYXNzKF9zdGFnZV9jbG9jaywgXCJvdXQtbGVmdFwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRmLmxhYi5VdGlsLmFkZENsYXNzKF9zdGFnZV9jbG9jaywgXCJvdXQtcmlnaHRcIik7XG4gICAgICAgICAgICBkZi5sYWIuVXRpbC5yZW1vdmVDbGFzcyhfc3RhZ2VfY2xvY2ssIFwib3V0LWxlZnRcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRTaG93X25vdGljZSgpIHtcbiAgICAgICAgZGYubGFiLlV0aWwucmVtb3ZlQ2xhc3MoX3N0YWdlX25vdGljZSwgXCJvdXQtbGVmdFwiKTtcbiAgICAgICAgZGYubGFiLlV0aWwucmVtb3ZlQ2xhc3MoX3N0YWdlX25vdGljZSwgXCJvdXQtcmlnaHRcIik7XG4gICAgICAgIGRmLmxhYi5VdGlsLmFkZENsYXNzKF9zdGFnZV9ub3RpY2UsIHdpbmRvdy5kZi53b3JrZ3JvdXAuUHJlc2V0LmNsYXNzX25hbWUuc2hvd0luKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRIaWRlX25vdGljZShpc1RvTGVmdCkge1xuXG4gICAgICAgIGRmLmxhYi5VdGlsLnJlbW92ZUNsYXNzKF9zdGFnZV9ub3RpY2UsIHdpbmRvdy5kZi53b3JrZ3JvdXAuUHJlc2V0LmNsYXNzX25hbWUuc2hvd0luKTtcbiAgICAgICAgaWYgKGlzVG9MZWZ0KSB7XG4gICAgICAgICAgICBkZi5sYWIuVXRpbC5yZW1vdmVDbGFzcyhfc3RhZ2Vfbm90aWNlLCBcIm91dC1yaWdodFwiKTtcbiAgICAgICAgICAgIGRmLmxhYi5VdGlsLmFkZENsYXNzKF9zdGFnZV9ub3RpY2UsIFwib3V0LWxlZnRcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZi5sYWIuVXRpbC5hZGRDbGFzcyhfc3RhZ2Vfbm90aWNlLCBcIm91dC1yaWdodFwiKTtcbiAgICAgICAgICAgIGRmLmxhYi5VdGlsLnJlbW92ZUNsYXNzKF9zdGFnZV9ub3RpY2UsIFwib3V0LWxlZnRcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRTaG93X2JpcnRoZGF5KCkge1xuICAgICAgICBkZi5sYWIuVXRpbC5yZW1vdmVDbGFzcyhfc3RhZ2VfYmlydGhkYXksIFwib3V0LWxlZnRcIik7XG4gICAgICAgIGRmLmxhYi5VdGlsLnJlbW92ZUNsYXNzKF9zdGFnZV9iaXJ0aGRheSwgXCJvdXQtcmlnaHRcIik7XG4gICAgICAgIGRmLmxhYi5VdGlsLmFkZENsYXNzKF9zdGFnZV9iaXJ0aGRheSwgd2luZG93LmRmLndvcmtncm91cC5QcmVzZXQuY2xhc3NfbmFtZS5zaG93SW4pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldEhpZGVfYmlydGhkYXkoaXNUb0xlZnQpIHtcblxuICAgICAgICBkZi5sYWIuVXRpbC5yZW1vdmVDbGFzcyhfc3RhZ2VfYmlydGhkYXksIHdpbmRvdy5kZi53b3JrZ3JvdXAuUHJlc2V0LmNsYXNzX25hbWUuc2hvd0luKTtcbiAgICAgICAgaWYgKGlzVG9MZWZ0KSB7XG4gICAgICAgICAgICBkZi5sYWIuVXRpbC5yZW1vdmVDbGFzcyhfc3RhZ2VfYmlydGhkYXksIFwib3V0LXJpZ2h0XCIpO1xuICAgICAgICAgICAgZGYubGFiLlV0aWwuYWRkQ2xhc3MoX3N0YWdlX2JpcnRoZGF5LCBcIm91dC1sZWZ0XCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGYubGFiLlV0aWwuYWRkQ2xhc3MoX3N0YWdlX2JpcnRoZGF5LCBcIm91dC1yaWdodFwiKTtcbiAgICAgICAgICAgIGRmLmxhYi5VdGlsLnJlbW92ZUNsYXNzKF9zdGFnZV9iaXJ0aGRheSwgXCJvdXQtbGVmdFwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9zaG93Tm90aWNlX2F1dG8oKSB7XG4gICAgICAgIHN0b3BBdXRvU2hvdygpO1xuICAgICAgICBpZiAoX2lzSGFzTm90aWNlIHx8IF9pc0hhc0JpcnRoZGF5KSB7XG4gICAgICAgICAgICBpZiAoX2lzSGFzTm90aWNlKSBfSURfYXV0b1Nob3cgPSBzZXRUaW1lb3V0KF9zaG93Tm90aWNlLCA2MDApO1xuICAgICAgICAgICAgZWxzZSBpZiAoX2lzSGFzQmlydGhkYXkpIF9JRF9hdXRvU2hvdyA9IHNldFRpbWVvdXQoX3Nob3dCaXJ0aGRheSwgNjAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9kaXNwYXRjaEV2ZW50KCkge1xuICAgICAgICB2YXIgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQod2luZG93LmRmLndvcmtncm91cC5QcmVzZXQuZXZlbnRUeXBlLk9OX0NIQU5HRV9TVEFHRV9JTkZPLCB7XG4gICAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgICAgICBjdXJJbmRleDogX2N1ckluZGV4XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfcmVzZXREYXRhKGpzb25fbm90aWNlLCBqc29uX2JpcnRoZGF5KSB7XG5cbiAgICAgICAgaWYgKCFfaXNIYXNOb3RpY2UgJiYgIV9pc0hhc0JpcnRoZGF5KSBfc2hvd0Nsb2NrKCk7XG4gICAgICAgIHN0YXJ0KGpzb25fbm90aWNlLCBqc29uX2JpcnRoZGF5KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdG9wQXV0b1Nob3coKSB7XG4gICAgICAgIC8vY29uc29sZS5sb2coXCI8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCAgc3RvcEF1dG9TaG93XCIpO1xuICAgICAgICBjbGVhclRpbWVvdXQoX0lEX2F1dG9TaG93KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBpbml0OiBfaW5pdCxcbiAgICAgICAgc2hvd05vdGljZTogX3Nob3dOb3RpY2VfYXV0byxcbiAgICAgICAgcmVzZXREYXRhOiBfcmVzZXREYXRhXG4gICAgfVxufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICB2YXIgc2VjX2NvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2VjLXV0aWxcIik7XHJcblxyXG4gICAgdmFyIENMQVNTX05BTUUgPSBcIlsgTG9naW5VdGlsQ29udHJvbGxlciBdXCI7XHJcblxyXG4gICAgZnVuY3Rpb24gX2luaXQoanNvbl9kb2N1bWVudF91cmwsIGpzb25fbWFpbl91cmwsIGpzb25fdXNlcikge1xyXG4gICAgICAgIF9zZXRVcmwoanNvbl9kb2N1bWVudF91cmwsIGpzb25fbWFpbl91cmwpO1xyXG4gICAgICAgIF9zZXREb2NOdW0oanNvbl91c2VyKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfc2V0RG9jTnVtKGpzb25fdXNlcikge1xyXG5cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhDTEFTU19OQU1FICsgXCIgXCIgKyBcImpzb25fZG9jdW1lbnRfdXJsIDogXCIgICwgIGpzb25fZG9jdW1lbnRfdXJsKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhDTEFTU19OQU1FICsgXCIgXCIgKyBcImpzb25fbWFpbl91cmwgOiBcIiAgLCAganNvbl9tYWluX3VybCk7XHJcblxyXG4gICAgICAgIHZhciBudW1fZG9jX2FwcHJvdmFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpZF9saW5rX2RvY19hcHByb3ZhbFwiKS5xdWVyeVNlbGVjdG9yKFwiLmRvYy1udW1cIik7XHJcbiAgICAgICAgdmFyIG51bV9kb2NfYXBwcm92YWxfbXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImlkX2xpbmtfZG9jX2FwcHJvdmFsX215XCIpLnF1ZXJ5U2VsZWN0b3IoXCIuZG9jLW51bVwiKTtcclxuICAgICAgICB2YXIgbnVtX2RvY19hcHByb3ZhbF9jYyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaWRfbGlua19kb2NfYXBwcm92YWxfY2NcIikucXVlcnlTZWxlY3RvcihcIi5kb2MtbnVtXCIpO1xyXG5cclxuICAgICAgICBpZiAoanNvbl91c2VyICE9IHVuZGVmaW5lZCAmJiBqc29uX3VzZXIuaXNMb2dnZWRJbikge1xyXG5cclxuXHJcbiAgICAgICAgICAgIGlmIChqc29uX3VzZXIuZG9jdW1lbnRfYXBwcm92YWxfbnVtID4gMCkgbnVtX2RvY19hcHByb3ZhbC50ZXh0Q29udGVudCA9IGpzb25fdXNlci5kb2N1bWVudF9hcHByb3ZhbF9udW0gKyBcIlwiO1xyXG4gICAgICAgICAgICBlbHNlIG51bV9kb2NfYXBwcm92YWwudGV4dENvbnRlbnQgPSBcIjBcIjtcclxuXHJcbiAgICAgICAgICAgIGlmIChqc29uX3VzZXIuZG9jdW1lbnRfYXBwcm92YWxfbXlfbnVtID4gMCkgbnVtX2RvY19hcHByb3ZhbF9teS50ZXh0Q29udGVudCA9IGpzb25fdXNlci5kb2N1bWVudF9hcHByb3ZhbF9teV9udW0gKyBcIlwiO1xyXG4gICAgICAgICAgICBlbHNlIG51bV9kb2NfYXBwcm92YWxfbXkudGV4dENvbnRlbnQgPSBcIjBcIjtcclxuXHJcbiAgICAgICAgICAgIGlmIChqc29uX3VzZXIuZG9jdW1lbnRfYXBwcm92YWxfY2NfbnVtID4gMCkgbnVtX2RvY19hcHByb3ZhbF9jYy50ZXh0Q29udGVudCA9IGpzb25fdXNlci5kb2N1bWVudF9hcHByb3ZhbF9jY19udW0gKyBcIlwiO1xyXG4gICAgICAgICAgICBlbHNlIG51bV9kb2NfYXBwcm92YWxfY2MudGV4dENvbnRlbnQgPSBcIjBcIjtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbnVtX2RvY19hcHByb3ZhbC50ZXh0Q29udGVudCA9IFwiMFwiO1xyXG4gICAgICAgICAgICBudW1fZG9jX2FwcHJvdmFsX215LnRleHRDb250ZW50ID0gXCIwXCI7XHJcbiAgICAgICAgICAgIG51bV9kb2NfYXBwcm92YWxfY2MudGV4dENvbnRlbnQgPSBcIjBcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX3NldFVybChqc29uX2RvY3VtZW50X3VybCwganNvbl9tYWluX3VybCkge1xyXG5cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhDTEFTU19OQU1FICsgXCIgXCIgKyBcImpzb25fZG9jdW1lbnRfdXJsIDogXCIgICwgIGpzb25fZG9jdW1lbnRfdXJsKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhDTEFTU19OQU1FICsgXCIgXCIgKyBcImpzb25fbWFpbl91cmwgOiBcIiAgLCAganNvbl9tYWluX3VybCk7XHJcblxyXG4gICAgICAgIHZhciBsaW5rX2RvY19hcHByb3ZhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaWRfbGlua19kb2NfYXBwcm92YWxcIikucXVlcnlTZWxlY3RvcihcImEuYnRuLWxpbmtcIik7XHJcbiAgICAgICAgdmFyIGxpbmtfZG9jX2FwcHJvdmFsX215ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpZF9saW5rX2RvY19hcHByb3ZhbF9teVwiKS5xdWVyeVNlbGVjdG9yKFwiYS5idG4tbGlua1wiKTtcclxuICAgICAgICB2YXIgbGlua19kb2NfYXBwcm92YWxfY2MgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImlkX2xpbmtfZG9jX2FwcHJvdmFsX2NjXCIpLnF1ZXJ5U2VsZWN0b3IoXCJhLmJ0bi1saW5rXCIpO1xyXG4gICAgICAgIHZhciBsaW5rX21haW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImlkX2xpbmtfbWFpblwiKS5xdWVyeVNlbGVjdG9yKFwiYS5idG4tbGlua1wiKTtcclxuXHJcblxyXG4gICAgICAgIGlmIChqc29uX2RvY3VtZW50X3VybC5hcHByb3ZhbCAhPSB1bmRlZmluZWQgJiYganNvbl9kb2N1bWVudF91cmwuYXBwcm92YWwgIT0gXCJcIikge1xyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKGpzb25fZG9jdW1lbnRfdXJsLmFwcHJvdmFsKTtcclxuXHJcbiAgICAgICAgICAgIGxpbmtfZG9jX2FwcHJvdmFsLmhyZWYgPSBqc29uX2RvY3VtZW50X3VybC5hcHByb3ZhbDtcclxuICAgICAgICAgICAgZGYubGFiLlV0aWwuYWRkQ2xhc3MobGlua19kb2NfYXBwcm92YWwsIFwiYWJsZVwiKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsaW5rX2RvY19hcHByb3ZhbC5ocmVmID0gXCIjXCI7XHJcbiAgICAgICAgICAgIGRmLmxhYi5VdGlsLnJlbW92ZUNsYXNzKGxpbmtfZG9jX2FwcHJvdmFsLCBcImFibGVcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoanNvbl9kb2N1bWVudF91cmwuYXBwcm92YWxfbXkgIT0gdW5kZWZpbmVkICYmIGpzb25fZG9jdW1lbnRfdXJsLmFwcHJvdmFsX215ICE9IFwiXCIpIHtcclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhqc29uX2RvY3VtZW50X3VybC5hcHByb3ZhbF9teSk7XHJcblxyXG4gICAgICAgICAgICBsaW5rX2RvY19hcHByb3ZhbF9teS5ocmVmID0ganNvbl9kb2N1bWVudF91cmwuYXBwcm92YWxfbXk7XHJcbiAgICAgICAgICAgIGRmLmxhYi5VdGlsLmFkZENsYXNzKGxpbmtfZG9jX2FwcHJvdmFsX215LCBcImFibGVcIik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGlua19kb2NfYXBwcm92YWxfbXkuaHJlZiA9IFwiI1wiO1xyXG4gICAgICAgICAgICBkZi5sYWIuVXRpbC5yZW1vdmVDbGFzcyhsaW5rX2RvY19hcHByb3ZhbF9teSwgXCJhYmxlXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGpzb25fZG9jdW1lbnRfdXJsLmFwcHJvdmFsX2NjICE9IHVuZGVmaW5lZCAmJiBqc29uX2RvY3VtZW50X3VybC5hcHByb3ZhbF9jYyAhPSBcIlwiKSB7XHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coanNvbl9kb2N1bWVudF91cmwuYXBwcm92YWxfY2MpO1xyXG5cclxuICAgICAgICAgICAgbGlua19kb2NfYXBwcm92YWxfY2MuaHJlZiA9IGpzb25fZG9jdW1lbnRfdXJsLmFwcHJvdmFsX2NjO1xyXG4gICAgICAgICAgICBkZi5sYWIuVXRpbC5hZGRDbGFzcyhsaW5rX2RvY19hcHByb3ZhbF9jYywgXCJhYmxlXCIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxpbmtfZG9jX2FwcHJvdmFsX2NjLmhyZWYgPSBcIiNcIjtcclxuICAgICAgICAgICAgZGYubGFiLlV0aWwucmVtb3ZlQ2xhc3MobGlua19kb2NfYXBwcm92YWxfY2MsIFwiYWJsZVwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChqc29uX21haW5fdXJsICE9IHVuZGVmaW5lZCAmJiBqc29uX21haW5fdXJsICE9IFwiXCIpIHtcclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhqc29uX21haW5fdXJsKTtcclxuXHJcbiAgICAgICAgICAgIGxpbmtfbWFpbi5ocmVmID0ganNvbl9tYWluX3VybDtcclxuICAgICAgICAgICAgZGYubGFiLlV0aWwuYWRkQ2xhc3MobGlua19tYWluLCBcImFibGVcIik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGlua19tYWluLmhyZWYgPSBcIiNcIjtcclxuICAgICAgICAgICAgZGYubGFiLlV0aWwucmVtb3ZlQ2xhc3MobGlua19tYWluLCBcImFibGVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9yZXNldERhdGEoanNvbl91c2VyKSB7XHJcbiAgICAgICAgX3NldERvY051bShqc29uX3VzZXIpXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBpbml0OiBfaW5pdCxcclxuICAgICAgICByZXNldERhdGE6IF9yZXNldERhdGFcclxuICAgIH1cclxufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHZhciBDTEFTU19OQU1FID0gXCJbIExvZ291dENvbnRyb2xsZXIgXVwiO1xuICAgIHZhciBfZm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpZF9mb3JtX2xvZ291dCcpO1xuICAgIHZhciBUWFRfTE9HT1VUX0NPTVAgPSBcIuuhnOq3uCDslYTsm4Mg65CY7JeI7Iq164uI64ukLlwiO1xuXG4gICAgZnVuY3Rpb24gX2luaXQoKSB7XG4gICAgICAgIF9zZXRVcmwoKTtcbiAgICAgICAgX2Zvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgX29uU3VibWl0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfc2V0VXJsKCkge1xuICAgICAgICB2YXIganNvbl9kYXRhID0gd2luZG93LmRmLndvcmtncm91cC5HbG9iYWxWYXJzLmluZm9EYXRhO1xuICAgICAgICBpZiAoanNvbl9kYXRhLnByZXNldCAhPSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIGpzb25fZGF0YS5wcmVzZXQuanNvbl91cmwgIT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICBqc29uX2RhdGEucHJlc2V0Lmpzb25fdXJsLmxvZ291dCAhPSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgX2Zvcm0uYWN0aW9uID0ganNvbl9kYXRhLnByZXNldC5qc29uX3VybC5sb2dvdXQ7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKENMQVNTX05BTUUgKyBcIiBhY3Rpb24oc2VydmVyKSA6IFwiLCBfZm9ybS5hY3Rpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX2Zvcm0uYWN0aW9uID0gd2luZG93LmRmLndvcmtncm91cC5QcmVzZXQuanNvbl91cmwubG9nb3V0O1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhDTEFTU19OQU1FICsgXCIgYWN0aW9uKGxvY2FsKSA6IFwiLCBfZm9ybS5hY3Rpb24pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX29uU3VibWl0KCRldnQpIHtcbiAgICAgICAgJGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBfc3VibWl0KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX3N1Ym1pdCgpIHtcbiAgICAgICAgbG9hZGluZygpO1xuICAgICAgICBhamF4UG9zdChfZm9ybSwgb25TdWJtaXQpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9hZGluZygpIHtcbiAgICAgICAgZGlzYWJsZV9pbnB1dCgpO1xuXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGlzYWJsZV9pbnB1dCgpIHtcblxuICAgICAgICB2YXIgaW5wdXRzID0gX2Zvcm0ucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQnKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnB1dHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlucHV0c1tpXS5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCBcIlwiKTtcbiAgICAgICAgICAgIGRmLmxhYi5VdGlsLmFkZENsYXNzKGlucHV0c1tpXSwgXCJkaXNhYmxlXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWJsZV9pbnB1dCgpIHtcbiAgICAgICAgdmFyIGlucHV0cyA9IF9mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0Jyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5wdXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpbnB1dHNbaV0ucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIik7XG4gICAgICAgICAgICBkZi5sYWIuVXRpbC5yZW1vdmVDbGFzcyhpbnB1dHNbaV0sIFwiZGlzYWJsZVwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uU3VibWl0KHJlc3BvbnNlKSB7XG4gICAgICAgIC8vY29uc29sZS5sb2cocmVzcG9uc2UpO1xuICAgICAgICBfZGlzcGF0Y2hPbkxvYWQocmVzcG9uc2UpO1xuXG4gICAgICAgIHZhciBzdGF0dXMgPSBnZXRTdGF0dXMocmVzcG9uc2UpO1xuXG4gICAgICAgIGlmIChzdGF0dXMuaXNXYXJuaW5nKSB7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwic3RhdHVzLnRleHQgOiBcIiAsIHN0YXR1cy50ZXh0KTtcbiAgICAgICAgICAgIF9kaXNwYXRjaE9uV2FybmluZyhzdGF0dXMudGV4dCk7XG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHdpbmRvdy5kZi53b3JrZ3JvdXAuUHJlc2V0LmV2ZW50VHlwZS5PTl9DTE9TRV9NT0RBTCwgX29uQ2xvc2VfbW9kYWwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U3RhdHVzKHJlc3BvbnNlKSB7XG5cbiAgICAgICAgdmFyIHN0YXR1cyA9IHtcbiAgICAgICAgICAgIGlzV2FybmluZzogZmFsc2UsXG4gICAgICAgICAgICB0ZXh0OiBcIu2RnOyLnO2VoCDrqZTshLjsp4DqsIAg7JeG7Iq164uI64ukLlwiXG4gICAgICAgIH07XG4gICAgICAgIHZhciBqc29uID0gSlNPTi5wYXJzZShyZXNwb25zZS50YXJnZXQucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgdmFyIHVzZXJfc3RhdHVzX2NvZGUgPSBqc29uLnVzZXIuc3RhdHVzO1xuICAgICAgICBpZiAodXNlcl9zdGF0dXNfY29kZS50b0xvd2VyQ2FzZSgpID09IChcIkwwNFwiKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICB2YXIgbGlzdCA9IGpzb24ucHJlc2V0LnN0YXR1c19saXN0O1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgICAgICAgICAgICAgIHZhciBjb2RlID0gaXRlbS5jb2RlO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNvZGUudG9Mb3dlckNhc2UoKSA9PSB1c2VyX3N0YXR1c19jb2RlLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmlzV2FybmluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy50ZXh0ID0gaXRlbS50ZXh0O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0YXR1cztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfb25DbG9zZV9tb2RhbCgpIHtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih3aW5kb3cuZGYud29ya2dyb3VwLlByZXNldC5ldmVudFR5cGUuT05fQ0xPU0VfTU9EQUwsIF9vbkNsb3NlX21vZGFsKTtcbiAgICAgICAgLy9hbGVydCgnbG9nIG91dCBjb21wJyk7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCh0cnVlKTtcbiAgICAgICAgfSwgMTApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9zaG93TG9nb3V0QnRuKCkge1xuXG4gICAgICAgIGFibGVfaW5wdXQoKTtcbiAgICAgICAgX3NldFVybCgpO1xuXG4gICAgICAgIHZhciBidG5fbG9nb3V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaGVhZGVyIC53cmFwcGVyLWxvZ291dCcpO1xuICAgICAgICBkZi5sYWIuVXRpbC5hZGRDbGFzcyhidG5fbG9nb3V0LCB3aW5kb3cuZGYud29ya2dyb3VwLlByZXNldC5jbGFzc19uYW1lLnNob3dJbik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX2hpZGVMb2dvdXRCdG4oKSB7XG5cbiAgICAgICAgZGlzYWJsZV9pbnB1dCgpO1xuICAgICAgICB2YXIgYnRuX2xvZ291dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWRlciAud3JhcHBlci1sb2dvdXQnKTtcbiAgICAgICAgZGYubGFiLlV0aWwucmVtb3ZlQ2xhc3MoYnRuX2xvZ291dCwgd2luZG93LmRmLndvcmtncm91cC5QcmVzZXQuY2xhc3NfbmFtZS5zaG93SW4pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFqYXhQb3N0KGZvcm0sIGNhbGxiYWNrKSB7XG4gICAgICAgIC8vIENvbGxlY3QgdGhlIGZvcm0gZGF0YSB3aGlsZSBpdGVyYXRpbmcgb3ZlciB0aGUgaW5wdXRzXG4gICAgICAgIHZhciBkYXRhID0ge307XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGZvcm0ubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICAgICAgdmFyIGlucHV0ID0gZm9ybVtpXTtcbiAgICAgICAgICAgIGlmIChpbnB1dC5uYW1lKSB7XG4gICAgICAgICAgICAgICAgZGF0YVtpbnB1dC5uYW1lXSA9IGlucHV0LnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgICAgIG1ldGhvZDogZm9ybS5tZXRob2QsXG4gICAgICAgICAgICBhY3Rpb246IGRmLndvcmtncm91cC5VdGlsLmFkZFBhcmFtVW5pcShmb3JtLmFjdGlvbilcbiAgICAgICAgfTtcblxuICAgICAgICBkZi53b3JrZ3JvdXAuVXRpbC5sb2FkX2pzb24ocGFyYW1zLmFjdGlvbiwgcGFyYW1zLm1ldGhvZCwgY2FsbGJhY2ssIGRhdGEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9kaXNwYXRjaE9uTG9hZChyZXNwb25zZSkge1xuICAgICAgICB2YXIgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQod2luZG93LmRmLndvcmtncm91cC5QcmVzZXQuZXZlbnRUeXBlLk9OX0xPR09VVCwge1xuICAgICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2U6IHJlc3BvbnNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfZGlzcGF0Y2hPbldhcm5pbmcodHh0KSB7XG4gICAgICAgIHZhciBldmVudCA9IG5ldyBDdXN0b21FdmVudCh3aW5kb3cuZGYud29ya2dyb3VwLlByZXNldC5ldmVudFR5cGUuT05fV0FSTklORywge1xuICAgICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogdHh0XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBpbml0OiBfaW5pdCxcbiAgICAgICAgc2hvd0xvZ291dEJ0bjogX3Nob3dMb2dvdXRCdG4sXG4gICAgICAgIGhpZGVMb2dvdXRCdG46IF9oaWRlTG9nb3V0QnRuXG4gICAgfVxufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAvLyBHZXQgdGhlIG1vZGFsXHJcbiAgICB2YXIgX21vZGFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lkX21vZGFsJyk7XHJcbiAgICB2YXIgX21vZGFsX3R4dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpZF9tb2RhbF90eHQnKTtcclxuICAgIHZhciBfYnRuX2Nsb3NlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lkX2J0bl9jbG9zZV9tb2RhbCcpO1xyXG5cclxuICAgIHZhciBfSURfVElNRU9VVCA9IDA7XHJcblxyXG4gICAgZnVuY3Rpb24gX2luaXQoKSB7XHJcbiAgICAgICAgLy8gV2hlbiB0aGUgdXNlciBjbGlja3Mgb24gPHNwYW4+ICh4KSwgY2xvc2UgdGhlIG1vZGFsXHJcbiAgICAgICAgX2J0bl9jbG9zZS5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfY2xvc2VNb2RhbCgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIFdoZW4gdGhlIHVzZXIgY2xpY2tzIGFueXdoZXJlIG91dHNpZGUgb2YgdGhlIG1vZGFsLCBjbG9zZSBpdFxyXG4gICAgICAgIHdpbmRvdy5vbmNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQgPT0gX21vZGFsKSB7XHJcbiAgICAgICAgICAgICAgICBfY2xvc2VNb2RhbCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfc2hvd01vZGFsKHR4dCkge1xyXG4gICAgICAgIGNsZWFyVGltZW91dChfSURfVElNRU9VVCk7XHJcblxyXG4gICAgICAgIF9tb2RhbF90eHQudGV4dENvbnRlbnQgPSB0eHQ7XHJcbiAgICAgICAgZGYubGFiLlV0aWwucmVtb3ZlQ2xhc3MoX21vZGFsLCB3aW5kb3cuZGYud29ya2dyb3VwLlByZXNldC5jbGFzc19uYW1lLnNob3dJbik7XHJcbiAgICAgICAgX21vZGFsLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcblxyXG4gICAgICAgIF9JRF9USU1FT1VUID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGRmLmxhYi5VdGlsLmFkZENsYXNzKF9tb2RhbCwgd2luZG93LmRmLndvcmtncm91cC5QcmVzZXQuY2xhc3NfbmFtZS5zaG93SW4pO1xyXG4gICAgICAgIH0sIDEwMCk7XHJcblxyXG4gICAgICAgIF9tb2RhbC5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLCBcIi0xXCIpO1xyXG4gICAgICAgIF9tb2RhbC5mb2N1cygpO1xyXG4gICAgICAgIF9tb2RhbC5yZW1vdmVBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfY2xvc2VNb2RhbCgpIHtcclxuICAgICAgICBjbGVhclRpbWVvdXQoX0lEX1RJTUVPVVQpO1xyXG4gICAgICAgIGRmLmxhYi5VdGlsLnJlbW92ZUNsYXNzKF9tb2RhbCwgd2luZG93LmRmLndvcmtncm91cC5QcmVzZXQuY2xhc3NfbmFtZS5zaG93SW4pO1xyXG4gICAgICAgIF9tb2RhbC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgX2Rpc3BhdGNoT25Mb2FkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX2Rpc3BhdGNoT25Mb2FkKCkge1xyXG4gICAgICAgIHZhciBldmVudCA9IG5ldyBDdXN0b21FdmVudCh3aW5kb3cuZGYud29ya2dyb3VwLlByZXNldC5ldmVudFR5cGUuT05fQ0xPU0VfTU9EQUwpO1xyXG4gICAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaW5pdDogX2luaXQsXHJcbiAgICAgICAgc2hvd01vZGFsOiBfc2hvd01vZGFsLFxyXG4gICAgICAgIGNsb3NlTW9kYWw6IF9jbG9zZU1vZGFsXHJcbiAgICB9XHJcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICB2YXIgQ0xBU1NfTkFNRSA9IFwiWyBzdGFydFN0b3BDb250cm9sbGVyIF1cIjtcblxuICAgIHZhciBfd3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZWMtbG9naW4gLndyYXBwZXItc3RhcnRTdG9wJyk7XG4gICAgdmFyIF9hcmVhX3N0YXJ0ID0gX3dyYXBwZXIucXVlcnlTZWxlY3RvcignLmFyZWEtc3RhcnQuc3RhcnQnKTtcbiAgICB2YXIgX2FyZWFfc3RvcCA9IF93cmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJy5hcmVhLXN0YXJ0LnN0b3AnKTtcblxuICAgIHZhciBfZm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpZF9zdGFydCcpO1xuICAgIHZhciBfZm9ybV9zdG9wID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lkX3N0b3AnKTtcblxuICAgIHZhciBfaXNDaGVja2luID0gZmFsc2U7XG4gICAgdmFyIF9JRF9JTlRFUlZBTF9CQVIgPSAwO1xuXG4gICAgdmFyIF9qc29uX3VzZXIgPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gX2luaXQoKSB7XG4gICAgICAgIF9zZXRJbmZvKCk7XG4gICAgICAgIF9zZXRVcmwoKTtcbiAgICAgICAgX2Zvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgX29uU3VibWl0KTtcbiAgICAgICAgX2Zvcm1fc3RvcC5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBfb25TdWJtaXRfc3RvcCk7XG5cbiAgICAgICAgZGlzYWJsZV9pbnB1dCgpO1xuICAgICAgICBkaXNhYmxlX2lucHV0X3N0b3AoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfc2V0SW5mbygpIHtcbiAgICAgICAgX2pzb25fdXNlciA9IHdpbmRvdy5kZi53b3JrZ3JvdXAuR2xvYmFsVmFycy5pbmZvRGF0YS51c2VyO1xuXG4gICAgICAgIHZhciB0eHRfbmFtZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaWRfdXNlcl9uYW1lX25ld1wiKTtcbiAgICAgICAgdHh0X25hbWUudGV4dENvbnRlbnQgPSBfanNvbl91c2VyLm5hbWU7XG5cbiAgICAgICAgdmFyIHR4dF9wb3NpdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaWRfdXNlcl9wb3NpdGlvbl9uZXdcIik7XG4gICAgICAgIHR4dF9wb3NpdGlvbi50ZXh0Q29udGVudCA9IF9qc29uX3VzZXIucG9zaXRpb247XG4gICAgICAgIGlmIChfanNvbl91c2VyLmlzTG9nZ2VkSW4pIHtcblxuICAgICAgICAgICAgaWYgKF9qc29uX3VzZXIud29ya0luZm8uaXNXb3JraW5nKSB7XG4gICAgICAgICAgICAgICAgdmFyIHR4dF90aW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpZF9zdGFydF90aW1lXCIpO1xuICAgICAgICAgICAgICAgIHZhciBkYXRlX3N0YXJ0ID0gbmV3IERhdGUoX2pzb25fdXNlci53b3JrSW5mby5zdGFydGVkVGltZSk7XG4gICAgICAgICAgICAgICAgdHh0X3RpbWUudGV4dENvbnRlbnQgPSBkYXRlX3N0YXJ0LmdldEhvdXJzKCkgKyBcIuyLnCBcIiArIHdpbmRvdy5kZi53b3JrZ3JvdXAuVXRpbC5hZGRaZXJvTnVtYmVyKGRhdGVfc3RhcnQuZ2V0TWludXRlcygpKSArIFwi67aEXCI7XG5cbiAgICAgICAgICAgICAgICBfaXNDaGVja2luID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHR4dF93b3JraW5ndGltZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaWRfd29ya2luZ1RpbWVfZm9yVG9kYXlcIik7XG4gICAgICAgICAgICB2YXIgdmFsdWVfd29ya2luZ3RpbWUgPSBnZXRXb3JraW5nVGltZUZyb21NaWNyb1NFQyhfanNvbl91c2VyLndvcmtJbmZvLndvcmtpbmdUaW1lX2ZvclRvZGF5KTtcbiAgICAgICAgICAgIHR4dF93b3JraW5ndGltZS50ZXh0Q29udGVudCA9IHZhbHVlX3dvcmtpbmd0aW1lLmhvdXJzICsgXCLsi5zqsIQgXCIgKyB3aW5kb3cuZGYud29ya2dyb3VwLlV0aWwuYWRkWmVyb051bWJlcih2YWx1ZV93b3JraW5ndGltZS5taW51dGVzKSArIFwi67aEXCI7XG5cbiAgICAgICAgICAgIHR4dF93b3JraW5ndGltZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaWRfd29ya2luZ1RpbWVfZm9yVGhpc1dlZWtcIik7XG4gICAgICAgICAgICB2YWx1ZV93b3JraW5ndGltZSA9IGdldFdvcmtpbmdUaW1lRnJvbU1pY3JvU0VDKF9qc29uX3VzZXIud29ya0luZm8ud29ya2luZ1RpbWVfZm9yVGhpc1dlZWspO1xuICAgICAgICAgICAgdHh0X3dvcmtpbmd0aW1lLnRleHRDb250ZW50ID0gdmFsdWVfd29ya2luZ3RpbWUuaG91cnMgKyBcIuyLnOqwhCBcIiArIHdpbmRvdy5kZi53b3JrZ3JvdXAuVXRpbC5hZGRaZXJvTnVtYmVyKHZhbHVlX3dvcmtpbmd0aW1lLm1pbnV0ZXMpICsgXCLrtoRcIjtcblxuICAgICAgICAgICAgdHh0X3dvcmtpbmd0aW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpZF93b3JraW5nVGltZV9mb3JUaGlzTW9udGhcIik7XG4gICAgICAgICAgICB2YWx1ZV93b3JraW5ndGltZSA9IGdldFdvcmtpbmdUaW1lRnJvbU1pY3JvU0VDKF9qc29uX3VzZXIud29ya0luZm8ud29ya2luZ1RpbWVfZm9yVGhpc01vbnRoKTtcbiAgICAgICAgICAgIHR4dF93b3JraW5ndGltZS50ZXh0Q29udGVudCA9IHZhbHVlX3dvcmtpbmd0aW1lLmhvdXJzICsgXCLsi5zqsIQgXCIgKyB3aW5kb3cuZGYud29ya2dyb3VwLlV0aWwuYWRkWmVyb051bWJlcih2YWx1ZV93b3JraW5ndGltZS5taW51dGVzKSArIFwi67aEXCI7XG5cbiAgICAgICAgICAgIHR4dF93b3JraW5ndGltZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaWRfd29ya2luZ1RpbWVfdG90YWxfb2ZUaGlzTW9udGhcIik7XG4gICAgICAgICAgICB2YWx1ZV93b3JraW5ndGltZSA9IGdldFdvcmtpbmdUaW1lRnJvbU1pY3JvU0VDKF9qc29uX3VzZXIud29ya0luZm8ud29ya2luZ1RpbWVfZm9yVGhpc01vbnRoKTtcbiAgICAgICAgICAgIHR4dF93b3JraW5ndGltZS50ZXh0Q29udGVudCA9IHZhbHVlX3dvcmtpbmd0aW1lLmhvdXJzICsgXCLsi5zqsIRcIjtcbiAgICAgICAgICAgIGlmKHZhbHVlX3dvcmtpbmd0aW1lLm1pbnV0ZXMgPiAwKSB7XG4gICAgICAgICAgICAgICAgdHh0X3dvcmtpbmd0aW1lLnRleHRDb250ZW50ID0gdHh0X3dvcmtpbmd0aW1lLnRleHRDb250ZW50ICsgXCIgXCIgKyB3aW5kb3cuZGYud29ya2dyb3VwLlV0aWwuYWRkWmVyb051bWJlcih2YWx1ZV93b3JraW5ndGltZS5taW51dGVzKSArIFwi67aEXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRXb3JraW5nVGltZUZyb21NaWNyb1NFQyhtaWNyb1NFQyl7XG5cbiAgICAgICAgdmFyIHNlYyA9IChNYXRoLmZsb29yKG1pY3JvU0VDLzEwMDApKSU2MDtcbiAgICAgICAgdmFyIG1pbiA9IE1hdGguZmxvb3IobWljcm9TRUMvMTAwMC82MCklNjA7XG4gICAgICAgIHZhciBob3VyID0gTWF0aC5mbG9vcihtaWNyb1NFQy8xMDAwLzYwLzYwKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaG91cnM6IGhvdXIsXG4gICAgICAgICAgICBtaW51dGVzOiBtaW4sXG4gICAgICAgICAgICBzZWNvbmRzOiBzZWNcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9zZXRVcmwoKSB7XG4gICAgICAgIHZhciBqc29uX2RhdGEgPSB3aW5kb3cuZGYud29ya2dyb3VwLkdsb2JhbFZhcnMuaW5mb0RhdGE7XG4gICAgICAgIGlmIChqc29uX2RhdGEucHJlc2V0ICE9IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAganNvbl9kYXRhLnByZXNldC5qc29uX3VybCAhPSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIGpzb25fZGF0YS5wcmVzZXQuanNvbl91cmwuc3RhcnQgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgIF9mb3JtLmFjdGlvbiA9IGpzb25fZGF0YS5wcmVzZXQuanNvbl91cmwuc3RhcnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfZm9ybS5hY3Rpb24gPSB3aW5kb3cuZGYud29ya2dyb3VwLlByZXNldC5qc29uX3VybC5zdGFydDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChqc29uX2RhdGEucHJlc2V0ICE9IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAganNvbl9kYXRhLnByZXNldC5qc29uX3VybCAhPSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIGpzb25fZGF0YS5wcmVzZXQuanNvbl91cmwuc3RvcCAhPSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgX2Zvcm1fc3RvcC5hY3Rpb24gPSBqc29uX2RhdGEucHJlc2V0Lmpzb25fdXJsLnN0b3A7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfZm9ybV9zdG9wLmFjdGlvbiA9IHdpbmRvdy5kZi53b3JrZ3JvdXAuUHJlc2V0Lmpzb25fdXJsLnN0b3A7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfb25TdWJtaXQoJGV2dCkge1xuICAgICAgICAkZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIF9zdWJtaXQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfc3VibWl0KCkge1xuICAgICAgICBsb2FkaW5nKCk7XG4gICAgICAgIGFqYXhQb3N0KF9mb3JtLCBvbkNvbXBTdWJtaXQpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBfb25TdWJtaXRfc3RvcCgkZXZ0KSB7XG4gICAgICAgICRldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgX3N1Ym1pdF9zdG9wKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX3N1Ym1pdF9zdG9wKCkge1xuICAgICAgICBsb2FkaW5nX2ZvclN0b3AoKTtcbiAgICAgICAgYWpheFBvc3QoX2Zvcm1fc3RvcCwgb25Db21wU3VibWl0X3N0b3ApO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9hZGluZygpIHtcblxuICAgICAgICB2YXIgbG9hZGluZyA9IF9hcmVhX3N0YXJ0LnF1ZXJ5U2VsZWN0b3IoJy51aS1sb2FkaW5nJyk7XG4gICAgICAgIGRmLmxhYi5VdGlsLmFkZENsYXNzKGxvYWRpbmcsIHdpbmRvdy5kZi53b3JrZ3JvdXAuUHJlc2V0LmNsYXNzX25hbWUuc2hvd0luKTtcblxuICAgICAgICBkaXNhYmxlX2lucHV0KCk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBsb2FkaW5nX2ZvclN0b3AoKSB7XG5cbiAgICAgICAgdmFyIGxvYWRpbmcgPSBfYXJlYV9zdG9wLnF1ZXJ5U2VsZWN0b3IoJy51aS1sb2FkaW5nJyk7XG4gICAgICAgIGRmLmxhYi5VdGlsLmFkZENsYXNzKGxvYWRpbmcsIHdpbmRvdy5kZi53b3JrZ3JvdXAuUHJlc2V0LmNsYXNzX25hbWUuc2hvd0luKTtcblxuICAgICAgICBkaXNhYmxlX2lucHV0X3N0b3AoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkaXNhYmxlX2lucHV0KCkge1xuXG4gICAgICAgIHZhciBpbnB1dHMgPSBfZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dCcpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlucHV0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaW5wdXRzW2ldLnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIFwiXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWJsZV9pbnB1dCgpIHtcbiAgICAgICAgdmFyIGlucHV0cyA9IF9mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0Jyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5wdXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpbnB1dHNbaV0ucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkaXNhYmxlX2lucHV0X3N0b3AoKSB7XG4gICAgICAgIHZhciBpbnB1dHMgPSBfZm9ybV9zdG9wLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0Jyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5wdXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpbnB1dHNbaV0uc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhYmxlX2lucHV0X3N0b3AoKSB7XG4gICAgICAgIHZhciBpbnB1dHMgPSBfZm9ybV9zdG9wLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0Jyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5wdXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpbnB1dHNbaV0ucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkNvbXBTdWJtaXQocmVzcG9uc2UpIHtcbiAgICAgICAgdmFyIGxvYWRpbmcgPSBfYXJlYV9zdGFydC5xdWVyeVNlbGVjdG9yKCcudWktbG9hZGluZycpO1xuICAgICAgICBkZi5sYWIuVXRpbC5yZW1vdmVDbGFzcyhsb2FkaW5nLCB3aW5kb3cuZGYud29ya2dyb3VwLlByZXNldC5jbGFzc19uYW1lLnNob3dJbik7XG4gICAgICAgIF9kaXNwYXRjaE9uTG9hZChyZXNwb25zZSk7XG5cbiAgICAgICAgdmFyIHN0YXR1cyA9IGdldFN0YXR1cyhyZXNwb25zZSk7XG5cbiAgICAgICAgaWYgKHN0YXR1cy5pc1dhcm5pbmcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic3RhdHVzLnRleHQgOiBcIiwgc3RhdHVzLnRleHQpO1xuICAgICAgICAgICAgX2Rpc3BhdGNoT25XYXJuaW5nKHN0YXR1cy50ZXh0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uQ29tcFN1Ym1pdF9zdG9wKHJlc3BvbnNlKSB7XG4gICAgICAgIHZhciBsb2FkaW5nID0gX2FyZWFfc3RvcC5xdWVyeVNlbGVjdG9yKCcudWktbG9hZGluZycpO1xuICAgICAgICBkZi5sYWIuVXRpbC5yZW1vdmVDbGFzcyhsb2FkaW5nLCB3aW5kb3cuZGYud29ya2dyb3VwLlByZXNldC5jbGFzc19uYW1lLnNob3dJbik7XG4gICAgICAgIF9kaXNwYXRjaE9uTG9hZF9zdG9wKHJlc3BvbnNlKTtcblxuICAgICAgICB2YXIgc3RhdHVzID0gZ2V0U3RhdHVzKHJlc3BvbnNlKTtcblxuICAgICAgICBpZiAoc3RhdHVzLmlzV2FybmluZykge1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcInN0YXR1cy50ZXh0IDogXCIgLCBzdGF0dXMudGV4dCk7XG4gICAgICAgICAgICBfZGlzcGF0Y2hPbldhcm5pbmcoc3RhdHVzLnRleHQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U3RhdHVzKHJlc3BvbnNlKSB7XG5cbiAgICAgICAgdmFyIHN0YXR1cyA9IHtcbiAgICAgICAgICAgIGlzV2FybmluZzogZmFsc2UsXG4gICAgICAgICAgICB0ZXh0OiBcIu2RnOyLnO2VoCDrqZTshLjsp4DqsIAg7JeG7Iq164uI64ukLlwiXG4gICAgICAgIH07XG4gICAgICAgIHZhciBqc29uID0gSlNPTi5wYXJzZShyZXNwb25zZS50YXJnZXQucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgdmFyIHVzZXJfc3RhdHVzX2NvZGUgPSBqc29uLnVzZXIuc3RhdHVzO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICAvL3VzZXJfc3RhdHVzX2NvZGUudG9Mb3dlckNhc2UoKSA9PSAoXCJDMDBcIikudG9Mb3dlckNhc2UoKSB8fFxuICAgICAgICAgICAgdXNlcl9zdGF0dXNfY29kZS50b0xvd2VyQ2FzZSgpID09IChcIkwwMFwiKS50b0xvd2VyQ2FzZSgpIHx8XG5cbiAgICAgICAgICAgIHVzZXJfc3RhdHVzX2NvZGUudG9Mb3dlckNhc2UoKSA9PSAoXCJDMTBcIikudG9Mb3dlckNhc2UoKSB8fFxuXG4gICAgICAgICAgICB1c2VyX3N0YXR1c19jb2RlLnRvTG93ZXJDYXNlKCkgPT0gKFwiQzAxXCIpLnRvTG93ZXJDYXNlKCkgfHxcbiAgICAgICAgICAgIHVzZXJfc3RhdHVzX2NvZGUudG9Mb3dlckNhc2UoKSA9PSAoXCJDMDJcIikudG9Mb3dlckNhc2UoKSB8fFxuICAgICAgICAgICAgdXNlcl9zdGF0dXNfY29kZS50b0xvd2VyQ2FzZSgpID09IChcIkMwM1wiKS50b0xvd2VyQ2FzZSgpIHx8XG4gICAgICAgICAgICB1c2VyX3N0YXR1c19jb2RlLnRvTG93ZXJDYXNlKCkgPT0gKFwiQzA0XCIpLnRvTG93ZXJDYXNlKCkgfHxcbiAgICAgICAgICAgIHVzZXJfc3RhdHVzX2NvZGUudG9Mb3dlckNhc2UoKSA9PSAoXCJDMDVcIikudG9Mb3dlckNhc2UoKSB8fFxuXG4gICAgICAgICAgICB1c2VyX3N0YXR1c19jb2RlLnRvTG93ZXJDYXNlKCkgPT0gKFwiQzExXCIpLnRvTG93ZXJDYXNlKCkgfHxcbiAgICAgICAgICAgIHVzZXJfc3RhdHVzX2NvZGUudG9Mb3dlckNhc2UoKSA9PSAoXCJDMTJcIikudG9Mb3dlckNhc2UoKSB8fFxuICAgICAgICAgICAgdXNlcl9zdGF0dXNfY29kZS50b0xvd2VyQ2FzZSgpID09IChcIkMxM1wiKS50b0xvd2VyQ2FzZSgpIHx8XG4gICAgICAgICAgICB1c2VyX3N0YXR1c19jb2RlLnRvTG93ZXJDYXNlKCkgPT0gKFwiQzE0XCIpLnRvTG93ZXJDYXNlKCkgfHxcbiAgICAgICAgICAgIHVzZXJfc3RhdHVzX2NvZGUudG9Mb3dlckNhc2UoKSA9PSAoXCJDMTVcIikudG9Mb3dlckNhc2UoKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHZhciBsaXN0ID0ganNvbi5wcmVzZXQuc3RhdHVzX2xpc3Q7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgICAgICAgICAgICAgdmFyIGNvZGUgPSBpdGVtLmNvZGU7XG5cbiAgICAgICAgICAgICAgICBpZiAoY29kZS50b0xvd2VyQ2FzZSgpID09IHVzZXJfc3RhdHVzX2NvZGUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuaXNXYXJuaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLnRleHQgPSBpdGVtLnRleHQ7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhdHVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9kaXNwYXRjaE9uV2FybmluZyh0eHQpIHtcbiAgICAgICAgdmFyIGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KHdpbmRvdy5kZi53b3JrZ3JvdXAuUHJlc2V0LmV2ZW50VHlwZS5PTl9XQVJOSU5HLCB7XG4gICAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiB0eHRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9kaXNwYXRjaE9uTG9hZChyZXNwb25zZSkge1xuICAgICAgICB2YXIgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQod2luZG93LmRmLndvcmtncm91cC5QcmVzZXQuZXZlbnRUeXBlLk9OX1NUQVJULCB7XG4gICAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgICAgICByZXNwb25zZTogcmVzcG9uc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9kaXNwYXRjaE9uTG9hZF9zdG9wKHJlc3BvbnNlKSB7XG4gICAgICAgIHZhciBldmVudCA9IG5ldyBDdXN0b21FdmVudCh3aW5kb3cuZGYud29ya2dyb3VwLlByZXNldC5ldmVudFR5cGUuT05fU1RPUCwge1xuICAgICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2U6IHJlc3BvbnNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfc2hvd1N0YXJ0QnRuKCkge1xuXG4gICAgICAgIF9zZXRJbmZvKCk7XG4gICAgICAgIF9zZXRVcmwoKTtcblxuICAgICAgICBkZi5sYWIuVXRpbC5hZGRDbGFzcyhfd3JhcHBlciwgd2luZG93LmRmLndvcmtncm91cC5QcmVzZXQuY2xhc3NfbmFtZS5zaG93SW4pO1xuICAgICAgICBhYmxlX2lucHV0KCk7XG4gICAgICAgIGRpc2FibGVfaW5wdXRfc3RvcCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9oaWRlU3RhcnRCdG4oKSB7XG4gICAgICAgIF9yZXNldExheW91dCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9zaG93U3RvcEJ0bigpIHtcblxuICAgICAgICBfc2V0SW5mbygpO1xuICAgICAgICBfc2V0VXJsKCk7XG5cbiAgICAgICAgZGYubGFiLlV0aWwuYWRkQ2xhc3MoX3dyYXBwZXIsICdjaGVja2VkJyk7XG4gICAgICAgIGRpc2FibGVfaW5wdXQoKTtcbiAgICAgICAgYWJsZV9pbnB1dF9zdG9wKCk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBfaGlkZVN0b3BCdG4oKSB7XG5cbiAgICAgICAgX3NldEluZm8oKTtcbiAgICAgICAgX3NldFVybCgpO1xuXG4gICAgICAgIGRmLmxhYi5VdGlsLnJlbW92ZUNsYXNzKF93cmFwcGVyLCAnY2hlY2tlZCcpO1xuICAgICAgICBkaXNhYmxlX2lucHV0X3N0b3AoKTtcbiAgICAgICAgYWJsZV9pbnB1dCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9yZXNldExheW91dCgpIHtcbiAgICAgICAgZGYubGFiLlV0aWwucmVtb3ZlQ2xhc3MoX3dyYXBwZXIsIHdpbmRvdy5kZi53b3JrZ3JvdXAuUHJlc2V0LmNsYXNzX25hbWUuc2hvd0luKTtcbiAgICAgICAgZGYubGFiLlV0aWwucmVtb3ZlQ2xhc3MoX3dyYXBwZXIsICdjaGVja2VkJyk7XG4gICAgICAgIGRmLmxhYi5VdGlsLnJlbW92ZUNsYXNzKF93cmFwcGVyLCAnY2hlY2tlZG91dCcpO1xuXG4gICAgICAgIGRpc2FibGVfaW5wdXQoKTtcbiAgICAgICAgZGlzYWJsZV9pbnB1dF9zdG9wKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWpheFBvc3QoZm9ybSwgY2FsbGJhY2spIHtcbiAgICAgICAgLy8gQ29sbGVjdCB0aGUgZm9ybSBkYXRhIHdoaWxlIGl0ZXJhdGluZyBvdmVyIHRoZSBpbnB1dHNcbiAgICAgICAgdmFyIGRhdGEgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gZm9ybS5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgICAgICB2YXIgaW5wdXQgPSBmb3JtW2ldO1xuICAgICAgICAgICAgaWYgKGlucHV0Lm5hbWUpIHtcbiAgICAgICAgICAgICAgICBkYXRhW2lucHV0Lm5hbWVdID0gaW5wdXQudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICAgICAgbWV0aG9kOiBmb3JtLm1ldGhvZCxcbiAgICAgICAgICAgIGFjdGlvbjogZGYud29ya2dyb3VwLlV0aWwuYWRkUGFyYW1VbmlxKGZvcm0uYWN0aW9uKVxuICAgICAgICB9O1xuICAgICAgICAvL1xuICAgICAgICAvLyBpZihpc1Rlc3RfcmUpIHtcbiAgICAgICAgLy8gICAgIHBhcmFtcy5hY3Rpb24gPSBcImFzc2V0c19sb2dpbi90ZW1wL2RmX2luZm9fZGF0YV8wM19jaGVja291dF9yZS5qc29uXCI7XG4gICAgICAgIC8vIH1cblxuICAgICAgICBkZi53b3JrZ3JvdXAuVXRpbC5sb2FkX2pzb24ocGFyYW1zLmFjdGlvbiwgcGFyYW1zLm1ldGhvZCwgY2FsbGJhY2ssIGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGluaXQ6IF9pbml0LFxuICAgICAgICBzaG93U3RhcnRCdG46IF9zaG93U3RhcnRCdG4sXG4gICAgICAgIGhpZGVTdGFydEJ0bjogX2hpZGVTdGFydEJ0bixcbiAgICAgICAgc2hvd1N0b3BCdG46IF9zaG93U3RvcEJ0bixcbiAgICAgICAgaGlkZVN0b3BCdG46IF9oaWRlU3RvcEJ0blxuICAgIH1cbn07XG4iLCJ2YXIgc3RhcnRPZkRheSA9IHJlcXVpcmUoJy4uL3N0YXJ0X29mX2RheS9pbmRleC5qcycpXG5cbnZhciBNSUxMSVNFQ09ORFNfSU5fTUlOVVRFID0gNjAwMDBcbnZhciBNSUxMSVNFQ09ORFNfSU5fREFZID0gODY0MDAwMDBcblxuLyoqXG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgbnVtYmVyIG9mIGNhbGVuZGFyIGRheXMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIG51bWJlciBvZiBjYWxlbmRhciBkYXlzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxTdHJpbmd8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBsYXRlciBkYXRlXG4gKiBAcGFyYW0ge0RhdGV8U3RyaW5nfE51bWJlcn0gZGF0ZVJpZ2h0IC0gdGhlIGVhcmxpZXIgZGF0ZVxuICogQHJldHVybnMge051bWJlcn0gdGhlIG51bWJlciBvZiBjYWxlbmRhciBkYXlzXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEhvdyBtYW55IGNhbGVuZGFyIGRheXMgYXJlIGJldHdlZW5cbiAqIC8vIDIgSnVseSAyMDExIDIzOjAwOjAwIGFuZCAyIEp1bHkgMjAxMiAwMDowMDowMD9cbiAqIHZhciByZXN1bHQgPSBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMoXG4gKiAgIG5ldyBEYXRlKDIwMTIsIDYsIDIsIDAsIDApLFxuICogICBuZXcgRGF0ZSgyMDExLCA2LCAyLCAyMywgMClcbiAqIClcbiAqIC8vPT4gMzY2XG4gKi9cbmZ1bmN0aW9uIGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyAoZGlydHlEYXRlTGVmdCwgZGlydHlEYXRlUmlnaHQpIHtcbiAgdmFyIHN0YXJ0T2ZEYXlMZWZ0ID0gc3RhcnRPZkRheShkaXJ0eURhdGVMZWZ0KVxuICB2YXIgc3RhcnRPZkRheVJpZ2h0ID0gc3RhcnRPZkRheShkaXJ0eURhdGVSaWdodClcblxuICB2YXIgdGltZXN0YW1wTGVmdCA9IHN0YXJ0T2ZEYXlMZWZ0LmdldFRpbWUoKSAtXG4gICAgc3RhcnRPZkRheUxlZnQuZ2V0VGltZXpvbmVPZmZzZXQoKSAqIE1JTExJU0VDT05EU19JTl9NSU5VVEVcbiAgdmFyIHRpbWVzdGFtcFJpZ2h0ID0gc3RhcnRPZkRheVJpZ2h0LmdldFRpbWUoKSAtXG4gICAgc3RhcnRPZkRheVJpZ2h0LmdldFRpbWV6b25lT2Zmc2V0KCkgKiBNSUxMSVNFQ09ORFNfSU5fTUlOVVRFXG5cbiAgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIGRheSBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIGRheSBvZiB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpXG4gIHJldHVybiBNYXRoLnJvdW5kKCh0aW1lc3RhbXBMZWZ0IC0gdGltZXN0YW1wUmlnaHQpIC8gTUlMTElTRUNPTkRTX0lOX0RBWSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXNcbiIsInZhciBnZXREYXlPZlllYXIgPSByZXF1aXJlKCcuLi9nZXRfZGF5X29mX3llYXIvaW5kZXguanMnKVxudmFyIGdldElTT1dlZWsgPSByZXF1aXJlKCcuLi9nZXRfaXNvX3dlZWsvaW5kZXguanMnKVxudmFyIGdldElTT1llYXIgPSByZXF1aXJlKCcuLi9nZXRfaXNvX3llYXIvaW5kZXguanMnKVxudmFyIHBhcnNlID0gcmVxdWlyZSgnLi4vcGFyc2UvaW5kZXguanMnKVxudmFyIGlzVmFsaWQgPSByZXF1aXJlKCcuLi9pc192YWxpZC9pbmRleC5qcycpXG52YXIgZW5Mb2NhbGUgPSByZXF1aXJlKCcuLi9sb2NhbGUvZW4vaW5kZXguanMnKVxuXG4vKipcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgRm9ybWF0IHRoZSBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBmb3JtYXR0ZWQgZGF0ZSBzdHJpbmcgaW4gdGhlIGdpdmVuIGZvcm1hdC5cbiAqXG4gKiBBY2NlcHRlZCB0b2tlbnM6XG4gKiB8IFVuaXQgICAgICAgICAgICAgICAgICAgIHwgVG9rZW4gfCBSZXN1bHQgZXhhbXBsZXMgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8IE1vbnRoICAgICAgICAgICAgICAgICAgIHwgTSAgICAgfCAxLCAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgTW8gICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU0gICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NICAgfCBKYW4sIEZlYiwgLi4uLCBEZWMgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NTSAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciB8XG4gKiB8IFF1YXJ0ZXIgICAgICAgICAgICAgICAgIHwgUSAgICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgUW8gICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICB8XG4gKiB8IERheSBvZiBtb250aCAgICAgICAgICAgIHwgRCAgICAgfCAxLCAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgRG8gICAgfCAxc3QsIDJuZCwgLi4uLCAzMXN0ICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgREQgICAgfCAwMSwgMDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICB8XG4gKiB8IERheSBvZiB5ZWFyICAgICAgICAgICAgIHwgREREICAgfCAxLCAyLCAuLi4sIDM2NiAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgREREbyAgfCAxc3QsIDJuZCwgLi4uLCAzNjZ0aCAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgRERERCAgfCAwMDEsIDAwMiwgLi4uLCAzNjYgICAgICAgICAgICAgICB8XG4gKiB8IERheSBvZiB3ZWVrICAgICAgICAgICAgIHwgZCAgICAgfCAwLCAxLCAuLi4sIDYgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgZG8gICAgfCAwdGgsIDFzdCwgLi4uLCA2dGggICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgZGQgICAgfCBTdSwgTW8sIC4uLiwgU2EgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgZGRkICAgfCBTdW4sIE1vbiwgLi4uLCBTYXQgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgZGRkZCAgfCBTdW5kYXksIE1vbmRheSwgLi4uLCBTYXR1cmRheSAgICB8XG4gKiB8IERheSBvZiBJU08gd2VlayAgICAgICAgIHwgRSAgICAgfCAxLCAyLCAuLi4sIDcgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IElTTyB3ZWVrICAgICAgICAgICAgICAgIHwgVyAgICAgfCAxLCAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgV28gICAgfCAxc3QsIDJuZCwgLi4uLCA1M3JkICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgV1cgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICB8XG4gKiB8IFllYXIgICAgICAgICAgICAgICAgICAgIHwgWVkgICAgfCAwMCwgMDEsIC4uLiwgOTkgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWSAgfCAxOTAwLCAxOTAxLCAuLi4sIDIwOTkgICAgICAgICAgICB8XG4gKiB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyIHwgR0cgICAgfCAwMCwgMDEsIC4uLiwgOTkgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHRyAgfCAxOTAwLCAxOTAxLCAuLi4sIDIwOTkgICAgICAgICAgICB8XG4gKiB8IEFNL1BNICAgICAgICAgICAgICAgICAgIHwgQSAgICAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgYSAgICAgfCBhbSwgcG0gICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWEgICAgfCBhLm0uLCBwLm0uICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IEhvdXIgICAgICAgICAgICAgICAgICAgIHwgSCAgICAgfCAwLCAxLCAuLi4gMjMgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgSEggICAgfCAwMCwgMDEsIC4uLiAyMyAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgaCAgICAgfCAxLCAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgaGggICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICB8XG4gKiB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgIHwgbSAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW0gICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICB8XG4gKiB8IFNlY29uZCAgICAgICAgICAgICAgICAgIHwgcyAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgc3MgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICB8XG4gKiB8IDEvMTAgb2Ygc2Vjb25kICAgICAgICAgIHwgUyAgICAgfCAwLCAxLCAuLi4sIDkgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IDEvMTAwIG9mIHNlY29uZCAgICAgICAgIHwgU1MgICAgfCAwMCwgMDEsIC4uLiwgOTkgICAgICAgICAgICAgICAgICB8XG4gKiB8IE1pbGxpc2Vjb25kICAgICAgICAgICAgIHwgU1NTICAgfCAwMDAsIDAwMSwgLi4uLCA5OTkgICAgICAgICAgICAgICB8XG4gKiB8IFRpbWV6b25lICAgICAgICAgICAgICAgIHwgWiAgICAgfCAtMDE6MDAsICswMDowMCwgLi4uICsxMjowMCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgWlogICAgfCAtMDEwMCwgKzAwMDAsIC4uLiwgKzEyMDAgICAgICAgICB8XG4gKiB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgIHwgWCAgICAgfCA1MTI5Njk1MjAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IE1pbGxpc2Vjb25kcyB0aW1lc3RhbXAgIHwgeCAgICAgfCA1MTI5Njk1MjA5MDAgICAgICAgICAgICAgICAgICAgICB8XG4gKlxuICogVGhlIGNoYXJhY3RlcnMgd3JhcHBlZCBpbiBzcXVhcmUgYnJhY2tldHMgYXJlIGVzY2FwZWQuXG4gKlxuICogVGhlIHJlc3VsdCBtYXkgdmFyeSBieSBsb2NhbGUuXG4gKlxuICogQHBhcmFtIHtEYXRlfFN0cmluZ3xOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHBhcmFtIHtTdHJpbmd9IFtmb3JtYXQ9J1lZWVktTU0tRERUSEg6bW06c3MuU1NTWiddIC0gdGhlIHN0cmluZyBvZiB0b2tlbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSB0aGUgb2JqZWN0IHdpdGggb3B0aW9uc1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmxvY2FsZT1lbkxvY2FsZV0gLSB0aGUgbG9jYWxlIG9iamVjdFxuICogQHJldHVybnMge1N0cmluZ30gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZ1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXByZXNlbnQgMTEgRmVicnVhcnkgMjAxNCBpbiBtaWRkbGUtZW5kaWFuIGZvcm1hdDpcbiAqIHZhciByZXN1bHQgPSBmb3JtYXQoXG4gKiAgIG5ldyBEYXRlKDIwMTQsIDEsIDExKSxcbiAqICAgJ01NL0REL1lZWVknXG4gKiApXG4gKiAvLz0+ICcwMi8xMS8yMDE0J1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXByZXNlbnQgMiBKdWx5IDIwMTQgaW4gRXNwZXJhbnRvOlxuICogdmFyIGVvTG9jYWxlID0gcmVxdWlyZSgnZGF0ZS1mbnMvbG9jYWxlL2VvJylcbiAqIHZhciByZXN1bHQgPSBmb3JtYXQoXG4gKiAgIG5ldyBEYXRlKDIwMTQsIDYsIDIpLFxuICogICAnRG8gW2RlXSBNTU1NIFlZWVknLFxuICogICB7bG9jYWxlOiBlb0xvY2FsZX1cbiAqIClcbiAqIC8vPT4gJzItYSBkZSBqdWxpbyAyMDE0J1xuICovXG5mdW5jdGlvbiBmb3JtYXQgKGRpcnR5RGF0ZSwgZGlydHlGb3JtYXRTdHIsIGRpcnR5T3B0aW9ucykge1xuICB2YXIgZm9ybWF0U3RyID0gZGlydHlGb3JtYXRTdHIgPyBTdHJpbmcoZGlydHlGb3JtYXRTdHIpIDogJ1lZWVktTU0tRERUSEg6bW06c3MuU1NTWidcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge31cblxuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGVcbiAgdmFyIGxvY2FsZUZvcm1hdHRlcnMgPSBlbkxvY2FsZS5mb3JtYXQuZm9ybWF0dGVyc1xuICB2YXIgZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCA9IGVuTG9jYWxlLmZvcm1hdC5mb3JtYXR0aW5nVG9rZW5zUmVnRXhwXG4gIGlmIChsb2NhbGUgJiYgbG9jYWxlLmZvcm1hdCAmJiBsb2NhbGUuZm9ybWF0LmZvcm1hdHRlcnMpIHtcbiAgICBsb2NhbGVGb3JtYXR0ZXJzID0gbG9jYWxlLmZvcm1hdC5mb3JtYXR0ZXJzXG5cbiAgICBpZiAobG9jYWxlLmZvcm1hdC5mb3JtYXR0aW5nVG9rZW5zUmVnRXhwKSB7XG4gICAgICBmb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gbG9jYWxlLmZvcm1hdC5mb3JtYXR0aW5nVG9rZW5zUmVnRXhwXG4gICAgfVxuICB9XG5cbiAgdmFyIGRhdGUgPSBwYXJzZShkaXJ0eURhdGUpXG5cbiAgaWYgKCFpc1ZhbGlkKGRhdGUpKSB7XG4gICAgcmV0dXJuICdJbnZhbGlkIERhdGUnXG4gIH1cblxuICB2YXIgZm9ybWF0Rm4gPSBidWlsZEZvcm1hdEZuKGZvcm1hdFN0ciwgbG9jYWxlRm9ybWF0dGVycywgZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cClcblxuICByZXR1cm4gZm9ybWF0Rm4oZGF0ZSlcbn1cblxudmFyIGZvcm1hdHRlcnMgPSB7XG4gIC8vIE1vbnRoOiAxLCAyLCAuLi4sIDEyXG4gICdNJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRNb250aCgpICsgMVxuICB9LFxuXG4gIC8vIE1vbnRoOiAwMSwgMDIsIC4uLiwgMTJcbiAgJ01NJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0TW9udGgoKSArIDEsIDIpXG4gIH0sXG5cbiAgLy8gUXVhcnRlcjogMSwgMiwgMywgNFxuICAnUSc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIE1hdGguY2VpbCgoZGF0ZS5nZXRNb250aCgpICsgMSkgLyAzKVxuICB9LFxuXG4gIC8vIERheSBvZiBtb250aDogMSwgMiwgLi4uLCAzMVxuICAnRCc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0RGF0ZSgpXG4gIH0sXG5cbiAgLy8gRGF5IG9mIG1vbnRoOiAwMSwgMDIsIC4uLiwgMzFcbiAgJ0REJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0RGF0ZSgpLCAyKVxuICB9LFxuXG4gIC8vIERheSBvZiB5ZWFyOiAxLCAyLCAuLi4sIDM2NlxuICAnREREJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gZ2V0RGF5T2ZZZWFyKGRhdGUpXG4gIH0sXG5cbiAgLy8gRGF5IG9mIHllYXI6IDAwMSwgMDAyLCAuLi4sIDM2NlxuICAnRERERCc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhnZXREYXlPZlllYXIoZGF0ZSksIDMpXG4gIH0sXG5cbiAgLy8gRGF5IG9mIHdlZWs6IDAsIDEsIC4uLiwgNlxuICAnZCc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0RGF5KClcbiAgfSxcblxuICAvLyBEYXkgb2YgSVNPIHdlZWs6IDEsIDIsIC4uLiwgN1xuICAnRSc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0RGF5KCkgfHwgN1xuICB9LFxuXG4gIC8vIElTTyB3ZWVrOiAxLCAyLCAuLi4sIDUzXG4gICdXJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gZ2V0SVNPV2VlayhkYXRlKVxuICB9LFxuXG4gIC8vIElTTyB3ZWVrOiAwMSwgMDIsIC4uLiwgNTNcbiAgJ1dXJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGdldElTT1dlZWsoZGF0ZSksIDIpXG4gIH0sXG5cbiAgLy8gWWVhcjogMDAsIDAxLCAuLi4sIDk5XG4gICdZWSc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldEZ1bGxZZWFyKCksIDQpLnN1YnN0cigyKVxuICB9LFxuXG4gIC8vIFllYXI6IDE5MDAsIDE5MDEsIC4uLiwgMjA5OVxuICAnWVlZWSc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldEZ1bGxZZWFyKCksIDQpXG4gIH0sXG5cbiAgLy8gSVNPIHdlZWstbnVtYmVyaW5nIHllYXI6IDAwLCAwMSwgLi4uLCA5OVxuICAnR0cnOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHJldHVybiBTdHJpbmcoZ2V0SVNPWWVhcihkYXRlKSkuc3Vic3RyKDIpXG4gIH0sXG5cbiAgLy8gSVNPIHdlZWstbnVtYmVyaW5nIHllYXI6IDE5MDAsIDE5MDEsIC4uLiwgMjA5OVxuICAnR0dHRyc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIGdldElTT1llYXIoZGF0ZSlcbiAgfSxcblxuICAvLyBIb3VyOiAwLCAxLCAuLi4gMjNcbiAgJ0gnOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLmdldEhvdXJzKClcbiAgfSxcblxuICAvLyBIb3VyOiAwMCwgMDEsIC4uLiwgMjNcbiAgJ0hIJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0SG91cnMoKSwgMilcbiAgfSxcblxuICAvLyBIb3VyOiAxLCAyLCAuLi4sIDEyXG4gICdoJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldEhvdXJzKClcbiAgICBpZiAoaG91cnMgPT09IDApIHtcbiAgICAgIHJldHVybiAxMlxuICAgIH0gZWxzZSBpZiAoaG91cnMgPiAxMikge1xuICAgICAgcmV0dXJuIGhvdXJzICUgMTJcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGhvdXJzXG4gICAgfVxuICB9LFxuXG4gIC8vIEhvdXI6IDAxLCAwMiwgLi4uLCAxMlxuICAnaGgnOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZm9ybWF0dGVyc1snaCddKGRhdGUpLCAyKVxuICB9LFxuXG4gIC8vIE1pbnV0ZTogMCwgMSwgLi4uLCA1OVxuICAnbSc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0TWludXRlcygpXG4gIH0sXG5cbiAgLy8gTWludXRlOiAwMCwgMDEsIC4uLiwgNTlcbiAgJ21tJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0TWludXRlcygpLCAyKVxuICB9LFxuXG4gIC8vIFNlY29uZDogMCwgMSwgLi4uLCA1OVxuICAncyc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0U2Vjb25kcygpXG4gIH0sXG5cbiAgLy8gU2Vjb25kOiAwMCwgMDEsIC4uLiwgNTlcbiAgJ3NzJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0U2Vjb25kcygpLCAyKVxuICB9LFxuXG4gIC8vIDEvMTAgb2Ygc2Vjb25kOiAwLCAxLCAuLi4sIDlcbiAgJ1MnOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkgLyAxMDApXG4gIH0sXG5cbiAgLy8gMS8xMDAgb2Ygc2Vjb25kOiAwMCwgMDEsIC4uLiwgOTlcbiAgJ1NTJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKE1hdGguZmxvb3IoZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSAvIDEwKSwgMilcbiAgfSxcblxuICAvLyBNaWxsaXNlY29uZDogMDAwLCAwMDEsIC4uLiwgOTk5XG4gICdTU1MnOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSwgMylcbiAgfSxcblxuICAvLyBUaW1lem9uZTogLTAxOjAwLCArMDA6MDAsIC4uLiArMTI6MDBcbiAgJ1onOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHJldHVybiBmb3JtYXRUaW1lem9uZShkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCksICc6JylcbiAgfSxcblxuICAvLyBUaW1lem9uZTogLTAxMDAsICswMDAwLCAuLi4gKzEyMDBcbiAgJ1paJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUoZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpKVxuICB9LFxuXG4gIC8vIFNlY29uZHMgdGltZXN0YW1wOiA1MTI5Njk1MjBcbiAgJ1gnOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKGRhdGUuZ2V0VGltZSgpIC8gMTAwMClcbiAgfSxcblxuICAvLyBNaWxsaXNlY29uZHMgdGltZXN0YW1wOiA1MTI5Njk1MjA5MDBcbiAgJ3gnOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLmdldFRpbWUoKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJ1aWxkRm9ybWF0Rm4gKGZvcm1hdFN0ciwgbG9jYWxlRm9ybWF0dGVycywgZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCkge1xuICB2YXIgYXJyYXkgPSBmb3JtYXRTdHIubWF0Y2goZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cClcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aFxuXG4gIHZhciBpXG4gIHZhciBmb3JtYXR0ZXJcbiAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgZm9ybWF0dGVyID0gbG9jYWxlRm9ybWF0dGVyc1thcnJheVtpXV0gfHwgZm9ybWF0dGVyc1thcnJheVtpXV1cbiAgICBpZiAoZm9ybWF0dGVyKSB7XG4gICAgICBhcnJheVtpXSA9IGZvcm1hdHRlclxuICAgIH0gZWxzZSB7XG4gICAgICBhcnJheVtpXSA9IHJlbW92ZUZvcm1hdHRpbmdUb2tlbnMoYXJyYXlbaV0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgdmFyIG91dHB1dCA9ICcnXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGFycmF5W2ldIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICAgICAgb3V0cHV0ICs9IGFycmF5W2ldKGRhdGUsIGZvcm1hdHRlcnMpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXRwdXQgKz0gYXJyYXlbaV1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dFxuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUZvcm1hdHRpbmdUb2tlbnMgKGlucHV0KSB7XG4gIGlmIChpbnB1dC5tYXRjaCgvXFxbW1xcc1xcU10vKSkge1xuICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9eXFxbfF0kL2csICcnKVxuICB9XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC9cXFxcL2csICcnKVxufVxuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZSAob2Zmc2V0LCBkZWxpbWV0ZXIpIHtcbiAgZGVsaW1ldGVyID0gZGVsaW1ldGVyIHx8ICcnXG4gIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJ1xuICB2YXIgYWJzT2Zmc2V0ID0gTWF0aC5hYnMob2Zmc2V0KVxuICB2YXIgaG91cnMgPSBNYXRoLmZsb29yKGFic09mZnNldCAvIDYwKVxuICB2YXIgbWludXRlcyA9IGFic09mZnNldCAlIDYwXG4gIHJldHVybiBzaWduICsgYWRkTGVhZGluZ1plcm9zKGhvdXJzLCAyKSArIGRlbGltZXRlciArIGFkZExlYWRpbmdaZXJvcyhtaW51dGVzLCAyKVxufVxuXG5mdW5jdGlvbiBhZGRMZWFkaW5nWmVyb3MgKG51bWJlciwgdGFyZ2V0TGVuZ3RoKSB7XG4gIHZhciBvdXRwdXQgPSBNYXRoLmFicyhudW1iZXIpLnRvU3RyaW5nKClcbiAgd2hpbGUgKG91dHB1dC5sZW5ndGggPCB0YXJnZXRMZW5ndGgpIHtcbiAgICBvdXRwdXQgPSAnMCcgKyBvdXRwdXRcbiAgfVxuICByZXR1cm4gb3V0cHV0XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZm9ybWF0XG4iLCJ2YXIgcGFyc2UgPSByZXF1aXJlKCcuLi9wYXJzZS9pbmRleC5qcycpXG52YXIgc3RhcnRPZlllYXIgPSByZXF1aXJlKCcuLi9zdGFydF9vZl95ZWFyL2luZGV4LmpzJylcbnZhciBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMgPSByZXF1aXJlKCcuLi9kaWZmZXJlbmNlX2luX2NhbGVuZGFyX2RheXMvaW5kZXguanMnKVxuXG4vKipcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSBkYXkgb2YgdGhlIHllYXIgb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIGRheSBvZiB0aGUgeWVhciBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8U3RyaW5nfE51bWJlcn0gZGF0ZSAtIHRoZSBnaXZlbiBkYXRlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgZGF5IG9mIHllYXJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hpY2ggZGF5IG9mIHRoZSB5ZWFyIGlzIDIgSnVseSAyMDE0P1xuICogdmFyIHJlc3VsdCA9IGdldERheU9mWWVhcihuZXcgRGF0ZSgyMDE0LCA2LCAyKSlcbiAqIC8vPT4gMTgzXG4gKi9cbmZ1bmN0aW9uIGdldERheU9mWWVhciAoZGlydHlEYXRlKSB7XG4gIHZhciBkYXRlID0gcGFyc2UoZGlydHlEYXRlKVxuICB2YXIgZGlmZiA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhkYXRlLCBzdGFydE9mWWVhcihkYXRlKSlcbiAgdmFyIGRheU9mWWVhciA9IGRpZmYgKyAxXG4gIHJldHVybiBkYXlPZlllYXJcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXREYXlPZlllYXJcbiIsInZhciBwYXJzZSA9IHJlcXVpcmUoJy4uL3BhcnNlL2luZGV4LmpzJylcbnZhciBzdGFydE9mSVNPV2VlayA9IHJlcXVpcmUoJy4uL3N0YXJ0X29mX2lzb193ZWVrL2luZGV4LmpzJylcbnZhciBzdGFydE9mSVNPWWVhciA9IHJlcXVpcmUoJy4uL3N0YXJ0X29mX2lzb195ZWFyL2luZGV4LmpzJylcblxudmFyIE1JTExJU0VDT05EU19JTl9XRUVLID0gNjA0ODAwMDAwXG5cbi8qKlxuICogQGNhdGVnb3J5IElTTyBXZWVrIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgSVNPIHdlZWsgb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIElTTyB3ZWVrIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyOiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGVcbiAqXG4gKiBAcGFyYW0ge0RhdGV8U3RyaW5nfE51bWJlcn0gZGF0ZSAtIHRoZSBnaXZlbiBkYXRlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgSVNPIHdlZWtcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hpY2ggd2VlayBvZiB0aGUgSVNPLXdlZWsgbnVtYmVyaW5nIHllYXIgaXMgMiBKYW51YXJ5IDIwMDU/XG4gKiB2YXIgcmVzdWx0ID0gZ2V0SVNPV2VlayhuZXcgRGF0ZSgyMDA1LCAwLCAyKSlcbiAqIC8vPT4gNTNcbiAqL1xuZnVuY3Rpb24gZ2V0SVNPV2VlayAoZGlydHlEYXRlKSB7XG4gIHZhciBkYXRlID0gcGFyc2UoZGlydHlEYXRlKVxuICB2YXIgZGlmZiA9IHN0YXJ0T2ZJU09XZWVrKGRhdGUpLmdldFRpbWUoKSAtIHN0YXJ0T2ZJU09ZZWFyKGRhdGUpLmdldFRpbWUoKVxuXG4gIC8vIFJvdW5kIHRoZSBudW1iZXIgb2YgZGF5cyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyXG4gIC8vIGJlY2F1c2UgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaW4gYSB3ZWVrIGlzIG5vdCBjb25zdGFudFxuICAvLyAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgd2VlayBvZiB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpXG4gIHJldHVybiBNYXRoLnJvdW5kKGRpZmYgLyBNSUxMSVNFQ09ORFNfSU5fV0VFSykgKyAxXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0SVNPV2Vla1xuIiwidmFyIHBhcnNlID0gcmVxdWlyZSgnLi4vcGFyc2UvaW5kZXguanMnKVxudmFyIHN0YXJ0T2ZJU09XZWVrID0gcmVxdWlyZSgnLi4vc3RhcnRfb2ZfaXNvX3dlZWsvaW5kZXguanMnKVxuXG4vKipcbiAqIEBjYXRlZ29yeSBJU08gV2Vlay1OdW1iZXJpbmcgWWVhciBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBJU08gd2Vlay1udW1iZXJpbmcgeWVhciBvZiB0aGUgZ2l2ZW4gZGF0ZSxcbiAqIHdoaWNoIGFsd2F5cyBzdGFydHMgMyBkYXlzIGJlZm9yZSB0aGUgeWVhcidzIGZpcnN0IFRodXJzZGF5LlxuICpcbiAqIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyOiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGVcbiAqXG4gKiBAcGFyYW0ge0RhdGV8U3RyaW5nfE51bWJlcn0gZGF0ZSAtIHRoZSBnaXZlbiBkYXRlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgSVNPIHdlZWstbnVtYmVyaW5nIHllYXJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hpY2ggSVNPLXdlZWsgbnVtYmVyaW5nIHllYXIgaXMgMiBKYW51YXJ5IDIwMDU/XG4gKiB2YXIgcmVzdWx0ID0gZ2V0SVNPWWVhcihuZXcgRGF0ZSgyMDA1LCAwLCAyKSlcbiAqIC8vPT4gMjAwNFxuICovXG5mdW5jdGlvbiBnZXRJU09ZZWFyIChkaXJ0eURhdGUpIHtcbiAgdmFyIGRhdGUgPSBwYXJzZShkaXJ0eURhdGUpXG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpXG5cbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIgPSBuZXcgRGF0ZSgwKVxuICBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyLnNldEZ1bGxZZWFyKHllYXIgKyAxLCAwLCA0KVxuICBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyLnNldEhvdXJzKDAsIDAsIDAsIDApXG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mSVNPV2Vlayhmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyKVxuXG4gIHZhciBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyID0gbmV3IERhdGUoMClcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRGdWxsWWVhcih5ZWFyLCAwLCA0KVxuICBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyLnNldEhvdXJzKDAsIDAsIDAsIDApXG4gIHZhciBzdGFydE9mVGhpc1llYXIgPSBzdGFydE9mSVNPV2Vlayhmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyKVxuXG4gIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxXG4gIH0gZWxzZSBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZlRoaXNZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHllYXIgLSAxXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRJU09ZZWFyXG4iLCIvKipcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIGFyZ3VtZW50IGFuIGluc3RhbmNlIG9mIERhdGU/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBJcyB0aGUgZ2l2ZW4gYXJndW1lbnQgYW4gaW5zdGFuY2Ugb2YgRGF0ZT9cbiAqXG4gKiBAcGFyYW0geyp9IGFyZ3VtZW50IC0gdGhlIGFyZ3VtZW50IHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGdpdmVuIGFyZ3VtZW50IGlzIGFuIGluc3RhbmNlIG9mIERhdGVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSXMgJ21heW9ubmFpc2UnIGEgRGF0ZT9cbiAqIHZhciByZXN1bHQgPSBpc0RhdGUoJ21heW9ubmFpc2UnKVxuICogLy89PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUgKGFyZ3VtZW50KSB7XG4gIHJldHVybiBhcmd1bWVudCBpbnN0YW5jZW9mIERhdGVcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0RhdGVcbiIsInZhciBpc0RhdGUgPSByZXF1aXJlKCcuLi9pc19kYXRlL2luZGV4LmpzJylcblxuLyoqXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIHZhbGlkP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyBmYWxzZSBpZiBhcmd1bWVudCBpcyBJbnZhbGlkIERhdGUgYW5kIHRydWUgb3RoZXJ3aXNlLlxuICogSW52YWxpZCBEYXRlIGlzIGEgRGF0ZSwgd2hvc2UgdGltZSB2YWx1ZSBpcyBOYU4uXG4gKlxuICogVGltZSB2YWx1ZSBvZiBEYXRlOiBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjkuMS4xXG4gKlxuICogQHBhcmFtIHtEYXRlfSBkYXRlIC0gdGhlIGRhdGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZGF0ZSBpcyB2YWxpZFxuICogQHRocm93cyB7VHlwZUVycm9yfSBhcmd1bWVudCBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIERhdGVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWxpZCBkYXRlOlxuICogdmFyIHJlc3VsdCA9IGlzVmFsaWQobmV3IERhdGUoMjAxNCwgMSwgMzEpKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgaW52YWxpZCBkYXRlOlxuICogdmFyIHJlc3VsdCA9IGlzVmFsaWQobmV3IERhdGUoJycpKVxuICogLy89PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1ZhbGlkIChkaXJ0eURhdGUpIHtcbiAgaWYgKGlzRGF0ZShkaXJ0eURhdGUpKSB7XG4gICAgcmV0dXJuICFpc05hTihkaXJ0eURhdGUpXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcih0b1N0cmluZy5jYWxsKGRpcnR5RGF0ZSkgKyAnIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBEYXRlJylcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVmFsaWRcbiIsInZhciBjb21tb25Gb3JtYXR0ZXJLZXlzID0gW1xuICAnTScsICdNTScsICdRJywgJ0QnLCAnREQnLCAnREREJywgJ0REREQnLCAnZCcsXG4gICdFJywgJ1cnLCAnV1cnLCAnWVknLCAnWVlZWScsICdHRycsICdHR0dHJyxcbiAgJ0gnLCAnSEgnLCAnaCcsICdoaCcsICdtJywgJ21tJyxcbiAgJ3MnLCAnc3MnLCAnUycsICdTUycsICdTU1MnLFxuICAnWicsICdaWicsICdYJywgJ3gnXG5dXG5cbmZ1bmN0aW9uIGJ1aWxkRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCAoZm9ybWF0dGVycykge1xuICB2YXIgZm9ybWF0dGVyS2V5cyA9IFtdXG4gIGZvciAodmFyIGtleSBpbiBmb3JtYXR0ZXJzKSB7XG4gICAgaWYgKGZvcm1hdHRlcnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgZm9ybWF0dGVyS2V5cy5wdXNoKGtleSlcbiAgICB9XG4gIH1cblxuICB2YXIgZm9ybWF0dGluZ1Rva2VucyA9IGNvbW1vbkZvcm1hdHRlcktleXNcbiAgICAuY29uY2F0KGZvcm1hdHRlcktleXMpXG4gICAgLnNvcnQoKVxuICAgIC5yZXZlcnNlKClcbiAgdmFyIGZvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPSBuZXcgUmVnRXhwKFxuICAgICcoXFxcXFtbXlxcXFxbXSpcXFxcXSl8KFxcXFxcXFxcKT8nICsgJygnICsgZm9ybWF0dGluZ1Rva2Vucy5qb2luKCd8JykgKyAnfC4pJywgJ2cnXG4gIClcblxuICByZXR1cm4gZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJ1aWxkRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cFxuIiwiZnVuY3Rpb24gYnVpbGREaXN0YW5jZUluV29yZHNMb2NhbGUgKCkge1xuICB2YXIgZGlzdGFuY2VJbldvcmRzTG9jYWxlID0ge1xuICAgIGxlc3NUaGFuWFNlY29uZHM6IHtcbiAgICAgIG9uZTogJ2xlc3MgdGhhbiBhIHNlY29uZCcsXG4gICAgICBvdGhlcjogJ2xlc3MgdGhhbiB7e2NvdW50fX0gc2Vjb25kcydcbiAgICB9LFxuXG4gICAgeFNlY29uZHM6IHtcbiAgICAgIG9uZTogJzEgc2Vjb25kJyxcbiAgICAgIG90aGVyOiAne3tjb3VudH19IHNlY29uZHMnXG4gICAgfSxcblxuICAgIGhhbGZBTWludXRlOiAnaGFsZiBhIG1pbnV0ZScsXG5cbiAgICBsZXNzVGhhblhNaW51dGVzOiB7XG4gICAgICBvbmU6ICdsZXNzIHRoYW4gYSBtaW51dGUnLFxuICAgICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IG1pbnV0ZXMnXG4gICAgfSxcblxuICAgIHhNaW51dGVzOiB7XG4gICAgICBvbmU6ICcxIG1pbnV0ZScsXG4gICAgICBvdGhlcjogJ3t7Y291bnR9fSBtaW51dGVzJ1xuICAgIH0sXG5cbiAgICBhYm91dFhIb3Vyczoge1xuICAgICAgb25lOiAnYWJvdXQgMSBob3VyJyxcbiAgICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IGhvdXJzJ1xuICAgIH0sXG5cbiAgICB4SG91cnM6IHtcbiAgICAgIG9uZTogJzEgaG91cicsXG4gICAgICBvdGhlcjogJ3t7Y291bnR9fSBob3VycydcbiAgICB9LFxuXG4gICAgeERheXM6IHtcbiAgICAgIG9uZTogJzEgZGF5JyxcbiAgICAgIG90aGVyOiAne3tjb3VudH19IGRheXMnXG4gICAgfSxcblxuICAgIGFib3V0WE1vbnRoczoge1xuICAgICAgb25lOiAnYWJvdXQgMSBtb250aCcsXG4gICAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSBtb250aHMnXG4gICAgfSxcblxuICAgIHhNb250aHM6IHtcbiAgICAgIG9uZTogJzEgbW9udGgnLFxuICAgICAgb3RoZXI6ICd7e2NvdW50fX0gbW9udGhzJ1xuICAgIH0sXG5cbiAgICBhYm91dFhZZWFyczoge1xuICAgICAgb25lOiAnYWJvdXQgMSB5ZWFyJyxcbiAgICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IHllYXJzJ1xuICAgIH0sXG5cbiAgICB4WWVhcnM6IHtcbiAgICAgIG9uZTogJzEgeWVhcicsXG4gICAgICBvdGhlcjogJ3t7Y291bnR9fSB5ZWFycydcbiAgICB9LFxuXG4gICAgb3ZlclhZZWFyczoge1xuICAgICAgb25lOiAnb3ZlciAxIHllYXInLFxuICAgICAgb3RoZXI6ICdvdmVyIHt7Y291bnR9fSB5ZWFycydcbiAgICB9LFxuXG4gICAgYWxtb3N0WFllYXJzOiB7XG4gICAgICBvbmU6ICdhbG1vc3QgMSB5ZWFyJyxcbiAgICAgIG90aGVyOiAnYWxtb3N0IHt7Y291bnR9fSB5ZWFycydcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBsb2NhbGl6ZSAodG9rZW4sIGNvdW50LCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICAgIHZhciByZXN1bHRcbiAgICBpZiAodHlwZW9mIGRpc3RhbmNlSW5Xb3Jkc0xvY2FsZVt0b2tlbl0gPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXN1bHQgPSBkaXN0YW5jZUluV29yZHNMb2NhbGVbdG9rZW5dXG4gICAgfSBlbHNlIGlmIChjb3VudCA9PT0gMSkge1xuICAgICAgcmVzdWx0ID0gZGlzdGFuY2VJbldvcmRzTG9jYWxlW3Rva2VuXS5vbmVcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gZGlzdGFuY2VJbldvcmRzTG9jYWxlW3Rva2VuXS5vdGhlci5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudClcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICAgIGlmIChvcHRpb25zLmNvbXBhcmlzb24gPiAwKSB7XG4gICAgICAgIHJldHVybiAnaW4gJyArIHJlc3VsdFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCArICcgYWdvJ1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbG9jYWxpemU6IGxvY2FsaXplXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBidWlsZERpc3RhbmNlSW5Xb3Jkc0xvY2FsZVxuIiwidmFyIGJ1aWxkRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCA9IHJlcXVpcmUoJy4uLy4uL19saWIvYnVpbGRfZm9ybWF0dGluZ190b2tlbnNfcmVnX2V4cC9pbmRleC5qcycpXG5cbmZ1bmN0aW9uIGJ1aWxkRm9ybWF0TG9jYWxlICgpIHtcbiAgLy8gTm90ZTogaW4gRW5nbGlzaCwgdGhlIG5hbWVzIG9mIGRheXMgb2YgdGhlIHdlZWsgYW5kIG1vbnRocyBhcmUgY2FwaXRhbGl6ZWQuXG4gIC8vIElmIHlvdSBhcmUgbWFraW5nIGEgbmV3IGxvY2FsZSBiYXNlZCBvbiB0aGlzIG9uZSwgY2hlY2sgaWYgdGhlIHNhbWUgaXMgdHJ1ZSBmb3IgdGhlIGxhbmd1YWdlIHlvdSdyZSB3b3JraW5nIG9uLlxuICAvLyBHZW5lcmFsbHksIGZvcm1hdHRlZCBkYXRlcyBzaG91bGQgbG9vayBsaWtlIHRoZXkgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSBzZW50ZW5jZSxcbiAgLy8gZS5nLiBpbiBTcGFuaXNoIGxhbmd1YWdlIHRoZSB3ZWVrZGF5cyBhbmQgbW9udGhzIHNob3VsZCBiZSBpbiB0aGUgbG93ZXJjYXNlLlxuICB2YXIgbW9udGhzM2NoYXIgPSBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJywgJ09jdCcsICdOb3YnLCAnRGVjJ11cbiAgdmFyIG1vbnRoc0Z1bGwgPSBbJ0phbnVhcnknLCAnRmVicnVhcnknLCAnTWFyY2gnLCAnQXByaWwnLCAnTWF5JywgJ0p1bmUnLCAnSnVseScsICdBdWd1c3QnLCAnU2VwdGVtYmVyJywgJ09jdG9iZXInLCAnTm92ZW1iZXInLCAnRGVjZW1iZXInXVxuICB2YXIgd2Vla2RheXMyY2hhciA9IFsnU3UnLCAnTW8nLCAnVHUnLCAnV2UnLCAnVGgnLCAnRnInLCAnU2EnXVxuICB2YXIgd2Vla2RheXMzY2hhciA9IFsnU3VuJywgJ01vbicsICdUdWUnLCAnV2VkJywgJ1RodScsICdGcmknLCAnU2F0J11cbiAgdmFyIHdlZWtkYXlzRnVsbCA9IFsnU3VuZGF5JywgJ01vbmRheScsICdUdWVzZGF5JywgJ1dlZG5lc2RheScsICdUaHVyc2RheScsICdGcmlkYXknLCAnU2F0dXJkYXknXVxuICB2YXIgbWVyaWRpZW1VcHBlcmNhc2UgPSBbJ0FNJywgJ1BNJ11cbiAgdmFyIG1lcmlkaWVtTG93ZXJjYXNlID0gWydhbScsICdwbSddXG4gIHZhciBtZXJpZGllbUZ1bGwgPSBbJ2EubS4nLCAncC5tLiddXG5cbiAgdmFyIGZvcm1hdHRlcnMgPSB7XG4gICAgLy8gTW9udGg6IEphbiwgRmViLCAuLi4sIERlY1xuICAgICdNTU0nOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgcmV0dXJuIG1vbnRoczNjaGFyW2RhdGUuZ2V0TW9udGgoKV1cbiAgICB9LFxuXG4gICAgLy8gTW9udGg6IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyXG4gICAgJ01NTU0nOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgcmV0dXJuIG1vbnRoc0Z1bGxbZGF0ZS5nZXRNb250aCgpXVxuICAgIH0sXG5cbiAgICAvLyBEYXkgb2Ygd2VlazogU3UsIE1vLCAuLi4sIFNhXG4gICAgJ2RkJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgIHJldHVybiB3ZWVrZGF5czJjaGFyW2RhdGUuZ2V0RGF5KCldXG4gICAgfSxcblxuICAgIC8vIERheSBvZiB3ZWVrOiBTdW4sIE1vbiwgLi4uLCBTYXRcbiAgICAnZGRkJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgIHJldHVybiB3ZWVrZGF5czNjaGFyW2RhdGUuZ2V0RGF5KCldXG4gICAgfSxcblxuICAgIC8vIERheSBvZiB3ZWVrOiBTdW5kYXksIE1vbmRheSwgLi4uLCBTYXR1cmRheVxuICAgICdkZGRkJzogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgIHJldHVybiB3ZWVrZGF5c0Z1bGxbZGF0ZS5nZXREYXkoKV1cbiAgICB9LFxuXG4gICAgLy8gQU0sIFBNXG4gICAgJ0EnOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgcmV0dXJuIChkYXRlLmdldEhvdXJzKCkgLyAxMikgPj0gMSA/IG1lcmlkaWVtVXBwZXJjYXNlWzFdIDogbWVyaWRpZW1VcHBlcmNhc2VbMF1cbiAgICB9LFxuXG4gICAgLy8gYW0sIHBtXG4gICAgJ2EnOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgcmV0dXJuIChkYXRlLmdldEhvdXJzKCkgLyAxMikgPj0gMSA/IG1lcmlkaWVtTG93ZXJjYXNlWzFdIDogbWVyaWRpZW1Mb3dlcmNhc2VbMF1cbiAgICB9LFxuXG4gICAgLy8gYS5tLiwgcC5tLlxuICAgICdhYSc6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICByZXR1cm4gKGRhdGUuZ2V0SG91cnMoKSAvIDEyKSA+PSAxID8gbWVyaWRpZW1GdWxsWzFdIDogbWVyaWRpZW1GdWxsWzBdXG4gICAgfVxuICB9XG5cbiAgLy8gR2VuZXJhdGUgb3JkaW5hbCB2ZXJzaW9uIG9mIGZvcm1hdHRlcnM6IE0gLT4gTW8sIEQgLT4gRG8sIGV0Yy5cbiAgdmFyIG9yZGluYWxGb3JtYXR0ZXJzID0gWydNJywgJ0QnLCAnREREJywgJ2QnLCAnUScsICdXJ11cbiAgb3JkaW5hbEZvcm1hdHRlcnMuZm9yRWFjaChmdW5jdGlvbiAoZm9ybWF0dGVyVG9rZW4pIHtcbiAgICBmb3JtYXR0ZXJzW2Zvcm1hdHRlclRva2VuICsgJ28nXSA9IGZ1bmN0aW9uIChkYXRlLCBmb3JtYXR0ZXJzKSB7XG4gICAgICByZXR1cm4gb3JkaW5hbChmb3JtYXR0ZXJzW2Zvcm1hdHRlclRva2VuXShkYXRlKSlcbiAgICB9XG4gIH0pXG5cbiAgcmV0dXJuIHtcbiAgICBmb3JtYXR0ZXJzOiBmb3JtYXR0ZXJzLFxuICAgIGZvcm1hdHRpbmdUb2tlbnNSZWdFeHA6IGJ1aWxkRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cChmb3JtYXR0ZXJzKVxuICB9XG59XG5cbmZ1bmN0aW9uIG9yZGluYWwgKG51bWJlcikge1xuICB2YXIgcmVtMTAwID0gbnVtYmVyICUgMTAwXG4gIGlmIChyZW0xMDAgPiAyMCB8fCByZW0xMDAgPCAxMCkge1xuICAgIHN3aXRjaCAocmVtMTAwICUgMTApIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICdzdCdcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICduZCdcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICdyZCdcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bWJlciArICd0aCdcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBidWlsZEZvcm1hdExvY2FsZVxuIiwidmFyIGJ1aWxkRGlzdGFuY2VJbldvcmRzTG9jYWxlID0gcmVxdWlyZSgnLi9idWlsZF9kaXN0YW5jZV9pbl93b3Jkc19sb2NhbGUvaW5kZXguanMnKVxudmFyIGJ1aWxkRm9ybWF0TG9jYWxlID0gcmVxdWlyZSgnLi9idWlsZF9mb3JtYXRfbG9jYWxlL2luZGV4LmpzJylcblxuLyoqXG4gKiBAY2F0ZWdvcnkgTG9jYWxlc1xuICogQHN1bW1hcnkgRW5nbGlzaCBsb2NhbGUuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkaXN0YW5jZUluV29yZHM6IGJ1aWxkRGlzdGFuY2VJbldvcmRzTG9jYWxlKCksXG4gIGZvcm1hdDogYnVpbGRGb3JtYXRMb2NhbGUoKVxufVxuIiwidmFyIGlzRGF0ZSA9IHJlcXVpcmUoJy4uL2lzX2RhdGUvaW5kZXguanMnKVxuXG52YXIgTUlMTElTRUNPTkRTX0lOX0hPVVIgPSAzNjAwMDAwXG52YXIgTUlMTElTRUNPTkRTX0lOX01JTlVURSA9IDYwMDAwXG52YXIgREVGQVVMVF9BRERJVElPTkFMX0RJR0lUUyA9IDJcblxudmFyIHBhcnNlVG9rZW5EYXRlVGltZURlbGltZXRlciA9IC9bVCBdL1xudmFyIHBhcnNlVG9rZW5QbGFpblRpbWUgPSAvOi9cblxuLy8geWVhciB0b2tlbnNcbnZhciBwYXJzZVRva2VuWVkgPSAvXihcXGR7Mn0pJC9cbnZhciBwYXJzZVRva2Vuc1lZWSA9IFtcbiAgL14oWystXVxcZHsyfSkkLywgLy8gMCBhZGRpdGlvbmFsIGRpZ2l0c1xuICAvXihbKy1dXFxkezN9KSQvLCAvLyAxIGFkZGl0aW9uYWwgZGlnaXRcbiAgL14oWystXVxcZHs0fSkkLyAvLyAyIGFkZGl0aW9uYWwgZGlnaXRzXG5dXG5cbnZhciBwYXJzZVRva2VuWVlZWSA9IC9eKFxcZHs0fSkvXG52YXIgcGFyc2VUb2tlbnNZWVlZWSA9IFtcbiAgL14oWystXVxcZHs0fSkvLCAvLyAwIGFkZGl0aW9uYWwgZGlnaXRzXG4gIC9eKFsrLV1cXGR7NX0pLywgLy8gMSBhZGRpdGlvbmFsIGRpZ2l0XG4gIC9eKFsrLV1cXGR7Nn0pLyAvLyAyIGFkZGl0aW9uYWwgZGlnaXRzXG5dXG5cbi8vIGRhdGUgdG9rZW5zXG52YXIgcGFyc2VUb2tlbk1NID0gL14tKFxcZHsyfSkkL1xudmFyIHBhcnNlVG9rZW5EREQgPSAvXi0/KFxcZHszfSkkL1xudmFyIHBhcnNlVG9rZW5NTUREID0gL14tPyhcXGR7Mn0pLT8oXFxkezJ9KSQvXG52YXIgcGFyc2VUb2tlbld3dyA9IC9eLT9XKFxcZHsyfSkkL1xudmFyIHBhcnNlVG9rZW5Xd3dEID0gL14tP1coXFxkezJ9KS0/KFxcZHsxfSkkL1xuXG4vLyB0aW1lIHRva2Vuc1xudmFyIHBhcnNlVG9rZW5ISCA9IC9eKFxcZHsyfShbLixdXFxkKik/KSQvXG52YXIgcGFyc2VUb2tlbkhITU0gPSAvXihcXGR7Mn0pOj8oXFxkezJ9KFsuLF1cXGQqKT8pJC9cbnZhciBwYXJzZVRva2VuSEhNTVNTID0gL14oXFxkezJ9KTo/KFxcZHsyfSk6PyhcXGR7Mn0oWy4sXVxcZCopPykkL1xuXG4vLyB0aW1lem9uZSB0b2tlbnNcbnZhciBwYXJzZVRva2VuVGltZXpvbmUgPSAvKFtaKy1dLiopJC9cbnZhciBwYXJzZVRva2VuVGltZXpvbmVaID0gL14oWikkL1xudmFyIHBhcnNlVG9rZW5UaW1lem9uZUhIID0gL14oWystXSkoXFxkezJ9KSQvXG52YXIgcGFyc2VUb2tlblRpbWV6b25lSEhNTSA9IC9eKFsrLV0pKFxcZHsyfSk6PyhcXGR7Mn0pJC9cblxuLyoqXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBpdHMgY2xvbmUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgbnVtYmVyLCBpdCBpcyB0cmVhdGVkIGFzIGEgdGltZXN0YW1wLlxuICpcbiAqIElmIGFuIGFyZ3VtZW50IGlzIGEgc3RyaW5nLCB0aGUgZnVuY3Rpb24gdHJpZXMgdG8gcGFyc2UgaXQuXG4gKiBGdW5jdGlvbiBhY2NlcHRzIGNvbXBsZXRlIElTTyA4NjAxIGZvcm1hdHMgYXMgd2VsbCBhcyBwYXJ0aWFsIGltcGxlbWVudGF0aW9ucy5cbiAqIElTTyA4NjAxOiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT184NjAxXG4gKlxuICogSWYgYWxsIGFib3ZlIGZhaWxzLCB0aGUgZnVuY3Rpb24gcGFzc2VzIHRoZSBnaXZlbiBhcmd1bWVudCB0byBEYXRlIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxTdHJpbmd8TnVtYmVyfSBhcmd1bWVudCAtIHRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gdGhlIG9iamVjdCB3aXRoIG9wdGlvbnNcbiAqIEBwYXJhbSB7MCB8IDEgfCAyfSBbb3B0aW9ucy5hZGRpdGlvbmFsRGlnaXRzPTJdIC0gdGhlIGFkZGl0aW9uYWwgbnVtYmVyIG9mIGRpZ2l0cyBpbiB0aGUgZXh0ZW5kZWQgeWVhciBmb3JtYXRcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgcGFyc2VkIGRhdGUgaW4gdGhlIGxvY2FsIHRpbWUgem9uZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDb252ZXJ0IHN0cmluZyAnMjAxNC0wMi0xMVQxMTozMDozMCcgdG8gZGF0ZTpcbiAqIHZhciByZXN1bHQgPSBwYXJzZSgnMjAxNC0wMi0xMVQxMTozMDozMCcpXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBQYXJzZSBzdHJpbmcgJyswMjAxNDEwMScsXG4gKiAvLyBpZiB0aGUgYWRkaXRpb25hbCBudW1iZXIgb2YgZGlnaXRzIGluIHRoZSBleHRlbmRlZCB5ZWFyIGZvcm1hdCBpcyAxOlxuICogdmFyIHJlc3VsdCA9IHBhcnNlKCcrMDIwMTQxMDEnLCB7YWRkaXRpb25hbERpZ2l0czogMX0pXG4gKiAvLz0+IEZyaSBBcHIgMTEgMjAxNCAwMDowMDowMFxuICovXG5mdW5jdGlvbiBwYXJzZSAoYXJndW1lbnQsIGRpcnR5T3B0aW9ucykge1xuICBpZiAoaXNEYXRlKGFyZ3VtZW50KSkge1xuICAgIC8vIFByZXZlbnQgdGhlIGRhdGUgdG8gbG9zZSB0aGUgbWlsbGlzZWNvbmRzIHdoZW4gcGFzc2VkIHRvIG5ldyBEYXRlKCkgaW4gSUUxMFxuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudC5nZXRUaW1lKCkpXG4gIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3VtZW50ICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudClcbiAgfVxuXG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9XG4gIHZhciBhZGRpdGlvbmFsRGlnaXRzID0gb3B0aW9ucy5hZGRpdGlvbmFsRGlnaXRzXG4gIGlmIChhZGRpdGlvbmFsRGlnaXRzID09IG51bGwpIHtcbiAgICBhZGRpdGlvbmFsRGlnaXRzID0gREVGQVVMVF9BRERJVElPTkFMX0RJR0lUU1xuICB9IGVsc2Uge1xuICAgIGFkZGl0aW9uYWxEaWdpdHMgPSBOdW1iZXIoYWRkaXRpb25hbERpZ2l0cylcbiAgfVxuXG4gIHZhciBkYXRlU3RyaW5ncyA9IHNwbGl0RGF0ZVN0cmluZyhhcmd1bWVudClcblxuICB2YXIgcGFyc2VZZWFyUmVzdWx0ID0gcGFyc2VZZWFyKGRhdGVTdHJpbmdzLmRhdGUsIGFkZGl0aW9uYWxEaWdpdHMpXG4gIHZhciB5ZWFyID0gcGFyc2VZZWFyUmVzdWx0LnllYXJcbiAgdmFyIHJlc3REYXRlU3RyaW5nID0gcGFyc2VZZWFyUmVzdWx0LnJlc3REYXRlU3RyaW5nXG5cbiAgdmFyIGRhdGUgPSBwYXJzZURhdGUocmVzdERhdGVTdHJpbmcsIHllYXIpXG5cbiAgaWYgKGRhdGUpIHtcbiAgICB2YXIgdGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKClcbiAgICB2YXIgdGltZSA9IDBcbiAgICB2YXIgb2Zmc2V0XG5cbiAgICBpZiAoZGF0ZVN0cmluZ3MudGltZSkge1xuICAgICAgdGltZSA9IHBhcnNlVGltZShkYXRlU3RyaW5ncy50aW1lKVxuICAgIH1cblxuICAgIGlmIChkYXRlU3RyaW5ncy50aW1lem9uZSkge1xuICAgICAgb2Zmc2V0ID0gcGFyc2VUaW1lem9uZShkYXRlU3RyaW5ncy50aW1lem9uZSlcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZ2V0IG9mZnNldCBhY2N1cmF0ZSB0byBob3VyIGluIHRpbWV6b25lcyB0aGF0IGNoYW5nZSBvZmZzZXRcbiAgICAgIG9mZnNldCA9IG5ldyBEYXRlKHRpbWVzdGFtcCArIHRpbWUpLmdldFRpbWV6b25lT2Zmc2V0KClcbiAgICAgIG9mZnNldCA9IG5ldyBEYXRlKHRpbWVzdGFtcCArIHRpbWUgKyBvZmZzZXQgKiBNSUxMSVNFQ09ORFNfSU5fTUlOVVRFKS5nZXRUaW1lem9uZU9mZnNldCgpXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCArIHRpbWUgKyBvZmZzZXQgKiBNSUxMSVNFQ09ORFNfSU5fTUlOVVRFKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudClcbiAgfVxufVxuXG5mdW5jdGlvbiBzcGxpdERhdGVTdHJpbmcgKGRhdGVTdHJpbmcpIHtcbiAgdmFyIGRhdGVTdHJpbmdzID0ge31cbiAgdmFyIGFycmF5ID0gZGF0ZVN0cmluZy5zcGxpdChwYXJzZVRva2VuRGF0ZVRpbWVEZWxpbWV0ZXIpXG4gIHZhciB0aW1lU3RyaW5nXG5cbiAgaWYgKHBhcnNlVG9rZW5QbGFpblRpbWUudGVzdChhcnJheVswXSkpIHtcbiAgICBkYXRlU3RyaW5ncy5kYXRlID0gbnVsbFxuICAgIHRpbWVTdHJpbmcgPSBhcnJheVswXVxuICB9IGVsc2Uge1xuICAgIGRhdGVTdHJpbmdzLmRhdGUgPSBhcnJheVswXVxuICAgIHRpbWVTdHJpbmcgPSBhcnJheVsxXVxuICB9XG5cbiAgaWYgKHRpbWVTdHJpbmcpIHtcbiAgICB2YXIgdG9rZW4gPSBwYXJzZVRva2VuVGltZXpvbmUuZXhlYyh0aW1lU3RyaW5nKVxuICAgIGlmICh0b2tlbikge1xuICAgICAgZGF0ZVN0cmluZ3MudGltZSA9IHRpbWVTdHJpbmcucmVwbGFjZSh0b2tlblsxXSwgJycpXG4gICAgICBkYXRlU3RyaW5ncy50aW1lem9uZSA9IHRva2VuWzFdXG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGVTdHJpbmdzLnRpbWUgPSB0aW1lU3RyaW5nXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGVTdHJpbmdzXG59XG5cbmZ1bmN0aW9uIHBhcnNlWWVhciAoZGF0ZVN0cmluZywgYWRkaXRpb25hbERpZ2l0cykge1xuICB2YXIgcGFyc2VUb2tlbllZWSA9IHBhcnNlVG9rZW5zWVlZW2FkZGl0aW9uYWxEaWdpdHNdXG4gIHZhciBwYXJzZVRva2VuWVlZWVkgPSBwYXJzZVRva2Vuc1lZWVlZW2FkZGl0aW9uYWxEaWdpdHNdXG5cbiAgdmFyIHRva2VuXG5cbiAgLy8gWVlZWSBvciDCsVlZWVlZXG4gIHRva2VuID0gcGFyc2VUb2tlbllZWVkuZXhlYyhkYXRlU3RyaW5nKSB8fCBwYXJzZVRva2VuWVlZWVkuZXhlYyhkYXRlU3RyaW5nKVxuICBpZiAodG9rZW4pIHtcbiAgICB2YXIgeWVhclN0cmluZyA9IHRva2VuWzFdXG4gICAgcmV0dXJuIHtcbiAgICAgIHllYXI6IHBhcnNlSW50KHllYXJTdHJpbmcsIDEwKSxcbiAgICAgIHJlc3REYXRlU3RyaW5nOiBkYXRlU3RyaW5nLnNsaWNlKHllYXJTdHJpbmcubGVuZ3RoKVxuICAgIH1cbiAgfVxuXG4gIC8vIFlZIG9yIMKxWVlZXG4gIHRva2VuID0gcGFyc2VUb2tlbllZLmV4ZWMoZGF0ZVN0cmluZykgfHwgcGFyc2VUb2tlbllZWS5leGVjKGRhdGVTdHJpbmcpXG4gIGlmICh0b2tlbikge1xuICAgIHZhciBjZW50dXJ5U3RyaW5nID0gdG9rZW5bMV1cbiAgICByZXR1cm4ge1xuICAgICAgeWVhcjogcGFyc2VJbnQoY2VudHVyeVN0cmluZywgMTApICogMTAwLFxuICAgICAgcmVzdERhdGVTdHJpbmc6IGRhdGVTdHJpbmcuc2xpY2UoY2VudHVyeVN0cmluZy5sZW5ndGgpXG4gICAgfVxuICB9XG5cbiAgLy8gSW52YWxpZCBJU08tZm9ybWF0dGVkIHllYXJcbiAgcmV0dXJuIHtcbiAgICB5ZWFyOiBudWxsXG4gIH1cbn1cblxuZnVuY3Rpb24gcGFyc2VEYXRlIChkYXRlU3RyaW5nLCB5ZWFyKSB7XG4gIC8vIEludmFsaWQgSVNPLWZvcm1hdHRlZCB5ZWFyXG4gIGlmICh5ZWFyID09PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHZhciB0b2tlblxuICB2YXIgZGF0ZVxuICB2YXIgbW9udGhcbiAgdmFyIHdlZWtcblxuICAvLyBZWVlZXG4gIGlmIChkYXRlU3RyaW5nLmxlbmd0aCA9PT0gMCkge1xuICAgIGRhdGUgPSBuZXcgRGF0ZSgwKVxuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoeWVhcilcbiAgICByZXR1cm4gZGF0ZVxuICB9XG5cbiAgLy8gWVlZWS1NTVxuICB0b2tlbiA9IHBhcnNlVG9rZW5NTS5leGVjKGRhdGVTdHJpbmcpXG4gIGlmICh0b2tlbikge1xuICAgIGRhdGUgPSBuZXcgRGF0ZSgwKVxuICAgIG1vbnRoID0gcGFyc2VJbnQodG9rZW5bMV0sIDEwKSAtIDFcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHllYXIsIG1vbnRoKVxuICAgIHJldHVybiBkYXRlXG4gIH1cblxuICAvLyBZWVlZLURERCBvciBZWVlZREREXG4gIHRva2VuID0gcGFyc2VUb2tlbkRERC5leGVjKGRhdGVTdHJpbmcpXG4gIGlmICh0b2tlbikge1xuICAgIGRhdGUgPSBuZXcgRGF0ZSgwKVxuICAgIHZhciBkYXlPZlllYXIgPSBwYXJzZUludCh0b2tlblsxXSwgMTApXG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBkYXlPZlllYXIpXG4gICAgcmV0dXJuIGRhdGVcbiAgfVxuXG4gIC8vIFlZWVktTU0tREQgb3IgWVlZWU1NRERcbiAgdG9rZW4gPSBwYXJzZVRva2VuTU1ERC5leGVjKGRhdGVTdHJpbmcpXG4gIGlmICh0b2tlbikge1xuICAgIGRhdGUgPSBuZXcgRGF0ZSgwKVxuICAgIG1vbnRoID0gcGFyc2VJbnQodG9rZW5bMV0sIDEwKSAtIDFcbiAgICB2YXIgZGF5ID0gcGFyc2VJbnQodG9rZW5bMl0sIDEwKVxuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoeWVhciwgbW9udGgsIGRheSlcbiAgICByZXR1cm4gZGF0ZVxuICB9XG5cbiAgLy8gWVlZWS1Xd3cgb3IgWVlZWVd3d1xuICB0b2tlbiA9IHBhcnNlVG9rZW5Xd3cuZXhlYyhkYXRlU3RyaW5nKVxuICBpZiAodG9rZW4pIHtcbiAgICB3ZWVrID0gcGFyc2VJbnQodG9rZW5bMV0sIDEwKSAtIDFcbiAgICByZXR1cm4gZGF5T2ZJU09ZZWFyKHllYXIsIHdlZWspXG4gIH1cblxuICAvLyBZWVlZLVd3dy1EIG9yIFlZWVlXd3dEXG4gIHRva2VuID0gcGFyc2VUb2tlbld3d0QuZXhlYyhkYXRlU3RyaW5nKVxuICBpZiAodG9rZW4pIHtcbiAgICB3ZWVrID0gcGFyc2VJbnQodG9rZW5bMV0sIDEwKSAtIDFcbiAgICB2YXIgZGF5T2ZXZWVrID0gcGFyc2VJbnQodG9rZW5bMl0sIDEwKSAtIDFcbiAgICByZXR1cm4gZGF5T2ZJU09ZZWFyKHllYXIsIHdlZWssIGRheU9mV2VlaylcbiAgfVxuXG4gIC8vIEludmFsaWQgSVNPLWZvcm1hdHRlZCBkYXRlXG4gIHJldHVybiBudWxsXG59XG5cbmZ1bmN0aW9uIHBhcnNlVGltZSAodGltZVN0cmluZykge1xuICB2YXIgdG9rZW5cbiAgdmFyIGhvdXJzXG4gIHZhciBtaW51dGVzXG5cbiAgLy8gaGhcbiAgdG9rZW4gPSBwYXJzZVRva2VuSEguZXhlYyh0aW1lU3RyaW5nKVxuICBpZiAodG9rZW4pIHtcbiAgICBob3VycyA9IHBhcnNlRmxvYXQodG9rZW5bMV0ucmVwbGFjZSgnLCcsICcuJykpXG4gICAgcmV0dXJuIChob3VycyAlIDI0KSAqIE1JTExJU0VDT05EU19JTl9IT1VSXG4gIH1cblxuICAvLyBoaDptbSBvciBoaG1tXG4gIHRva2VuID0gcGFyc2VUb2tlbkhITU0uZXhlYyh0aW1lU3RyaW5nKVxuICBpZiAodG9rZW4pIHtcbiAgICBob3VycyA9IHBhcnNlSW50KHRva2VuWzFdLCAxMClcbiAgICBtaW51dGVzID0gcGFyc2VGbG9hdCh0b2tlblsyXS5yZXBsYWNlKCcsJywgJy4nKSlcbiAgICByZXR1cm4gKGhvdXJzICUgMjQpICogTUlMTElTRUNPTkRTX0lOX0hPVVIgK1xuICAgICAgbWludXRlcyAqIE1JTExJU0VDT05EU19JTl9NSU5VVEVcbiAgfVxuXG4gIC8vIGhoOm1tOnNzIG9yIGhobW1zc1xuICB0b2tlbiA9IHBhcnNlVG9rZW5ISE1NU1MuZXhlYyh0aW1lU3RyaW5nKVxuICBpZiAodG9rZW4pIHtcbiAgICBob3VycyA9IHBhcnNlSW50KHRva2VuWzFdLCAxMClcbiAgICBtaW51dGVzID0gcGFyc2VJbnQodG9rZW5bMl0sIDEwKVxuICAgIHZhciBzZWNvbmRzID0gcGFyc2VGbG9hdCh0b2tlblszXS5yZXBsYWNlKCcsJywgJy4nKSlcbiAgICByZXR1cm4gKGhvdXJzICUgMjQpICogTUlMTElTRUNPTkRTX0lOX0hPVVIgK1xuICAgICAgbWludXRlcyAqIE1JTExJU0VDT05EU19JTl9NSU5VVEUgK1xuICAgICAgc2Vjb25kcyAqIDEwMDBcbiAgfVxuXG4gIC8vIEludmFsaWQgSVNPLWZvcm1hdHRlZCB0aW1lXG4gIHJldHVybiBudWxsXG59XG5cbmZ1bmN0aW9uIHBhcnNlVGltZXpvbmUgKHRpbWV6b25lU3RyaW5nKSB7XG4gIHZhciB0b2tlblxuICB2YXIgYWJzb2x1dGVPZmZzZXRcblxuICAvLyBaXG4gIHRva2VuID0gcGFyc2VUb2tlblRpbWV6b25lWi5leGVjKHRpbWV6b25lU3RyaW5nKVxuICBpZiAodG9rZW4pIHtcbiAgICByZXR1cm4gMFxuICB9XG5cbiAgLy8gwrFoaFxuICB0b2tlbiA9IHBhcnNlVG9rZW5UaW1lem9uZUhILmV4ZWModGltZXpvbmVTdHJpbmcpXG4gIGlmICh0b2tlbikge1xuICAgIGFic29sdXRlT2Zmc2V0ID0gcGFyc2VJbnQodG9rZW5bMl0sIDEwKSAqIDYwXG4gICAgcmV0dXJuICh0b2tlblsxXSA9PT0gJysnKSA/IC1hYnNvbHV0ZU9mZnNldCA6IGFic29sdXRlT2Zmc2V0XG4gIH1cblxuICAvLyDCsWhoOm1tIG9yIMKxaGhtbVxuICB0b2tlbiA9IHBhcnNlVG9rZW5UaW1lem9uZUhITU0uZXhlYyh0aW1lem9uZVN0cmluZylcbiAgaWYgKHRva2VuKSB7XG4gICAgYWJzb2x1dGVPZmZzZXQgPSBwYXJzZUludCh0b2tlblsyXSwgMTApICogNjAgKyBwYXJzZUludCh0b2tlblszXSwgMTApXG4gICAgcmV0dXJuICh0b2tlblsxXSA9PT0gJysnKSA/IC1hYnNvbHV0ZU9mZnNldCA6IGFic29sdXRlT2Zmc2V0XG4gIH1cblxuICByZXR1cm4gMFxufVxuXG5mdW5jdGlvbiBkYXlPZklTT1llYXIgKGlzb1llYXIsIHdlZWssIGRheSkge1xuICB3ZWVrID0gd2VlayB8fCAwXG4gIGRheSA9IGRheSB8fCAwXG4gIHZhciBkYXRlID0gbmV3IERhdGUoMClcbiAgZGF0ZS5zZXRVVENGdWxsWWVhcihpc29ZZWFyLCAwLCA0KVxuICB2YXIgZm91cnRoT2ZKYW51YXJ5RGF5ID0gZGF0ZS5nZXRVVENEYXkoKSB8fCA3XG4gIHZhciBkaWZmID0gd2VlayAqIDcgKyBkYXkgKyAxIC0gZm91cnRoT2ZKYW51YXJ5RGF5XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIGRpZmYpXG4gIHJldHVybiBkYXRlXG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyc2VcbiIsInZhciBwYXJzZSA9IHJlcXVpcmUoJy4uL3BhcnNlL2luZGV4LmpzJylcblxuLyoqXG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYSBkYXkgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhIGRheSBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxTdHJpbmd8TnVtYmVyfSBkYXRlIC0gdGhlIG9yaWdpbmFsIGRhdGVcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgc3RhcnQgb2YgYSBkYXlcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGEgZGF5IGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogdmFyIHJlc3VsdCA9IHN0YXJ0T2ZEYXkobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSlcbiAqIC8vPT4gVHVlIFNlcCAwMiAyMDE0IDAwOjAwOjAwXG4gKi9cbmZ1bmN0aW9uIHN0YXJ0T2ZEYXkgKGRpcnR5RGF0ZSkge1xuICB2YXIgZGF0ZSA9IHBhcnNlKGRpcnR5RGF0ZSlcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKVxuICByZXR1cm4gZGF0ZVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YXJ0T2ZEYXlcbiIsInZhciBzdGFydE9mV2VlayA9IHJlcXVpcmUoJy4uL3N0YXJ0X29mX3dlZWsvaW5kZXguanMnKVxuXG4vKipcbiAqIEBjYXRlZ29yeSBJU08gV2VlayBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIHN0YXJ0IG9mIGFuIElTTyB3ZWVrIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgc3RhcnQgb2YgYW4gSVNPIHdlZWsgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiBJU08gd2Vlay1udW1iZXJpbmcgeWVhcjogaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlXG4gKlxuICogQHBhcmFtIHtEYXRlfFN0cmluZ3xOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHJldHVybnMge0RhdGV9IHRoZSBzdGFydCBvZiBhbiBJU08gd2Vla1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBUaGUgc3RhcnQgb2YgYW4gSVNPIHdlZWsgZm9yIDIgU2VwdGVtYmVyIDIwMTQgMTE6NTU6MDA6XG4gKiB2YXIgcmVzdWx0ID0gc3RhcnRPZklTT1dlZWsobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSlcbiAqIC8vPT4gTW9uIFNlcCAwMSAyMDE0IDAwOjAwOjAwXG4gKi9cbmZ1bmN0aW9uIHN0YXJ0T2ZJU09XZWVrIChkaXJ0eURhdGUpIHtcbiAgcmV0dXJuIHN0YXJ0T2ZXZWVrKGRpcnR5RGF0ZSwge3dlZWtTdGFydHNPbjogMX0pXG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhcnRPZklTT1dlZWtcbiIsInZhciBnZXRJU09ZZWFyID0gcmVxdWlyZSgnLi4vZ2V0X2lzb195ZWFyL2luZGV4LmpzJylcbnZhciBzdGFydE9mSVNPV2VlayA9IHJlcXVpcmUoJy4uL3N0YXJ0X29mX2lzb193ZWVrL2luZGV4LmpzJylcblxuLyoqXG4gKiBAY2F0ZWdvcnkgSVNPIFdlZWstTnVtYmVyaW5nIFllYXIgSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBzdGFydCBvZiBhbiBJU08gd2Vlay1udW1iZXJpbmcgeWVhciBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIHN0YXJ0IG9mIGFuIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyLFxuICogd2hpY2ggYWx3YXlzIHN0YXJ0cyAzIGRheXMgYmVmb3JlIHRoZSB5ZWFyJ3MgZmlyc3QgVGh1cnNkYXkuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyOiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGVcbiAqXG4gKiBAcGFyYW0ge0RhdGV8U3RyaW5nfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHN0YXJ0IG9mIGFuIElTTyB5ZWFyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBzdGFydCBvZiBhbiBJU08gd2Vlay1udW1iZXJpbmcgeWVhciBmb3IgMiBKdWx5IDIwMDU6XG4gKiB2YXIgcmVzdWx0ID0gc3RhcnRPZklTT1llYXIobmV3IERhdGUoMjAwNSwgNiwgMikpXG4gKiAvLz0+IE1vbiBKYW4gMDMgMjAwNSAwMDowMDowMFxuICovXG5mdW5jdGlvbiBzdGFydE9mSVNPWWVhciAoZGlydHlEYXRlKSB7XG4gIHZhciB5ZWFyID0gZ2V0SVNPWWVhcihkaXJ0eURhdGUpXG4gIHZhciBmb3VydGhPZkphbnVhcnkgPSBuZXcgRGF0ZSgwKVxuICBmb3VydGhPZkphbnVhcnkuc2V0RnVsbFllYXIoeWVhciwgMCwgNClcbiAgZm91cnRoT2ZKYW51YXJ5LnNldEhvdXJzKDAsIDAsIDAsIDApXG4gIHZhciBkYXRlID0gc3RhcnRPZklTT1dlZWsoZm91cnRoT2ZKYW51YXJ5KVxuICByZXR1cm4gZGF0ZVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YXJ0T2ZJU09ZZWFyXG4iLCJ2YXIgcGFyc2UgPSByZXF1aXJlKCcuLi9wYXJzZS9pbmRleC5qcycpXG5cbi8qKlxuICogQGNhdGVnb3J5IFdlZWsgSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBzdGFydCBvZiBhIHdlZWsgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhIHdlZWsgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8U3RyaW5nfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gdGhlIG9iamVjdCB3aXRoIG9wdGlvbnNcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy53ZWVrU3RhcnRzT249MF0gLSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayAoMCAtIFN1bmRheSlcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgc3RhcnQgb2YgYSB3ZWVrXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBzdGFydCBvZiBhIHdlZWsgZm9yIDIgU2VwdGVtYmVyIDIwMTQgMTE6NTU6MDA6XG4gKiB2YXIgcmVzdWx0ID0gc3RhcnRPZldlZWsobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSlcbiAqIC8vPT4gU3VuIEF1ZyAzMSAyMDE0IDAwOjAwOjAwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElmIHRoZSB3ZWVrIHN0YXJ0cyBvbiBNb25kYXksIHRoZSBzdGFydCBvZiB0aGUgd2VlayBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIHZhciByZXN1bHQgPSBzdGFydE9mV2VlayhuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApLCB7d2Vla1N0YXJ0c09uOiAxfSlcbiAqIC8vPT4gTW9uIFNlcCAwMSAyMDE0IDAwOjAwOjAwXG4gKi9cbmZ1bmN0aW9uIHN0YXJ0T2ZXZWVrIChkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICB2YXIgd2Vla1N0YXJ0c09uID0gZGlydHlPcHRpb25zID8gKE51bWJlcihkaXJ0eU9wdGlvbnMud2Vla1N0YXJ0c09uKSB8fCAwKSA6IDBcblxuICB2YXIgZGF0ZSA9IHBhcnNlKGRpcnR5RGF0ZSlcbiAgdmFyIGRheSA9IGRhdGUuZ2V0RGF5KClcbiAgdmFyIGRpZmYgPSAoZGF5IDwgd2Vla1N0YXJ0c09uID8gNyA6IDApICsgZGF5IC0gd2Vla1N0YXJ0c09uXG5cbiAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpIC0gZGlmZilcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKVxuICByZXR1cm4gZGF0ZVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YXJ0T2ZXZWVrXG4iLCJ2YXIgcGFyc2UgPSByZXF1aXJlKCcuLi9wYXJzZS9pbmRleC5qcycpXG5cbi8qKlxuICogQGNhdGVnb3J5IFllYXIgSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBzdGFydCBvZiBhIHllYXIgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhIHllYXIgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8U3RyaW5nfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHN0YXJ0IG9mIGEgeWVhclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBUaGUgc3RhcnQgb2YgYSB5ZWFyIGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogdmFyIHJlc3VsdCA9IHN0YXJ0T2ZZZWFyKG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMDApKVxuICogLy89PiBXZWQgSmFuIDAxIDIwMTQgMDA6MDA6MDBcbiAqL1xuZnVuY3Rpb24gc3RhcnRPZlllYXIgKGRpcnR5RGF0ZSkge1xuICB2YXIgY2xlYW5EYXRlID0gcGFyc2UoZGlydHlEYXRlKVxuICB2YXIgZGF0ZSA9IG5ldyBEYXRlKDApXG4gIGRhdGUuc2V0RnVsbFllYXIoY2xlYW5EYXRlLmdldEZ1bGxZZWFyKCksIDAsIDEpXG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMClcbiAgcmV0dXJuIGRhdGVcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFydE9mWWVhclxuIl0sInNvdXJjZVJvb3QiOiIifQ==